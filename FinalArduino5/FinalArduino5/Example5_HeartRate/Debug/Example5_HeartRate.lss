
Example5_HeartRate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800100  000024c2  00002556  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000249  0080020c  0080020c  00002662  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002662  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002694  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000638  00000000  00000000  000026d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ddf7  00000000  00000000  00002d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000026fc  00000000  00000000  00010b03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000030ef  00000000  00000000  000131ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001228  00000000  00000000  000162f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003e55  00000000  00000000  00017518  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005a64  00000000  00000000  0001b36d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005c0  00000000  00000000  00020dd1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
       8:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
       c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      10:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      14:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      18:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      1c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      20:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      24:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      28:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      2c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      30:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      34:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      38:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      3c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      40:	0c 94 2d 0d 	jmp	0x1a5a	; 0x1a5a <__vector_16>
      44:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      48:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__vector_18>
      4c:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__vector_19>
      50:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      54:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      58:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      5c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      60:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__vector_24>
      64:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <__ctors_start>:
      ae:	30 07       	cpc	r19, r16
      b0:	0a 0b       	sbc	r16, r26
      b2:	4e 0f       	add	r20, r30

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	12 e0       	ldi	r17, 0x02	; 2
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	e2 ec       	ldi	r30, 0xC2	; 194
      c8:	f4 e2       	ldi	r31, 0x24	; 36
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	ac 30       	cpi	r26, 0x0C	; 12
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	24 e0       	ldi	r18, 0x04	; 4
      d8:	ac e0       	ldi	r26, 0x0C	; 12
      da:	b2 e0       	ldi	r27, 0x02	; 2
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a5 35       	cpi	r26, 0x55	; 85
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>

000000e6 <__do_global_ctors>:
      e6:	10 e0       	ldi	r17, 0x00	; 0
      e8:	ca e5       	ldi	r28, 0x5A	; 90
      ea:	d0 e0       	ldi	r29, 0x00	; 0
      ec:	04 c0       	rjmp	.+8      	; 0xf6 <__do_global_ctors+0x10>
      ee:	21 97       	sbiw	r28, 0x01	; 1
      f0:	fe 01       	movw	r30, r28
      f2:	0e 94 59 12 	call	0x24b2	; 0x24b2 <__tablejump2__>
      f6:	c7 35       	cpi	r28, 0x57	; 87
      f8:	d1 07       	cpc	r29, r17
      fa:	c9 f7       	brne	.-14     	; 0xee <__do_global_ctors+0x8>
      fc:	0e 94 38 0b 	call	0x1670	; 0x1670 <main>
     100:	0c 94 5f 12 	jmp	0x24be	; 0x24be <_exit>

00000104 <__bad_interrupt>:
     104:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000108 <_Z18averageDCEstimatorPlj>:
  return(beatDetected);
}

//  Average DC Estimator
int16_t averageDCEstimator(int32_t *p, uint16_t x)
{
     108:	fc 01       	movw	r30, r24
  *p += ((((long) x << 15) - *p) >> 4);
     10a:	80 81       	ld	r24, Z
     10c:	91 81       	ldd	r25, Z+1	; 0x01
     10e:	a2 81       	ldd	r26, Z+2	; 0x02
     110:	b3 81       	ldd	r27, Z+3	; 0x03
     112:	ab 01       	movw	r20, r22
     114:	60 e0       	ldi	r22, 0x00	; 0
     116:	70 e0       	ldi	r23, 0x00	; 0
     118:	2f e0       	ldi	r18, 0x0F	; 15
     11a:	44 0f       	add	r20, r20
     11c:	55 1f       	adc	r21, r21
     11e:	66 1f       	adc	r22, r22
     120:	77 1f       	adc	r23, r23
     122:	2a 95       	dec	r18
     124:	d1 f7       	brne	.-12     	; 0x11a <_Z18averageDCEstimatorPlj+0x12>
     126:	48 1b       	sub	r20, r24
     128:	59 0b       	sbc	r21, r25
     12a:	6a 0b       	sbc	r22, r26
     12c:	7b 0b       	sbc	r23, r27
     12e:	34 e0       	ldi	r19, 0x04	; 4
     130:	75 95       	asr	r23
     132:	67 95       	ror	r22
     134:	57 95       	ror	r21
     136:	47 95       	ror	r20
     138:	3a 95       	dec	r19
     13a:	d1 f7       	brne	.-12     	; 0x130 <_Z18averageDCEstimatorPlj+0x28>
     13c:	48 0f       	add	r20, r24
     13e:	59 1f       	adc	r21, r25
     140:	6a 1f       	adc	r22, r26
     142:	7b 1f       	adc	r23, r27
     144:	40 83       	st	Z, r20
     146:	51 83       	std	Z+1, r21	; 0x01
     148:	62 83       	std	Z+2, r22	; 0x02
     14a:	73 83       	std	Z+3, r23	; 0x03
  return (*p >> 15);
     14c:	db 01       	movw	r26, r22
     14e:	ca 01       	movw	r24, r20
     150:	4f e0       	ldi	r20, 0x0F	; 15
     152:	b5 95       	asr	r27
     154:	a7 95       	ror	r26
     156:	97 95       	ror	r25
     158:	87 95       	ror	r24
     15a:	4a 95       	dec	r20
     15c:	d1 f7       	brne	.-12     	; 0x152 <_Z18averageDCEstimatorPlj+0x4a>
}
     15e:	08 95       	ret

00000160 <_Z16lowPassFIRFilteri>:

//  Low Pass FIR Filter
int16_t lowPassFIRFilter(int16_t din)
{  
     160:	9f 92       	push	r9
     162:	af 92       	push	r10
     164:	bf 92       	push	r11
     166:	cf 92       	push	r12
     168:	df 92       	push	r13
     16a:	ef 92       	push	r14
     16c:	ff 92       	push	r15
     16e:	0f 93       	push	r16
     170:	1f 93       	push	r17
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
  cbuf[offset] = din;
     176:	90 90 0c 02 	lds	r9, 0x020C	; 0x80020c <__data_end>
     17a:	c9 2d       	mov	r28, r9
     17c:	d0 e0       	ldi	r29, 0x00	; 0
     17e:	fe 01       	movw	r30, r28
     180:	ee 0f       	add	r30, r30
     182:	ff 1f       	adc	r31, r31
     184:	e3 5f       	subi	r30, 0xF3	; 243
     186:	fd 4f       	sbci	r31, 0xFD	; 253
     188:	91 83       	std	Z+1, r25	; 0x01
     18a:	80 83       	st	Z, r24

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
     18c:	fe 01       	movw	r30, r28
     18e:	3b 97       	sbiw	r30, 0x0b	; 11
     190:	ef 71       	andi	r30, 0x1F	; 31
     192:	ff 27       	eor	r31, r31
     194:	ee 0f       	add	r30, r30
     196:	ff 1f       	adc	r31, r31
     198:	e3 5f       	subi	r30, 0xF3	; 243
     19a:	fd 4f       	sbci	r31, 0xFD	; 253
     19c:	c0 80       	ld	r12, Z
     19e:	d1 80       	ldd	r13, Z+1	; 0x01
}

//  Integer multiplier
int32_t mul16(int16_t x, int16_t y)
{
  return((long)x * (long)y);
     1a0:	0d 2c       	mov	r0, r13
     1a2:	00 0c       	add	r0, r0
     1a4:	ee 08       	sbc	r14, r14
     1a6:	ff 08       	sbc	r15, r15
     1a8:	bc e0       	ldi	r27, 0x0C	; 12
     1aa:	cc 0c       	add	r12, r12
     1ac:	dd 1c       	adc	r13, r13
     1ae:	ee 1c       	adc	r14, r14
     1b0:	ff 1c       	adc	r15, r15
     1b2:	ba 95       	dec	r27
     1b4:	d1 f7       	brne	.-12     	; 0x1aa <_Z16lowPassFIRFilteri+0x4a>
     1b6:	04 e0       	ldi	r16, 0x04	; 4
     1b8:	11 e0       	ldi	r17, 0x01	; 1
     1ba:	40 e0       	ldi	r20, 0x00	; 0
     1bc:	50 e0       	ldi	r21, 0x00	; 0

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
  
  for (uint8_t i = 0 ; i < 11 ; i++)
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
     1be:	5e 01       	movw	r10, r28
     1c0:	86 e1       	ldi	r24, 0x16	; 22
     1c2:	a8 1a       	sub	r10, r24
     1c4:	b1 08       	sbc	r11, r1
     1c6:	d5 01       	movw	r26, r10
     1c8:	a4 0f       	add	r26, r20
     1ca:	b5 1f       	adc	r27, r21
     1cc:	af 71       	andi	r26, 0x1F	; 31
     1ce:	bb 27       	eor	r27, r27
     1d0:	aa 0f       	add	r26, r26
     1d2:	bb 1f       	adc	r27, r27
     1d4:	a3 5f       	subi	r26, 0xF3	; 243
     1d6:	bd 4f       	sbci	r27, 0xFD	; 253
     1d8:	fe 01       	movw	r30, r28
     1da:	e4 1b       	sub	r30, r20
     1dc:	f5 0b       	sbc	r31, r21
     1de:	ef 71       	andi	r30, 0x1F	; 31
     1e0:	ff 27       	eor	r31, r31
     1e2:	ee 0f       	add	r30, r30
     1e4:	ff 1f       	adc	r31, r31
     1e6:	e3 5f       	subi	r30, 0xF3	; 243
     1e8:	fd 4f       	sbci	r31, 0xFD	; 253
     1ea:	0d 90       	ld	r0, X+
     1ec:	bc 91       	ld	r27, X
     1ee:	a0 2d       	mov	r26, r0
     1f0:	80 81       	ld	r24, Z
     1f2:	91 81       	ldd	r25, Z+1	; 0x01
     1f4:	a8 0f       	add	r26, r24
     1f6:	b9 1f       	adc	r27, r25
     1f8:	f8 01       	movw	r30, r16
     1fa:	21 91       	ld	r18, Z+
     1fc:	31 91       	ld	r19, Z+
     1fe:	8f 01       	movw	r16, r30
     200:	0e 94 27 12 	call	0x244e	; 0x244e <__mulhisi3>
     204:	c6 0e       	add	r12, r22
     206:	d7 1e       	adc	r13, r23
     208:	e8 1e       	adc	r14, r24
     20a:	f9 1e       	adc	r15, r25
     20c:	4f 5f       	subi	r20, 0xFF	; 255
     20e:	5f 4f       	sbci	r21, 0xFF	; 255
{  
  cbuf[offset] = din;

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
  
  for (uint8_t i = 0 ; i < 11 ; i++)
     210:	4b 30       	cpi	r20, 0x0B	; 11
     212:	51 05       	cpc	r21, r1
     214:	c1 f6       	brne	.-80     	; 0x1c6 <_Z16lowPassFIRFilteri+0x66>
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
  }

  offset++;
  offset %= 32; //Wrap condition
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	89 0d       	add	r24, r9
     21a:	8f 71       	andi	r24, 0x1F	; 31
     21c:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>

  return(z >> 15);
     220:	d7 01       	movw	r26, r14
     222:	c6 01       	movw	r24, r12
     224:	2f e0       	ldi	r18, 0x0F	; 15
     226:	b5 95       	asr	r27
     228:	a7 95       	ror	r26
     22a:	97 95       	ror	r25
     22c:	87 95       	ror	r24
     22e:	2a 95       	dec	r18
     230:	d1 f7       	brne	.-12     	; 0x226 <_Z16lowPassFIRFilteri+0xc6>
}
     232:	df 91       	pop	r29
     234:	cf 91       	pop	r28
     236:	1f 91       	pop	r17
     238:	0f 91       	pop	r16
     23a:	ff 90       	pop	r15
     23c:	ef 90       	pop	r14
     23e:	df 90       	pop	r13
     240:	cf 90       	pop	r12
     242:	bf 90       	pop	r11
     244:	af 90       	pop	r10
     246:	9f 90       	pop	r9
     248:	08 95       	ret

0000024a <_Z12checkForBeatl>:

//  Heart Rate Monitor functions takes a sample value and the sample number
//  Returns true if a beat is detected
//  A running average of four samples is recommended for display on the screen.
bool checkForBeat(int32_t sample)
{
     24a:	cf 92       	push	r12
     24c:	df 92       	push	r13
     24e:	ef 92       	push	r14
     250:	ff 92       	push	r15
     252:	6b 01       	movw	r12, r22
     254:	7c 01       	movw	r14, r24
  bool beatDetected = false;

  //  Save current state
  IR_AC_Signal_Previous = IR_AC_Signal_Current;
     256:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <IR_AC_Signal_Current>
     25a:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <IR_AC_Signal_Current+0x1>
     25e:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <IR_AC_Signal_Previous+0x1>
     262:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <IR_AC_Signal_Previous>
  //This is good to view for debugging
  //Serial.print("Signal_Current: ");
  //Serial.println(IR_AC_Signal_Current);

  //  Process next data sample
  IR_Average_Estimated = averageDCEstimator(&ir_avg_reg, sample);
     266:	b6 01       	movw	r22, r12
     268:	8d e4       	ldi	r24, 0x4D	; 77
     26a:	92 e0       	ldi	r25, 0x02	; 2
     26c:	0e 94 84 00 	call	0x108	; 0x108 <_Z18averageDCEstimatorPlj>
     270:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <IR_Average_Estimated+0x1>
     274:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <IR_Average_Estimated>
  IR_AC_Signal_Current = lowPassFIRFilter(sample - IR_Average_Estimated);
     278:	96 01       	movw	r18, r12
     27a:	28 1b       	sub	r18, r24
     27c:	39 0b       	sbc	r19, r25
     27e:	c9 01       	movw	r24, r18
     280:	0e 94 b0 00 	call	0x160	; 0x160 <_Z16lowPassFIRFilteri>
     284:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <IR_AC_Signal_Current+0x1>
     288:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <IR_AC_Signal_Current>

  //  Detect positive zero crossing (rising edge)
  if ((IR_AC_Signal_Previous < 0) & (IR_AC_Signal_Current >= 0))
     28c:	40 91 5b 02 	lds	r20, 0x025B	; 0x80025b <IR_AC_Signal_Previous>
     290:	50 91 5c 02 	lds	r21, 0x025C	; 0x80025c <IR_AC_Signal_Previous+0x1>
     294:	57 ff       	sbrs	r21, 7
     296:	28 c0       	rjmp	.+80     	; 0x2e8 <_Z12checkForBeatl+0x9e>
     298:	97 fd       	sbrc	r25, 7
     29a:	26 c0       	rjmp	.+76     	; 0x2e8 <_Z12checkForBeatl+0x9e>
  {
  
    IR_AC_Max = IR_AC_Signal_max; //Adjust our AC max and min
     29c:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <IR_AC_Signal_max>
     2a0:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <IR_AC_Signal_max+0x1>
     2a4:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <IR_AC_Max+0x1>
     2a8:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <IR_AC_Max>
    IR_AC_Min = IR_AC_Signal_min;
     2ac:	60 91 59 02 	lds	r22, 0x0259	; 0x800259 <IR_AC_Signal_min>
     2b0:	70 91 5a 02 	lds	r23, 0x025A	; 0x80025a <IR_AC_Signal_min+0x1>
     2b4:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <IR_AC_Min+0x1>
     2b8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <IR_AC_Min>

    positiveEdge = 1;
     2bc:	e1 e0       	ldi	r30, 0x01	; 1
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	f0 93 54 02 	sts	0x0254, r31	; 0x800254 <positiveEdge+0x1>
     2c4:	e0 93 53 02 	sts	0x0253, r30	; 0x800253 <positiveEdge>
    negativeEdge = 0;
     2c8:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <negativeEdge+0x1>
     2cc:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <negativeEdge>
    IR_AC_Signal_max = 0;
     2d0:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <IR_AC_Signal_max+0x1>
     2d4:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <IR_AC_Signal_max>

    //if ((IR_AC_Max - IR_AC_Min) > 100 & (IR_AC_Max - IR_AC_Min) < 1000)
    if ((IR_AC_Max - IR_AC_Min) > 20 & (IR_AC_Max - IR_AC_Min) < 1000)
     2d8:	26 1b       	sub	r18, r22
     2da:	37 0b       	sbc	r19, r23
     2dc:	25 51       	subi	r18, 0x15	; 21
     2de:	31 09       	sbc	r19, r1
     2e0:	61 e0       	ldi	r22, 0x01	; 1
     2e2:	23 3d       	cpi	r18, 0xD3	; 211
     2e4:	33 40       	sbci	r19, 0x03	; 3
     2e6:	08 f0       	brcs	.+2      	; 0x2ea <_Z12checkForBeatl+0xa0>
//  Heart Rate Monitor functions takes a sample value and the sample number
//  Returns true if a beat is detected
//  A running average of four samples is recommended for display on the screen.
bool checkForBeat(int32_t sample)
{
  bool beatDetected = false;
     2e8:	60 e0       	ldi	r22, 0x00	; 0
      beatDetected = true;
    }
  }

  //  Detect negative zero crossing (falling edge)
  if ((IR_AC_Signal_Previous > 0) & (IR_AC_Signal_Current <= 0))
     2ea:	14 16       	cp	r1, r20
     2ec:	15 06       	cpc	r1, r21
     2ee:	8c f4       	brge	.+34     	; 0x312 <_Z12checkForBeatl+0xc8>
     2f0:	18 16       	cp	r1, r24
     2f2:	19 06       	cpc	r1, r25
     2f4:	74 f0       	brlt	.+28     	; 0x312 <_Z12checkForBeatl+0xc8>
  {
    positiveEdge = 0;
     2f6:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <positiveEdge+0x1>
     2fa:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <positiveEdge>
    negativeEdge = 1;
     2fe:	21 e0       	ldi	r18, 0x01	; 1
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	30 93 52 02 	sts	0x0252, r19	; 0x800252 <negativeEdge+0x1>
     306:	20 93 51 02 	sts	0x0251, r18	; 0x800251 <negativeEdge>
    IR_AC_Signal_min = 0;
     30a:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <IR_AC_Signal_min+0x1>
     30e:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <IR_AC_Signal_min>
  }

  //  Find Maximum value in positive cycle
  if (positiveEdge & (IR_AC_Signal_Current > IR_AC_Signal_Previous))
     312:	e1 e0       	ldi	r30, 0x01	; 1
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	48 17       	cp	r20, r24
     318:	59 07       	cpc	r21, r25
     31a:	14 f0       	brlt	.+4      	; 0x320 <_Z12checkForBeatl+0xd6>
     31c:	e0 e0       	ldi	r30, 0x00	; 0
     31e:	f0 e0       	ldi	r31, 0x00	; 0
     320:	20 91 53 02 	lds	r18, 0x0253	; 0x800253 <positiveEdge>
     324:	30 91 54 02 	lds	r19, 0x0254	; 0x800254 <positiveEdge+0x1>
     328:	2e 23       	and	r18, r30
     32a:	3f 23       	and	r19, r31
     32c:	23 2b       	or	r18, r19
     32e:	21 f0       	breq	.+8      	; 0x338 <_Z12checkForBeatl+0xee>
  {
    IR_AC_Signal_max = IR_AC_Signal_Current;
     330:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <IR_AC_Signal_max+0x1>
     334:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <IR_AC_Signal_max>
  }

  //  Find Minimum value in negative cycle
  if (negativeEdge & (IR_AC_Signal_Current < IR_AC_Signal_Previous))
     338:	e1 e0       	ldi	r30, 0x01	; 1
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	84 17       	cp	r24, r20
     33e:	95 07       	cpc	r25, r21
     340:	14 f0       	brlt	.+4      	; 0x346 <_Z12checkForBeatl+0xfc>
     342:	e0 e0       	ldi	r30, 0x00	; 0
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	20 91 51 02 	lds	r18, 0x0251	; 0x800251 <negativeEdge>
     34a:	30 91 52 02 	lds	r19, 0x0252	; 0x800252 <negativeEdge+0x1>
     34e:	2e 23       	and	r18, r30
     350:	3f 23       	and	r19, r31
     352:	23 2b       	or	r18, r19
     354:	21 f0       	breq	.+8      	; 0x35e <_Z12checkForBeatl+0x114>
  {
    IR_AC_Signal_min = IR_AC_Signal_Current;
     356:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <IR_AC_Signal_min+0x1>
     35a:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <IR_AC_Signal_min>
  }
  
  return(beatDetected);
}
     35e:	86 2f       	mov	r24, r22
     360:	ff 90       	pop	r15
     362:	ef 90       	pop	r14
     364:	df 90       	pop	r13
     366:	cf 90       	pop	r12
     368:	08 95       	ret

0000036a <_ZN8MAX30105C1Ev>:

//Set number of samples to trigger the almost full interrupt (Page 18)
//Power on default is 32 samples
//Note it is reverse: 0x00 is 32 samples, 0x0F is 17 samples
void MAX30105::setFIFOAlmostFull(uint8_t numberOfSamples) {
  bitMask(MAX30105_FIFOCONFIG, MAX30105_A_FULL_MASK, numberOfSamples);
     36a:	08 95       	ret

0000036c <_ZN8MAX3010513readRegister8Ehh>:
     36c:	0f 93       	push	r16
     36e:	1f 93       	push	r17
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	ec 01       	movw	r28, r24
     376:	16 2f       	mov	r17, r22
     378:	04 2f       	mov	r16, r20
     37a:	88 81       	ld	r24, Y
     37c:	99 81       	ldd	r25, Y+1	; 0x01
     37e:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <_ZN7TwoWire17beginTransmissionEh>
     382:	88 81       	ld	r24, Y
     384:	99 81       	ldd	r25, Y+1	; 0x01
     386:	dc 01       	movw	r26, r24
     388:	ed 91       	ld	r30, X+
     38a:	fc 91       	ld	r31, X
     38c:	01 90       	ld	r0, Z+
     38e:	f0 81       	ld	r31, Z
     390:	e0 2d       	mov	r30, r0
     392:	60 2f       	mov	r22, r16
     394:	09 95       	icall
     396:	60 e0       	ldi	r22, 0x00	; 0
     398:	88 81       	ld	r24, Y
     39a:	99 81       	ldd	r25, Y+1	; 0x01
     39c:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <_ZN7TwoWire15endTransmissionEh>
     3a0:	61 2f       	mov	r22, r17
     3a2:	70 e0       	ldi	r23, 0x00	; 0
     3a4:	41 e0       	ldi	r20, 0x01	; 1
     3a6:	50 e0       	ldi	r21, 0x00	; 0
     3a8:	88 81       	ld	r24, Y
     3aa:	99 81       	ldd	r25, Y+1	; 0x01
     3ac:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <_ZN7TwoWire11requestFromEii>
     3b0:	00 e0       	ldi	r16, 0x00	; 0
     3b2:	10 e0       	ldi	r17, 0x00	; 0
     3b4:	88 81       	ld	r24, Y
     3b6:	99 81       	ldd	r25, Y+1	; 0x01
     3b8:	dc 01       	movw	r26, r24
     3ba:	ed 91       	ld	r30, X+
     3bc:	fc 91       	ld	r31, X
     3be:	00 84       	ldd	r0, Z+8	; 0x08
     3c0:	f1 85       	ldd	r31, Z+9	; 0x09
     3c2:	e0 2d       	mov	r30, r0
     3c4:	09 95       	icall
     3c6:	89 2b       	or	r24, r25
     3c8:	21 f0       	breq	.+8      	; 0x3d2 <_ZN8MAX3010513readRegister8Ehh+0x66>
     3ca:	08 3c       	cpi	r16, 0xC8	; 200
     3cc:	11 05       	cpc	r17, r1
     3ce:	61 f4       	brne	.+24     	; 0x3e8 <_ZN8MAX3010513readRegister8Ehh+0x7c>
     3d0:	15 c0       	rjmp	.+42     	; 0x3fc <_ZN8MAX3010513readRegister8Ehh+0x90>
     3d2:	61 e0       	ldi	r22, 0x01	; 1
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <delay>
     3de:	0f 5f       	subi	r16, 0xFF	; 255
     3e0:	1f 4f       	sbci	r17, 0xFF	; 255
     3e2:	0a 3c       	cpi	r16, 0xCA	; 202
     3e4:	11 05       	cpc	r17, r1
     3e6:	31 f7       	brne	.-52     	; 0x3b4 <_ZN8MAX3010513readRegister8Ehh+0x48>
     3e8:	88 81       	ld	r24, Y
     3ea:	99 81       	ldd	r25, Y+1	; 0x01
     3ec:	dc 01       	movw	r26, r24
     3ee:	ed 91       	ld	r30, X+
     3f0:	fc 91       	ld	r31, X
     3f2:	02 84       	ldd	r0, Z+10	; 0x0a
     3f4:	f3 85       	ldd	r31, Z+11	; 0x0b
     3f6:	e0 2d       	mov	r30, r0
     3f8:	09 95       	icall
     3fa:	01 c0       	rjmp	.+2      	; 0x3fe <_ZN8MAX3010513readRegister8Ehh+0x92>
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	1f 91       	pop	r17
     404:	0f 91       	pop	r16
     406:	08 95       	ret

00000408 <_ZN8MAX3010515getWritePointerEv>:
     408:	44 e0       	ldi	r20, 0x04	; 4
     40a:	fc 01       	movw	r30, r24
     40c:	62 81       	ldd	r22, Z+2	; 0x02
     40e:	0c 94 b6 01 	jmp	0x36c	; 0x36c <_ZN8MAX3010513readRegister8Ehh>

00000412 <_ZN8MAX3010514getReadPointerEv>:
     412:	46 e0       	ldi	r20, 0x06	; 6
     414:	fc 01       	movw	r30, r24
     416:	62 81       	ldd	r22, Z+2	; 0x02
     418:	0c 94 b6 01 	jmp	0x36c	; 0x36c <_ZN8MAX3010513readRegister8Ehh>

0000041c <_ZN8MAX301055checkEv>:
     41c:	4f 92       	push	r4
     41e:	5f 92       	push	r5
     420:	6f 92       	push	r6
     422:	7f 92       	push	r7
     424:	af 92       	push	r10
     426:	bf 92       	push	r11
     428:	cf 92       	push	r12
     42a:	df 92       	push	r13
     42c:	ef 92       	push	r14
     42e:	ff 92       	push	r15
     430:	0f 93       	push	r16
     432:	1f 93       	push	r17
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	ec 01       	movw	r28, r24
     43a:	0e 94 09 02 	call	0x412	; 0x412 <_ZN8MAX3010514getReadPointerEv>
     43e:	f8 2e       	mov	r15, r24
     440:	ce 01       	movw	r24, r28
     442:	0e 94 04 02 	call	0x408	; 0x408 <_ZN8MAX3010515getWritePointerEv>
     446:	f8 16       	cp	r15, r24
     448:	09 f4       	brne	.+2      	; 0x44c <_ZN8MAX301055checkEv+0x30>
     44a:	ea c0       	rjmp	.+468    	; 0x620 <_ZN8MAX301055checkEv+0x204>
     44c:	08 2f       	mov	r16, r24
     44e:	10 e0       	ldi	r17, 0x00	; 0
     450:	0f 19       	sub	r16, r15
     452:	11 09       	sbc	r17, r1
     454:	17 ff       	sbrs	r17, 7
     456:	02 c0       	rjmp	.+4      	; 0x45c <_ZN8MAX301055checkEv+0x40>
     458:	00 5e       	subi	r16, 0xE0	; 224
     45a:	1f 4f       	sbci	r17, 0xFF	; 255
     45c:	2b 81       	ldd	r18, Y+3	; 0x03
     45e:	20 9f       	mul	r18, r16
     460:	c0 01       	movw	r24, r0
     462:	21 9f       	mul	r18, r17
     464:	90 0d       	add	r25, r0
     466:	11 24       	eor	r1, r1
     468:	7c 01       	movw	r14, r24
     46a:	ee 0c       	add	r14, r14
     46c:	ff 1c       	adc	r15, r15
     46e:	e8 0e       	add	r14, r24
     470:	f9 1e       	adc	r15, r25
     472:	67 e5       	ldi	r22, 0x57	; 87
     474:	70 e0       	ldi	r23, 0x00	; 0
     476:	88 81       	ld	r24, Y
     478:	99 81       	ldd	r25, Y+1	; 0x01
     47a:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7TwoWire17beginTransmissionEi>
     47e:	88 81       	ld	r24, Y
     480:	99 81       	ldd	r25, Y+1	; 0x01
     482:	dc 01       	movw	r26, r24
     484:	ed 91       	ld	r30, X+
     486:	fc 91       	ld	r31, X
     488:	01 90       	ld	r0, Z+
     48a:	f0 81       	ld	r31, Z
     48c:	e0 2d       	mov	r30, r0
     48e:	67 e0       	ldi	r22, 0x07	; 7
     490:	09 95       	icall
     492:	88 81       	ld	r24, Y
     494:	99 81       	ldd	r25, Y+1	; 0x01
     496:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <_ZN7TwoWire15endTransmissionEv>
     49a:	30 e2       	ldi	r19, 0x20	; 32
     49c:	a3 2e       	mov	r10, r19
     49e:	b1 2c       	mov	r11, r1
     4a0:	1e 14       	cp	r1, r14
     4a2:	1f 04       	cpc	r1, r15
     4a4:	0c f0       	brlt	.+2      	; 0x4a8 <_ZN8MAX301055checkEv+0x8c>
     4a6:	be c0       	rjmp	.+380    	; 0x624 <_ZN8MAX301055checkEv+0x208>
     4a8:	b1 e2       	ldi	r27, 0x21	; 33
     4aa:	eb 16       	cp	r14, r27
     4ac:	f1 04       	cpc	r15, r1
     4ae:	64 f0       	brlt	.+24     	; 0x4c8 <_ZN8MAX301055checkEv+0xac>
     4b0:	6b 81       	ldd	r22, Y+3	; 0x03
     4b2:	33 e0       	ldi	r19, 0x03	; 3
     4b4:	63 9f       	mul	r22, r19
     4b6:	b0 01       	movw	r22, r0
     4b8:	11 24       	eor	r1, r1
     4ba:	c5 01       	movw	r24, r10
     4bc:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <__divmodhi4>
     4c0:	65 01       	movw	r12, r10
     4c2:	c8 1a       	sub	r12, r24
     4c4:	d9 0a       	sbc	r13, r25
     4c6:	01 c0       	rjmp	.+2      	; 0x4ca <_ZN8MAX301055checkEv+0xae>
     4c8:	67 01       	movw	r12, r14
     4ca:	ec 18       	sub	r14, r12
     4cc:	fd 08       	sbc	r15, r13
     4ce:	a6 01       	movw	r20, r12
     4d0:	67 e5       	ldi	r22, 0x57	; 87
     4d2:	70 e0       	ldi	r23, 0x00	; 0
     4d4:	88 81       	ld	r24, Y
     4d6:	99 81       	ldd	r25, Y+1	; 0x01
     4d8:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <_ZN7TwoWire11requestFromEii>
     4dc:	1c 14       	cp	r1, r12
     4de:	1d 04       	cpc	r1, r13
     4e0:	fc f6       	brge	.-66     	; 0x4a0 <_ZN8MAX301055checkEv+0x84>
     4e2:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <sense+0x30>
     4e6:	8f 5f       	subi	r24, 0xFF	; 255
     4e8:	83 70       	andi	r24, 0x03	; 3
     4ea:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <sense+0x30>
     4ee:	71 2c       	mov	r7, r1
     4f0:	88 81       	ld	r24, Y
     4f2:	99 81       	ldd	r25, Y+1	; 0x01
     4f4:	dc 01       	movw	r26, r24
     4f6:	ed 91       	ld	r30, X+
     4f8:	fc 91       	ld	r31, X
     4fa:	02 84       	ldd	r0, Z+10	; 0x0a
     4fc:	f3 85       	ldd	r31, Z+11	; 0x0b
     4fe:	e0 2d       	mov	r30, r0
     500:	09 95       	icall
     502:	68 2e       	mov	r6, r24
     504:	88 81       	ld	r24, Y
     506:	99 81       	ldd	r25, Y+1	; 0x01
     508:	dc 01       	movw	r26, r24
     50a:	ed 91       	ld	r30, X+
     50c:	fc 91       	ld	r31, X
     50e:	02 84       	ldd	r0, Z+10	; 0x0a
     510:	f3 85       	ldd	r31, Z+11	; 0x0b
     512:	e0 2d       	mov	r30, r0
     514:	09 95       	icall
     516:	58 2e       	mov	r5, r24
     518:	88 81       	ld	r24, Y
     51a:	99 81       	ldd	r25, Y+1	; 0x01
     51c:	dc 01       	movw	r26, r24
     51e:	ed 91       	ld	r30, X+
     520:	fc 91       	ld	r31, X
     522:	02 84       	ldd	r0, Z+10	; 0x0a
     524:	f3 85       	ldd	r31, Z+11	; 0x0b
     526:	e0 2d       	mov	r30, r0
     528:	09 95       	icall
     52a:	48 2e       	mov	r4, r24
     52c:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <sense+0x30>
     530:	b4 e0       	ldi	r27, 0x04	; 4
     532:	eb 9f       	mul	r30, r27
     534:	f0 01       	movw	r30, r0
     536:	11 24       	eor	r1, r1
     538:	e1 5a       	subi	r30, 0xA1	; 161
     53a:	fd 4f       	sbci	r31, 0xFD	; 253
     53c:	d3 01       	movw	r26, r6
     53e:	c2 01       	movw	r24, r4
     540:	a3 70       	andi	r26, 0x03	; 3
     542:	bb 27       	eor	r27, r27
     544:	80 83       	st	Z, r24
     546:	91 83       	std	Z+1, r25	; 0x01
     548:	a2 83       	std	Z+2, r26	; 0x02
     54a:	b3 83       	std	Z+3, r27	; 0x03
     54c:	8b 81       	ldd	r24, Y+3	; 0x03
     54e:	82 30       	cpi	r24, 0x02	; 2
     550:	70 f1       	brcs	.+92     	; 0x5ae <_ZN8MAX301055checkEv+0x192>
     552:	88 81       	ld	r24, Y
     554:	99 81       	ldd	r25, Y+1	; 0x01
     556:	dc 01       	movw	r26, r24
     558:	ed 91       	ld	r30, X+
     55a:	fc 91       	ld	r31, X
     55c:	02 84       	ldd	r0, Z+10	; 0x0a
     55e:	f3 85       	ldd	r31, Z+11	; 0x0b
     560:	e0 2d       	mov	r30, r0
     562:	09 95       	icall
     564:	68 2e       	mov	r6, r24
     566:	88 81       	ld	r24, Y
     568:	99 81       	ldd	r25, Y+1	; 0x01
     56a:	dc 01       	movw	r26, r24
     56c:	ed 91       	ld	r30, X+
     56e:	fc 91       	ld	r31, X
     570:	02 84       	ldd	r0, Z+10	; 0x0a
     572:	f3 85       	ldd	r31, Z+11	; 0x0b
     574:	e0 2d       	mov	r30, r0
     576:	09 95       	icall
     578:	58 2e       	mov	r5, r24
     57a:	88 81       	ld	r24, Y
     57c:	99 81       	ldd	r25, Y+1	; 0x01
     57e:	dc 01       	movw	r26, r24
     580:	ed 91       	ld	r30, X+
     582:	fc 91       	ld	r31, X
     584:	02 84       	ldd	r0, Z+10	; 0x0a
     586:	f3 85       	ldd	r31, Z+11	; 0x0b
     588:	e0 2d       	mov	r30, r0
     58a:	09 95       	icall
     58c:	48 2e       	mov	r4, r24
     58e:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <sense+0x30>
     592:	b4 e0       	ldi	r27, 0x04	; 4
     594:	eb 9f       	mul	r30, r27
     596:	f0 01       	movw	r30, r0
     598:	11 24       	eor	r1, r1
     59a:	e1 59       	subi	r30, 0x91	; 145
     59c:	fd 4f       	sbci	r31, 0xFD	; 253
     59e:	d3 01       	movw	r26, r6
     5a0:	c2 01       	movw	r24, r4
     5a2:	a3 70       	andi	r26, 0x03	; 3
     5a4:	bb 27       	eor	r27, r27
     5a6:	80 83       	st	Z, r24
     5a8:	91 83       	std	Z+1, r25	; 0x01
     5aa:	a2 83       	std	Z+2, r26	; 0x02
     5ac:	b3 83       	std	Z+3, r27	; 0x03
     5ae:	8b 81       	ldd	r24, Y+3	; 0x03
     5b0:	83 30       	cpi	r24, 0x03	; 3
     5b2:	70 f1       	brcs	.+92     	; 0x610 <_ZN8MAX301055checkEv+0x1f4>
     5b4:	88 81       	ld	r24, Y
     5b6:	99 81       	ldd	r25, Y+1	; 0x01
     5b8:	dc 01       	movw	r26, r24
     5ba:	ed 91       	ld	r30, X+
     5bc:	fc 91       	ld	r31, X
     5be:	02 84       	ldd	r0, Z+10	; 0x0a
     5c0:	f3 85       	ldd	r31, Z+11	; 0x0b
     5c2:	e0 2d       	mov	r30, r0
     5c4:	09 95       	icall
     5c6:	68 2e       	mov	r6, r24
     5c8:	88 81       	ld	r24, Y
     5ca:	99 81       	ldd	r25, Y+1	; 0x01
     5cc:	dc 01       	movw	r26, r24
     5ce:	ed 91       	ld	r30, X+
     5d0:	fc 91       	ld	r31, X
     5d2:	02 84       	ldd	r0, Z+10	; 0x0a
     5d4:	f3 85       	ldd	r31, Z+11	; 0x0b
     5d6:	e0 2d       	mov	r30, r0
     5d8:	09 95       	icall
     5da:	58 2e       	mov	r5, r24
     5dc:	88 81       	ld	r24, Y
     5de:	99 81       	ldd	r25, Y+1	; 0x01
     5e0:	dc 01       	movw	r26, r24
     5e2:	ed 91       	ld	r30, X+
     5e4:	fc 91       	ld	r31, X
     5e6:	02 84       	ldd	r0, Z+10	; 0x0a
     5e8:	f3 85       	ldd	r31, Z+11	; 0x0b
     5ea:	e0 2d       	mov	r30, r0
     5ec:	09 95       	icall
     5ee:	48 2e       	mov	r4, r24
     5f0:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <sense+0x30>
     5f4:	b4 e0       	ldi	r27, 0x04	; 4
     5f6:	eb 9f       	mul	r30, r27
     5f8:	f0 01       	movw	r30, r0
     5fa:	11 24       	eor	r1, r1
     5fc:	e1 58       	subi	r30, 0x81	; 129
     5fe:	fd 4f       	sbci	r31, 0xFD	; 253
     600:	d3 01       	movw	r26, r6
     602:	c2 01       	movw	r24, r4
     604:	a3 70       	andi	r26, 0x03	; 3
     606:	bb 27       	eor	r27, r27
     608:	80 83       	st	Z, r24
     60a:	91 83       	std	Z+1, r25	; 0x01
     60c:	a2 83       	std	Z+2, r26	; 0x02
     60e:	b3 83       	std	Z+3, r27	; 0x03
     610:	2b 81       	ldd	r18, Y+3	; 0x03
     612:	3d ef       	ldi	r19, 0xFD	; 253
     614:	32 03       	mulsu	r19, r18
     616:	c0 01       	movw	r24, r0
     618:	11 24       	eor	r1, r1
     61a:	c8 0e       	add	r12, r24
     61c:	d9 1e       	adc	r13, r25
     61e:	5e cf       	rjmp	.-324    	; 0x4dc <_ZN8MAX301055checkEv+0xc0>
     620:	00 e0       	ldi	r16, 0x00	; 0
     622:	10 e0       	ldi	r17, 0x00	; 0
     624:	c8 01       	movw	r24, r16
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	1f 91       	pop	r17
     62c:	0f 91       	pop	r16
     62e:	ff 90       	pop	r15
     630:	ef 90       	pop	r14
     632:	df 90       	pop	r13
     634:	cf 90       	pop	r12
     636:	bf 90       	pop	r11
     638:	af 90       	pop	r10
     63a:	7f 90       	pop	r7
     63c:	6f 90       	pop	r6
     63e:	5f 90       	pop	r5
     640:	4f 90       	pop	r4
     642:	08 95       	ret

00000644 <_ZN8MAX301059safeCheckEh>:
     644:	8f 92       	push	r8
     646:	9f 92       	push	r9
     648:	af 92       	push	r10
     64a:	bf 92       	push	r11
     64c:	cf 92       	push	r12
     64e:	df 92       	push	r13
     650:	ef 92       	push	r14
     652:	ff 92       	push	r15
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	ec 01       	movw	r28, r24
     65a:	c6 2e       	mov	r12, r22
     65c:	0e 94 77 0d 	call	0x1aee	; 0x1aee <millis>
     660:	4b 01       	movw	r8, r22
     662:	5c 01       	movw	r10, r24
     664:	d1 2c       	mov	r13, r1
     666:	e1 2c       	mov	r14, r1
     668:	f1 2c       	mov	r15, r1
     66a:	0e 94 77 0d 	call	0x1aee	; 0x1aee <millis>
     66e:	dc 01       	movw	r26, r24
     670:	cb 01       	movw	r24, r22
     672:	88 19       	sub	r24, r8
     674:	99 09       	sbc	r25, r9
     676:	aa 09       	sbc	r26, r10
     678:	bb 09       	sbc	r27, r11
     67a:	c8 16       	cp	r12, r24
     67c:	d9 06       	cpc	r13, r25
     67e:	ea 06       	cpc	r14, r26
     680:	fb 06       	cpc	r15, r27
     682:	60 f0       	brcs	.+24     	; 0x69c <_ZN8MAX301059safeCheckEh+0x58>
     684:	ce 01       	movw	r24, r28
     686:	0e 94 0e 02 	call	0x41c	; 0x41c <_ZN8MAX301055checkEv>
     68a:	01 97       	sbiw	r24, 0x01	; 1
     68c:	49 f0       	breq	.+18     	; 0x6a0 <_ZN8MAX301059safeCheckEh+0x5c>
     68e:	61 e0       	ldi	r22, 0x01	; 1
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <delay>
     69a:	e7 cf       	rjmp	.-50     	; 0x66a <_ZN8MAX301059safeCheckEh+0x26>
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	01 c0       	rjmp	.+2      	; 0x6a2 <_ZN8MAX301059safeCheckEh+0x5e>
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	ff 90       	pop	r15
     6a8:	ef 90       	pop	r14
     6aa:	df 90       	pop	r13
     6ac:	cf 90       	pop	r12
     6ae:	bf 90       	pop	r11
     6b0:	af 90       	pop	r10
     6b2:	9f 90       	pop	r9
     6b4:	8f 90       	pop	r8
     6b6:	08 95       	ret

000006b8 <_ZN8MAX301055getIREv>:
     6b8:	6a ef       	ldi	r22, 0xFA	; 250
     6ba:	0e 94 22 03 	call	0x644	; 0x644 <_ZN8MAX301059safeCheckEh>
     6be:	88 23       	and	r24, r24
     6c0:	69 f0       	breq	.+26     	; 0x6dc <_ZN8MAX301055getIREv+0x24>
     6c2:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <sense+0x30>
     6c6:	84 e0       	ldi	r24, 0x04	; 4
     6c8:	e8 9f       	mul	r30, r24
     6ca:	f0 01       	movw	r30, r0
     6cc:	11 24       	eor	r1, r1
     6ce:	e1 59       	subi	r30, 0x91	; 145
     6d0:	fd 4f       	sbci	r31, 0xFD	; 253
     6d2:	60 81       	ld	r22, Z
     6d4:	71 81       	ldd	r23, Z+1	; 0x01
     6d6:	82 81       	ldd	r24, Z+2	; 0x02
     6d8:	93 81       	ldd	r25, Z+3	; 0x03
     6da:	08 95       	ret
     6dc:	60 e0       	ldi	r22, 0x00	; 0
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	cb 01       	movw	r24, r22
     6e2:	08 95       	ret

000006e4 <_ZN8MAX3010510readPartIDEv>:
     6e4:	4f ef       	ldi	r20, 0xFF	; 255
     6e6:	fc 01       	movw	r30, r24
     6e8:	62 81       	ldd	r22, Z+2	; 0x02
     6ea:	0c 94 b6 01 	jmp	0x36c	; 0x36c <_ZN8MAX3010513readRegister8Ehh>

000006ee <_ZN8MAX3010514readRevisionIDEv>:
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
     6f4:	4e ef       	ldi	r20, 0xFE	; 254
     6f6:	6a 81       	ldd	r22, Y+2	; 0x02
     6f8:	0e 94 b6 01 	call	0x36c	; 0x36c <_ZN8MAX3010513readRegister8Ehh>
     6fc:	8c 83       	std	Y+4, r24	; 0x04
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	08 95       	ret

00000704 <_ZN8MAX301055beginER7TwoWiremh>:
     704:	cf 92       	push	r12
     706:	df 92       	push	r13
     708:	ef 92       	push	r14
     70a:	ff 92       	push	r15
     70c:	0f 93       	push	r16
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	ec 01       	movw	r28, r24
     714:	cb 01       	movw	r24, r22
     716:	69 01       	movw	r12, r18
     718:	7a 01       	movw	r14, r20
     71a:	79 83       	std	Y+1, r23	; 0x01
     71c:	68 83       	st	Y, r22
     71e:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <_ZN7TwoWire5beginEv>
     722:	b7 01       	movw	r22, r14
     724:	a6 01       	movw	r20, r12
     726:	88 81       	ld	r24, Y
     728:	99 81       	ldd	r25, Y+1	; 0x01
     72a:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <_ZN7TwoWire8setClockEm>
     72e:	0a 83       	std	Y+2, r16	; 0x02
     730:	ce 01       	movw	r24, r28
     732:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN8MAX3010510readPartIDEv>
     736:	ce 01       	movw	r24, r28
     738:	0e 94 77 03 	call	0x6ee	; 0x6ee <_ZN8MAX3010514readRevisionIDEv>
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	df 91       	pop	r29
     740:	cf 91       	pop	r28
     742:	0f 91       	pop	r16
     744:	ff 90       	pop	r15
     746:	ef 90       	pop	r14
     748:	df 90       	pop	r13
     74a:	cf 90       	pop	r12
     74c:	08 95       	ret

0000074e <_ZN8MAX3010514writeRegister8Ehhh>:
     74e:	0f 93       	push	r16
     750:	1f 93       	push	r17
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	ec 01       	movw	r28, r24
     758:	04 2f       	mov	r16, r20
     75a:	12 2f       	mov	r17, r18
     75c:	88 81       	ld	r24, Y
     75e:	99 81       	ldd	r25, Y+1	; 0x01
     760:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <_ZN7TwoWire17beginTransmissionEh>
     764:	88 81       	ld	r24, Y
     766:	99 81       	ldd	r25, Y+1	; 0x01
     768:	dc 01       	movw	r26, r24
     76a:	ed 91       	ld	r30, X+
     76c:	fc 91       	ld	r31, X
     76e:	01 90       	ld	r0, Z+
     770:	f0 81       	ld	r31, Z
     772:	e0 2d       	mov	r30, r0
     774:	60 2f       	mov	r22, r16
     776:	09 95       	icall
     778:	88 81       	ld	r24, Y
     77a:	99 81       	ldd	r25, Y+1	; 0x01
     77c:	dc 01       	movw	r26, r24
     77e:	ed 91       	ld	r30, X+
     780:	fc 91       	ld	r31, X
     782:	01 90       	ld	r0, Z+
     784:	f0 81       	ld	r31, Z
     786:	e0 2d       	mov	r30, r0
     788:	61 2f       	mov	r22, r17
     78a:	09 95       	icall
     78c:	88 81       	ld	r24, Y
     78e:	99 81       	ldd	r25, Y+1	; 0x01
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	1f 91       	pop	r17
     796:	0f 91       	pop	r16
     798:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <_ZN7TwoWire15endTransmissionEv>

0000079c <_ZN8MAX3010520setPulseAmplitudeRedEh>:
     79c:	26 2f       	mov	r18, r22
     79e:	4c e0       	ldi	r20, 0x0C	; 12
     7a0:	fc 01       	movw	r30, r24
     7a2:	62 81       	ldd	r22, Z+2	; 0x02
     7a4:	0c 94 a7 03 	jmp	0x74e	; 0x74e <_ZN8MAX3010514writeRegister8Ehhh>

000007a8 <_ZN8MAX3010519setPulseAmplitudeIREh>:
     7a8:	26 2f       	mov	r18, r22
     7aa:	4d e0       	ldi	r20, 0x0D	; 13
     7ac:	fc 01       	movw	r30, r24
     7ae:	62 81       	ldd	r22, Z+2	; 0x02
     7b0:	0c 94 a7 03 	jmp	0x74e	; 0x74e <_ZN8MAX3010514writeRegister8Ehhh>

000007b4 <_ZN8MAX3010522setPulseAmplitudeGreenEh>:
     7b4:	26 2f       	mov	r18, r22
     7b6:	4e e0       	ldi	r20, 0x0E	; 14
     7b8:	fc 01       	movw	r30, r24
     7ba:	62 81       	ldd	r22, Z+2	; 0x02
     7bc:	0c 94 a7 03 	jmp	0x74e	; 0x74e <_ZN8MAX3010514writeRegister8Ehhh>

000007c0 <_ZN8MAX3010526setPulseAmplitudeProximityEh>:
     7c0:	26 2f       	mov	r18, r22
     7c2:	40 e1       	ldi	r20, 0x10	; 16
     7c4:	fc 01       	movw	r30, r24
     7c6:	62 81       	ldd	r22, Z+2	; 0x02
     7c8:	0c 94 a7 03 	jmp	0x74e	; 0x74e <_ZN8MAX3010514writeRegister8Ehhh>

000007cc <_ZN8MAX301059clearFIFOEv>:
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	ec 01       	movw	r28, r24
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	44 e0       	ldi	r20, 0x04	; 4
     7d6:	6a 81       	ldd	r22, Y+2	; 0x02
     7d8:	0e 94 a7 03 	call	0x74e	; 0x74e <_ZN8MAX3010514writeRegister8Ehhh>
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	45 e0       	ldi	r20, 0x05	; 5
     7e0:	6a 81       	ldd	r22, Y+2	; 0x02
     7e2:	ce 01       	movw	r24, r28
     7e4:	0e 94 a7 03 	call	0x74e	; 0x74e <_ZN8MAX3010514writeRegister8Ehhh>
     7e8:	20 e0       	ldi	r18, 0x00	; 0
     7ea:	46 e0       	ldi	r20, 0x06	; 6
     7ec:	6a 81       	ldd	r22, Y+2	; 0x02
     7ee:	ce 01       	movw	r24, r28
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	0c 94 a7 03 	jmp	0x74e	; 0x74e <_ZN8MAX3010514writeRegister8Ehhh>

000007f8 <_ZN8MAX301057bitMaskEhhh>:
     7f8:	ff 92       	push	r15
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	ec 01       	movw	r28, r24
     804:	f6 2e       	mov	r15, r22
     806:	04 2f       	mov	r16, r20
     808:	12 2f       	mov	r17, r18
     80a:	46 2f       	mov	r20, r22
     80c:	6a 81       	ldd	r22, Y+2	; 0x02
     80e:	0e 94 b6 01 	call	0x36c	; 0x36c <_ZN8MAX3010513readRegister8Ehh>
     812:	80 23       	and	r24, r16
     814:	28 2f       	mov	r18, r24
     816:	21 2b       	or	r18, r17
     818:	4f 2d       	mov	r20, r15
     81a:	6a 81       	ldd	r22, Y+2	; 0x02
     81c:	ce 01       	movw	r24, r28
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	1f 91       	pop	r17
     824:	0f 91       	pop	r16
     826:	ff 90       	pop	r15
     828:	0c 94 a7 03 	jmp	0x74e	; 0x74e <_ZN8MAX3010514writeRegister8Ehhh>

0000082c <_ZN8MAX301059softResetEv>:
     82c:	cf 92       	push	r12
     82e:	df 92       	push	r13
     830:	ef 92       	push	r14
     832:	ff 92       	push	r15
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
     838:	ec 01       	movw	r28, r24
     83a:	20 e4       	ldi	r18, 0x40	; 64
     83c:	4f eb       	ldi	r20, 0xBF	; 191
     83e:	69 e0       	ldi	r22, 0x09	; 9
     840:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <_ZN8MAX301057bitMaskEhhh>
     844:	0e 94 77 0d 	call	0x1aee	; 0x1aee <millis>
     848:	6b 01       	movw	r12, r22
     84a:	7c 01       	movw	r14, r24
     84c:	0e 94 77 0d 	call	0x1aee	; 0x1aee <millis>
     850:	dc 01       	movw	r26, r24
     852:	cb 01       	movw	r24, r22
     854:	8c 19       	sub	r24, r12
     856:	9d 09       	sbc	r25, r13
     858:	ae 09       	sbc	r26, r14
     85a:	bf 09       	sbc	r27, r15
     85c:	84 36       	cpi	r24, 0x64	; 100
     85e:	91 05       	cpc	r25, r1
     860:	a1 05       	cpc	r26, r1
     862:	b1 05       	cpc	r27, r1
     864:	70 f4       	brcc	.+28     	; 0x882 <_ZN8MAX301059softResetEv+0x56>
     866:	49 e0       	ldi	r20, 0x09	; 9
     868:	6a 81       	ldd	r22, Y+2	; 0x02
     86a:	ce 01       	movw	r24, r28
     86c:	0e 94 b6 01 	call	0x36c	; 0x36c <_ZN8MAX3010513readRegister8Ehh>
     870:	86 ff       	sbrs	r24, 6
     872:	07 c0       	rjmp	.+14     	; 0x882 <_ZN8MAX301059softResetEv+0x56>
     874:	61 e0       	ldi	r22, 0x01	; 1
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <delay>
     880:	e5 cf       	rjmp	.-54     	; 0x84c <_ZN8MAX301059softResetEv+0x20>
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	ff 90       	pop	r15
     888:	ef 90       	pop	r14
     88a:	df 90       	pop	r13
     88c:	cf 90       	pop	r12
     88e:	08 95       	ret

00000890 <_ZN8MAX3010510setLEDModeEh>:
     890:	26 2f       	mov	r18, r22
     892:	48 ef       	ldi	r20, 0xF8	; 248
     894:	69 e0       	ldi	r22, 0x09	; 9
     896:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <_ZN8MAX301057bitMaskEhhh>

0000089a <_ZN8MAX3010511setADCRangeEh>:
     89a:	26 2f       	mov	r18, r22
     89c:	4f e9       	ldi	r20, 0x9F	; 159
     89e:	6a e0       	ldi	r22, 0x0A	; 10
     8a0:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <_ZN8MAX301057bitMaskEhhh>

000008a4 <_ZN8MAX3010513setSampleRateEh>:
     8a4:	26 2f       	mov	r18, r22
     8a6:	43 ee       	ldi	r20, 0xE3	; 227
     8a8:	6a e0       	ldi	r22, 0x0A	; 10
     8aa:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <_ZN8MAX301057bitMaskEhhh>

000008ae <_ZN8MAX3010513setPulseWidthEh>:
     8ae:	26 2f       	mov	r18, r22
     8b0:	4c ef       	ldi	r20, 0xFC	; 252
     8b2:	6a e0       	ldi	r22, 0x0A	; 10
     8b4:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <_ZN8MAX301057bitMaskEhhh>

000008b8 <_ZN8MAX3010514setFIFOAverageEh>:
     8b8:	26 2f       	mov	r18, r22
     8ba:	4f e1       	ldi	r20, 0x1F	; 31
     8bc:	68 e0       	ldi	r22, 0x08	; 8
     8be:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <_ZN8MAX301057bitMaskEhhh>

000008c2 <_ZN8MAX3010518enableFIFORolloverEv>:
     8c2:	20 e1       	ldi	r18, 0x10	; 16
     8c4:	4f ee       	ldi	r20, 0xEF	; 239
     8c6:	68 e0       	ldi	r22, 0x08	; 8
     8c8:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <_ZN8MAX301057bitMaskEhhh>

000008cc <_ZN8MAX3010510enableSlotEhh>:

//Given a slot number assign a thing to it
//Devices are SLOT_RED_LED or SLOT_RED_PILOT (proximity)
//Assigning a SLOT_RED_LED will pulse LED
//Assigning a SLOT_RED_PILOT will ??
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {
     8cc:	24 2f       	mov	r18, r20

  uint8_t originalContents;

  switch (slotNumber) {
     8ce:	62 30       	cpi	r22, 0x02	; 2
     8d0:	59 f0       	breq	.+22     	; 0x8e8 <_ZN8MAX3010510enableSlotEhh+0x1c>
     8d2:	18 f4       	brcc	.+6      	; 0x8da <_ZN8MAX3010510enableSlotEhh+0xe>
     8d4:	61 30       	cpi	r22, 0x01	; 1
     8d6:	31 f0       	breq	.+12     	; 0x8e4 <_ZN8MAX3010510enableSlotEhh+0x18>
     8d8:	08 95       	ret
     8da:	63 30       	cpi	r22, 0x03	; 3
     8dc:	51 f0       	breq	.+20     	; 0x8f2 <_ZN8MAX3010510enableSlotEhh+0x26>
     8de:	64 30       	cpi	r22, 0x04	; 4
     8e0:	51 f0       	breq	.+20     	; 0x8f6 <_ZN8MAX3010510enableSlotEhh+0x2a>
     8e2:	08 95       	ret
    case (1):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
     8e4:	48 ef       	ldi	r20, 0xF8	; 248
     8e6:	03 c0       	rjmp	.+6      	; 0x8ee <_ZN8MAX3010510enableSlotEhh+0x22>
      break;
    case (2):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
     8e8:	22 95       	swap	r18
     8ea:	20 7f       	andi	r18, 0xF0	; 240
     8ec:	4f e8       	ldi	r20, 0x8F	; 143
     8ee:	61 e1       	ldi	r22, 0x11	; 17
     8f0:	06 c0       	rjmp	.+12     	; 0x8fe <_ZN8MAX3010510enableSlotEhh+0x32>
      break;
    case (3):
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device);
     8f2:	48 ef       	ldi	r20, 0xF8	; 248
     8f4:	03 c0       	rjmp	.+6      	; 0x8fc <_ZN8MAX3010510enableSlotEhh+0x30>
      break;
    case (4):
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
     8f6:	22 95       	swap	r18
     8f8:	20 7f       	andi	r18, 0xF0	; 240
     8fa:	4f e8       	ldi	r20, 0x8F	; 143
     8fc:	62 e1       	ldi	r22, 0x12	; 18
     8fe:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <_ZN8MAX301057bitMaskEhhh>

00000902 <_ZN8MAX301055setupEhhhiii>:
// Sample Average = 4
// Mode = MultiLED
// ADC Range = 16384 (62.5pA per LSB)
// Sample rate = 50
//Use the default setup if you are just getting started with the MAX30105 sensor
void MAX30105::setup(byte powerLevel, byte sampleAverage, byte ledMode, int sampleRate, int pulseWidth, int adcRange) {
     902:	9f 92       	push	r9
     904:	af 92       	push	r10
     906:	bf 92       	push	r11
     908:	cf 92       	push	r12
     90a:	df 92       	push	r13
     90c:	ef 92       	push	r14
     90e:	ff 92       	push	r15
     910:	0f 93       	push	r16
     912:	1f 93       	push	r17
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	ec 01       	movw	r28, r24
     91a:	96 2e       	mov	r9, r22
     91c:	b4 2e       	mov	r11, r20
     91e:	a2 2e       	mov	r10, r18
  softReset(); //Reset all configuration, threshold, and data registers to POR values
     920:	0e 94 16 04 	call	0x82c	; 0x82c <_ZN8MAX301059softResetEv>

  //FIFO Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  //The chip will average multiple samples of same type together if you wish
  if (sampleAverage == 1) setFIFOAverage(MAX30105_SAMPLEAVG_1); //No averaging per FIFO record
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	b8 12       	cpse	r11, r24
     928:	02 c0       	rjmp	.+4      	; 0x92e <_ZN8MAX301055setupEhhhiii+0x2c>
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	18 c0       	rjmp	.+48     	; 0x95e <_ZN8MAX301055setupEhhhiii+0x5c>
  else if (sampleAverage == 2) setFIFOAverage(MAX30105_SAMPLEAVG_2);
     92e:	82 e0       	ldi	r24, 0x02	; 2
     930:	b8 12       	cpse	r11, r24
     932:	02 c0       	rjmp	.+4      	; 0x938 <_ZN8MAX301055setupEhhhiii+0x36>
     934:	60 e2       	ldi	r22, 0x20	; 32
     936:	13 c0       	rjmp	.+38     	; 0x95e <_ZN8MAX301055setupEhhhiii+0x5c>
  else if (sampleAverage == 4) setFIFOAverage(MAX30105_SAMPLEAVG_4);
     938:	84 e0       	ldi	r24, 0x04	; 4
     93a:	b8 12       	cpse	r11, r24
     93c:	02 c0       	rjmp	.+4      	; 0x942 <_ZN8MAX301055setupEhhhiii+0x40>
     93e:	60 e4       	ldi	r22, 0x40	; 64
     940:	0e c0       	rjmp	.+28     	; 0x95e <_ZN8MAX301055setupEhhhiii+0x5c>
  else if (sampleAverage == 8) setFIFOAverage(MAX30105_SAMPLEAVG_8);
     942:	88 e0       	ldi	r24, 0x08	; 8
     944:	b8 12       	cpse	r11, r24
     946:	02 c0       	rjmp	.+4      	; 0x94c <_ZN8MAX301055setupEhhhiii+0x4a>
     948:	60 e6       	ldi	r22, 0x60	; 96
     94a:	09 c0       	rjmp	.+18     	; 0x95e <_ZN8MAX301055setupEhhhiii+0x5c>
  else if (sampleAverage == 16) setFIFOAverage(MAX30105_SAMPLEAVG_16);
     94c:	80 e1       	ldi	r24, 0x10	; 16
     94e:	b8 12       	cpse	r11, r24
     950:	02 c0       	rjmp	.+4      	; 0x956 <_ZN8MAX301055setupEhhhiii+0x54>
     952:	60 e8       	ldi	r22, 0x80	; 128
     954:	04 c0       	rjmp	.+8      	; 0x95e <_ZN8MAX301055setupEhhhiii+0x5c>
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
     956:	80 e2       	ldi	r24, 0x20	; 32
     958:	b8 12       	cpse	r11, r24
     95a:	f1 cf       	rjmp	.-30     	; 0x93e <_ZN8MAX301055setupEhhhiii+0x3c>
     95c:	60 ea       	ldi	r22, 0xA0	; 160
     95e:	ce 01       	movw	r24, r28
     960:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <_ZN8MAX3010514setFIFOAverageEh>
  else setFIFOAverage(MAX30105_SAMPLEAVG_4);

  //setFIFOAlmostFull(2); //Set to 30 samples to trigger an 'Almost Full' interrupt
  enableFIFORollover(); //Allow FIFO to wrap/roll over
     964:	ce 01       	movw	r24, r28
     966:	0e 94 61 04 	call	0x8c2	; 0x8c2 <_ZN8MAX3010518enableFIFORolloverEv>
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Mode Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
     96a:	83 e0       	ldi	r24, 0x03	; 3
     96c:	a8 12       	cpse	r10, r24
     96e:	02 c0       	rjmp	.+4      	; 0x974 <_ZN8MAX301055setupEhhhiii+0x72>
     970:	67 e0       	ldi	r22, 0x07	; 7
     972:	06 c0       	rjmp	.+12     	; 0x980 <_ZN8MAX301055setupEhhhiii+0x7e>
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
     974:	82 e0       	ldi	r24, 0x02	; 2
     976:	a8 12       	cpse	r10, r24
     978:	02 c0       	rjmp	.+4      	; 0x97e <_ZN8MAX301055setupEhhhiii+0x7c>
     97a:	63 e0       	ldi	r22, 0x03	; 3
     97c:	01 c0       	rjmp	.+2      	; 0x980 <_ZN8MAX301055setupEhhhiii+0x7e>
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
     97e:	62 e0       	ldi	r22, 0x02	; 2
     980:	ce 01       	movw	r24, r28
     982:	0e 94 48 04 	call	0x890	; 0x890 <_ZN8MAX3010510setLEDModeEh>
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
     986:	ab 82       	std	Y+3, r10	; 0x03
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Particle Sensing Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
     988:	c1 14       	cp	r12, r1
     98a:	80 e1       	ldi	r24, 0x10	; 16
     98c:	d8 06       	cpc	r13, r24
     98e:	14 f4       	brge	.+4      	; 0x994 <_ZN8MAX301055setupEhhhiii+0x92>
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	11 c0       	rjmp	.+34     	; 0x9b6 <_ZN8MAX301055setupEhhhiii+0xb4>
  else if(adcRange < 8192) setADCRange(MAX30105_ADCRANGE_4096); //15.63pA per LSB
     994:	c1 14       	cp	r12, r1
     996:	80 e2       	ldi	r24, 0x20	; 32
     998:	d8 06       	cpc	r13, r24
     99a:	14 f4       	brge	.+4      	; 0x9a0 <_ZN8MAX301055setupEhhhiii+0x9e>
     99c:	60 e2       	ldi	r22, 0x20	; 32
     99e:	0b c0       	rjmp	.+22     	; 0x9b6 <_ZN8MAX301055setupEhhhiii+0xb4>
  else if(adcRange < 16384) setADCRange(MAX30105_ADCRANGE_8192); //31.25pA per LSB
     9a0:	c1 14       	cp	r12, r1
     9a2:	80 e4       	ldi	r24, 0x40	; 64
     9a4:	d8 06       	cpc	r13, r24
     9a6:	14 f4       	brge	.+4      	; 0x9ac <_ZN8MAX301055setupEhhhiii+0xaa>
     9a8:	60 e4       	ldi	r22, 0x40	; 64
     9aa:	05 c0       	rjmp	.+10     	; 0x9b6 <_ZN8MAX301055setupEhhhiii+0xb4>
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
     9ac:	c1 14       	cp	r12, r1
     9ae:	80 e4       	ldi	r24, 0x40	; 64
     9b0:	d8 06       	cpc	r13, r24
     9b2:	71 f7       	brne	.-36     	; 0x990 <_ZN8MAX301055setupEhhhiii+0x8e>
     9b4:	60 e6       	ldi	r22, 0x60	; 96
     9b6:	ce 01       	movw	r24, r28
     9b8:	0e 94 4d 04 	call	0x89a	; 0x89a <_ZN8MAX3010511setADCRangeEh>
  else setADCRange(MAX30105_ADCRANGE_2048);

  if (sampleRate < 100) setSampleRate(MAX30105_SAMPLERATE_50); //Take 50 samples per second
     9bc:	04 36       	cpi	r16, 0x64	; 100
     9be:	11 05       	cpc	r17, r1
     9c0:	14 f4       	brge	.+4      	; 0x9c6 <_ZN8MAX301055setupEhhhiii+0xc4>
     9c2:	60 e0       	ldi	r22, 0x00	; 0
     9c4:	27 c0       	rjmp	.+78     	; 0xa14 <_ZN8MAX301055setupEhhhiii+0x112>
  else if (sampleRate < 200) setSampleRate(MAX30105_SAMPLERATE_100);
     9c6:	08 3c       	cpi	r16, 0xC8	; 200
     9c8:	11 05       	cpc	r17, r1
     9ca:	14 f4       	brge	.+4      	; 0x9d0 <_ZN8MAX301055setupEhhhiii+0xce>
     9cc:	64 e0       	ldi	r22, 0x04	; 4
     9ce:	22 c0       	rjmp	.+68     	; 0xa14 <_ZN8MAX301055setupEhhhiii+0x112>
  else if (sampleRate < 400) setSampleRate(MAX30105_SAMPLERATE_200);
     9d0:	00 39       	cpi	r16, 0x90	; 144
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	18 07       	cpc	r17, r24
     9d6:	14 f4       	brge	.+4      	; 0x9dc <_ZN8MAX301055setupEhhhiii+0xda>
     9d8:	68 e0       	ldi	r22, 0x08	; 8
     9da:	1c c0       	rjmp	.+56     	; 0xa14 <_ZN8MAX301055setupEhhhiii+0x112>
  else if (sampleRate < 800) setSampleRate(MAX30105_SAMPLERATE_400);
     9dc:	00 32       	cpi	r16, 0x20	; 32
     9de:	83 e0       	ldi	r24, 0x03	; 3
     9e0:	18 07       	cpc	r17, r24
     9e2:	14 f4       	brge	.+4      	; 0x9e8 <_ZN8MAX301055setupEhhhiii+0xe6>
     9e4:	6c e0       	ldi	r22, 0x0C	; 12
     9e6:	16 c0       	rjmp	.+44     	; 0xa14 <_ZN8MAX301055setupEhhhiii+0x112>
  else if (sampleRate < 1000) setSampleRate(MAX30105_SAMPLERATE_800);
     9e8:	08 3e       	cpi	r16, 0xE8	; 232
     9ea:	83 e0       	ldi	r24, 0x03	; 3
     9ec:	18 07       	cpc	r17, r24
     9ee:	14 f4       	brge	.+4      	; 0x9f4 <_ZN8MAX301055setupEhhhiii+0xf2>
     9f0:	60 e1       	ldi	r22, 0x10	; 16
     9f2:	10 c0       	rjmp	.+32     	; 0xa14 <_ZN8MAX301055setupEhhhiii+0x112>
  else if (sampleRate < 1600) setSampleRate(MAX30105_SAMPLERATE_1000);
     9f4:	00 34       	cpi	r16, 0x40	; 64
     9f6:	86 e0       	ldi	r24, 0x06	; 6
     9f8:	18 07       	cpc	r17, r24
     9fa:	14 f4       	brge	.+4      	; 0xa00 <_ZN8MAX301055setupEhhhiii+0xfe>
     9fc:	64 e1       	ldi	r22, 0x14	; 20
     9fe:	0a c0       	rjmp	.+20     	; 0xa14 <_ZN8MAX301055setupEhhhiii+0x112>
  else if (sampleRate < 3200) setSampleRate(MAX30105_SAMPLERATE_1600);
     a00:	00 38       	cpi	r16, 0x80	; 128
     a02:	8c e0       	ldi	r24, 0x0C	; 12
     a04:	18 07       	cpc	r17, r24
     a06:	14 f4       	brge	.+4      	; 0xa0c <_ZN8MAX301055setupEhhhiii+0x10a>
     a08:	68 e1       	ldi	r22, 0x18	; 24
     a0a:	04 c0       	rjmp	.+8      	; 0xa14 <_ZN8MAX301055setupEhhhiii+0x112>
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
     a0c:	00 38       	cpi	r16, 0x80	; 128
     a0e:	1c 40       	sbci	r17, 0x0C	; 12
     a10:	c1 f6       	brne	.-80     	; 0x9c2 <_ZN8MAX301055setupEhhhiii+0xc0>
     a12:	6c e1       	ldi	r22, 0x1C	; 28
     a14:	ce 01       	movw	r24, r28
     a16:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN8MAX3010513setSampleRateEh>
  else setSampleRate(MAX30105_SAMPLERATE_50);

  //The longer the pulse width the longer range of detection you'll have
  //At 69us and 0.4mA it's about 2 inches
  //At 411us and 0.4mA it's about 6 inches
  if (pulseWidth < 118) setPulseWidth(MAX30105_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution
     a1a:	86 e7       	ldi	r24, 0x76	; 118
     a1c:	e8 16       	cp	r14, r24
     a1e:	f1 04       	cpc	r15, r1
     a20:	14 f4       	brge	.+4      	; 0xa26 <_ZN8MAX301055setupEhhhiii+0x124>
     a22:	60 e0       	ldi	r22, 0x00	; 0
     a24:	13 c0       	rjmp	.+38     	; 0xa4c <_ZN8MAX301055setupEhhhiii+0x14a>
  else if (pulseWidth < 215) setPulseWidth(MAX30105_PULSEWIDTH_118); //16 bit resolution
     a26:	87 ed       	ldi	r24, 0xD7	; 215
     a28:	e8 16       	cp	r14, r24
     a2a:	f1 04       	cpc	r15, r1
     a2c:	14 f4       	brge	.+4      	; 0xa32 <_ZN8MAX301055setupEhhhiii+0x130>
     a2e:	61 e0       	ldi	r22, 0x01	; 1
     a30:	0d c0       	rjmp	.+26     	; 0xa4c <_ZN8MAX301055setupEhhhiii+0x14a>
  else if (pulseWidth < 411) setPulseWidth(MAX30105_PULSEWIDTH_215); //17 bit resolution
     a32:	8b e9       	ldi	r24, 0x9B	; 155
     a34:	e8 16       	cp	r14, r24
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	f8 06       	cpc	r15, r24
     a3a:	14 f4       	brge	.+4      	; 0xa40 <_ZN8MAX301055setupEhhhiii+0x13e>
     a3c:	62 e0       	ldi	r22, 0x02	; 2
     a3e:	06 c0       	rjmp	.+12     	; 0xa4c <_ZN8MAX301055setupEhhhiii+0x14a>
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
     a40:	8b e9       	ldi	r24, 0x9B	; 155
     a42:	e8 16       	cp	r14, r24
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	f8 06       	cpc	r15, r24
     a48:	61 f7       	brne	.-40     	; 0xa22 <_ZN8MAX301055setupEhhhiii+0x120>
     a4a:	63 e0       	ldi	r22, 0x03	; 3
     a4c:	ce 01       	movw	r24, r28
     a4e:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN8MAX3010513setPulseWidthEh>
  //powerLevel = 0x02, 0.4mA - Presence detection of ~4 inch
  //powerLevel = 0x1F, 6.4mA - Presence detection of ~8 inch
  //powerLevel = 0x7F, 25.4mA - Presence detection of ~8 inch
  //powerLevel = 0xFF, 50.0mA - Presence detection of ~12 inch

  setPulseAmplitudeRed(powerLevel);
     a52:	69 2d       	mov	r22, r9
     a54:	ce 01       	movw	r24, r28
     a56:	0e 94 ce 03 	call	0x79c	; 0x79c <_ZN8MAX3010520setPulseAmplitudeRedEh>
  setPulseAmplitudeIR(powerLevel);
     a5a:	69 2d       	mov	r22, r9
     a5c:	ce 01       	movw	r24, r28
     a5e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <_ZN8MAX3010519setPulseAmplitudeIREh>
  setPulseAmplitudeGreen(powerLevel);
     a62:	69 2d       	mov	r22, r9
     a64:	ce 01       	movw	r24, r28
     a66:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_ZN8MAX3010522setPulseAmplitudeGreenEh>
  setPulseAmplitudeProximity(powerLevel);
     a6a:	69 2d       	mov	r22, r9
     a6c:	ce 01       	movw	r24, r28
     a6e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <_ZN8MAX3010526setPulseAmplitudeProximityEh>
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Multi-LED Mode Configuration, Enable the reading of the three LEDs
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  enableSlot(1, SLOT_RED_LED);
     a72:	41 e0       	ldi	r20, 0x01	; 1
     a74:	61 e0       	ldi	r22, 0x01	; 1
     a76:	ce 01       	movw	r24, r28
     a78:	0e 94 66 04 	call	0x8cc	; 0x8cc <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	8a 15       	cp	r24, r10
     a80:	70 f4       	brcc	.+28     	; 0xa9e <_ZN8MAX301055setupEhhhiii+0x19c>
  switch (slotNumber) {
    case (1):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
      break;
    case (2):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
     a82:	20 e2       	ldi	r18, 0x20	; 32
     a84:	4f e8       	ldi	r20, 0x8F	; 143
     a86:	61 e1       	ldi	r22, 0x11	; 17
     a88:	ce 01       	movw	r24, r28
     a8a:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <_ZN8MAX301057bitMaskEhhh>

  //Multi-LED Mode Configuration, Enable the reading of the three LEDs
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  enableSlot(1, SLOT_RED_LED);
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
  if (ledMode > 2) enableSlot(3, SLOT_GREEN_LED);
     a8e:	82 e0       	ldi	r24, 0x02	; 2
     a90:	a8 16       	cp	r10, r24
     a92:	29 f0       	breq	.+10     	; 0xa9e <_ZN8MAX301055setupEhhhiii+0x19c>
     a94:	43 e0       	ldi	r20, 0x03	; 3
     a96:	63 e0       	ldi	r22, 0x03	; 3
     a98:	ce 01       	movw	r24, r28
     a9a:	0e 94 66 04 	call	0x8cc	; 0x8cc <_ZN8MAX3010510enableSlotEhh>
  //enableSlot(1, SLOT_RED_PILOT);
  //enableSlot(2, SLOT_IR_PILOT);
  //enableSlot(3, SLOT_GREEN_PILOT);
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  clearFIFO(); //Reset the FIFO before we begin checking the sensor
     a9e:	ce 01       	movw	r24, r28
}
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	1f 91       	pop	r17
     aa6:	0f 91       	pop	r16
     aa8:	ff 90       	pop	r15
     aaa:	ef 90       	pop	r14
     aac:	df 90       	pop	r13
     aae:	cf 90       	pop	r12
     ab0:	bf 90       	pop	r11
     ab2:	af 90       	pop	r10
     ab4:	9f 90       	pop	r9
  //enableSlot(1, SLOT_RED_PILOT);
  //enableSlot(2, SLOT_IR_PILOT);
  //enableSlot(3, SLOT_GREEN_PILOT);
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  clearFIFO(); //Reset the FIFO before we begin checking the sensor
     ab6:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <_ZN8MAX301059clearFIFOEv>

00000aba <setup>:
	dcFilter_t filtered;
	filtered.w = x + alpha* prev_w;
	filtered.result = filtered.w - prev_w;

	return filtered;
}
     aba:	cf 92       	push	r12
     abc:	df 92       	push	r13
     abe:	ef 92       	push	r14
     ac0:	ff 92       	push	r15
     ac2:	0f 93       	push	r16
     ac4:	1f 93       	push	r17
     ac6:	26 e0       	ldi	r18, 0x06	; 6
     ac8:	40 e8       	ldi	r20, 0x80	; 128
     aca:	55 e2       	ldi	r21, 0x25	; 37
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	8f ee       	ldi	r24, 0xEF	; 239
     ad2:	92 e0       	ldi	r25, 0x02	; 2
     ad4:	0e 94 40 0a 	call	0x1480	; 0x1480 <_ZN14HardwareSerial5beginEmh>
     ad8:	6c e1       	ldi	r22, 0x1C	; 28
     ada:	71 e0       	ldi	r23, 0x01	; 1
     adc:	8f ee       	ldi	r24, 0xEF	; 239
     ade:	92 e0       	ldi	r25, 0x02	; 2
     ae0:	0e 94 93 0b 	call	0x1726	; 0x1726 <_ZN5Print7printlnEPKc>
     ae4:	07 e5       	ldi	r16, 0x57	; 87
     ae6:	20 e8       	ldi	r18, 0x80	; 128
     ae8:	3a e1       	ldi	r19, 0x1A	; 26
     aea:	46 e0       	ldi	r20, 0x06	; 6
     aec:	50 e0       	ldi	r21, 0x00	; 0
     aee:	65 e9       	ldi	r22, 0x95	; 149
     af0:	73 e0       	ldi	r23, 0x03	; 3
     af2:	8a ee       	ldi	r24, 0xEA	; 234
     af4:	92 e0       	ldi	r25, 0x02	; 2
     af6:	0e 94 82 03 	call	0x704	; 0x704 <_ZN8MAX301055beginER7TwoWiremh>
     afa:	81 11       	cpse	r24, r1
     afc:	07 c0       	rjmp	.+14     	; 0xb0c <setup+0x52>
     afe:	6c e2       	ldi	r22, 0x2C	; 44
     b00:	71 e0       	ldi	r23, 0x01	; 1
     b02:	8f ee       	ldi	r24, 0xEF	; 239
     b04:	92 e0       	ldi	r25, 0x02	; 2
     b06:	0e 94 93 0b 	call	0x1726	; 0x1726 <_ZN5Print7printlnEPKc>
     b0a:	ff cf       	rjmp	.-2      	; 0xb0a <setup+0x50>
     b0c:	60 e6       	ldi	r22, 0x60	; 96
     b0e:	71 e0       	ldi	r23, 0x01	; 1
     b10:	8f ee       	ldi	r24, 0xEF	; 239
     b12:	92 e0       	ldi	r25, 0x02	; 2
     b14:	0e 94 93 0b 	call	0x1726	; 0x1726 <_ZN5Print7printlnEPKc>
     b18:	c1 2c       	mov	r12, r1
     b1a:	80 e1       	ldi	r24, 0x10	; 16
     b1c:	d8 2e       	mov	r13, r24
     b1e:	9b e9       	ldi	r25, 0x9B	; 155
     b20:	e9 2e       	mov	r14, r25
     b22:	ff 24       	eor	r15, r15
     b24:	f3 94       	inc	r15
     b26:	00 e9       	ldi	r16, 0x90	; 144
     b28:	11 e0       	ldi	r17, 0x01	; 1
     b2a:	23 e0       	ldi	r18, 0x03	; 3
     b2c:	44 e0       	ldi	r20, 0x04	; 4
     b2e:	6f e1       	ldi	r22, 0x1F	; 31
     b30:	8a ee       	ldi	r24, 0xEA	; 234
     b32:	92 e0       	ldi	r25, 0x02	; 2
     b34:	0e 94 81 04 	call	0x902	; 0x902 <_ZN8MAX301055setupEhhhiii>
     b38:	6a e0       	ldi	r22, 0x0A	; 10
     b3a:	8a ee       	ldi	r24, 0xEA	; 234
     b3c:	92 e0       	ldi	r25, 0x02	; 2
     b3e:	0e 94 ce 03 	call	0x79c	; 0x79c <_ZN8MAX3010520setPulseAmplitudeRedEh>
     b42:	60 e0       	ldi	r22, 0x00	; 0
     b44:	8a ee       	ldi	r24, 0xEA	; 234
     b46:	92 e0       	ldi	r25, 0x02	; 2
     b48:	1f 91       	pop	r17
     b4a:	0f 91       	pop	r16
     b4c:	ff 90       	pop	r15
     b4e:	ef 90       	pop	r14
     b50:	df 90       	pop	r13
     b52:	cf 90       	pop	r12
     b54:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <_ZN8MAX3010522setPulseAmplitudeGreenEh>

00000b58 <_Z8meanDifffP16meanDiffFilter_t>:

float meanDiff(float M, meanDiffFilter_t* filterValues)
{
     b58:	7f 92       	push	r7
     b5a:	8f 92       	push	r8
     b5c:	9f 92       	push	r9
     b5e:	af 92       	push	r10
     b60:	bf 92       	push	r11
     b62:	cf 92       	push	r12
     b64:	df 92       	push	r13
     b66:	ef 92       	push	r14
     b68:	ff 92       	push	r15
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	6b 01       	movw	r12, r22
     b74:	7c 01       	movw	r14, r24
     b76:	ea 01       	movw	r28, r20
	float avg = 0;

	filterValues->sum -= filterValues->values[filterValues->index];
     b78:	7c ac       	ldd	r7, Y+60	; 0x3c
     b7a:	5a 01       	movw	r10, r20
     b7c:	84 e0       	ldi	r24, 0x04	; 4
     b7e:	78 9e       	mul	r7, r24
     b80:	a0 0c       	add	r10, r0
     b82:	b1 1c       	adc	r11, r1
     b84:	11 24       	eor	r1, r1
     b86:	8a 01       	movw	r16, r20
     b88:	03 5c       	subi	r16, 0xC3	; 195
     b8a:	1f 4f       	sbci	r17, 0xFF	; 255
     b8c:	f5 01       	movw	r30, r10
     b8e:	20 81       	ld	r18, Z
     b90:	31 81       	ldd	r19, Z+1	; 0x01
     b92:	42 81       	ldd	r20, Z+2	; 0x02
     b94:	53 81       	ldd	r21, Z+3	; 0x03
     b96:	f8 01       	movw	r30, r16
     b98:	60 81       	ld	r22, Z
     b9a:	71 81       	ldd	r23, Z+1	; 0x01
     b9c:	82 81       	ldd	r24, Z+2	; 0x02
     b9e:	93 81       	ldd	r25, Z+3	; 0x03
     ba0:	0e 94 34 07 	call	0xe68	; 0xe68 <__subsf3>
	filterValues->values[filterValues->index] = M;
     ba4:	f5 01       	movw	r30, r10
     ba6:	c0 82       	st	Z, r12
     ba8:	d1 82       	std	Z+1, r13	; 0x01
     baa:	e2 82       	std	Z+2, r14	; 0x02
     bac:	f3 82       	std	Z+3, r15	; 0x03
	filterValues->sum += filterValues->values[filterValues->index];
     bae:	a7 01       	movw	r20, r14
     bb0:	96 01       	movw	r18, r12
     bb2:	0e 94 35 07 	call	0xe6a	; 0xe6a <__addsf3>
     bb6:	4b 01       	movw	r8, r22
     bb8:	5c 01       	movw	r10, r24
     bba:	f8 01       	movw	r30, r16
     bbc:	60 83       	st	Z, r22
     bbe:	71 83       	std	Z+1, r23	; 0x01
     bc0:	82 83       	std	Z+2, r24	; 0x02
     bc2:	93 83       	std	Z+3, r25	; 0x03

	filterValues->index++;
	filterValues->index = filterValues->index % MEAN_FILTER_SIZE;
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	87 0d       	add	r24, r7
     bc8:	6f e0       	ldi	r22, 0x0F	; 15
     bca:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__udivmodqi4>
     bce:	9c af       	std	Y+60, r25	; 0x3c

	if(filterValues->count < MEAN_FILTER_SIZE)
     bd0:	cf 5b       	subi	r28, 0xBF	; 191
     bd2:	df 4f       	sbci	r29, 0xFF	; 255
     bd4:	88 81       	ld	r24, Y
     bd6:	8f 30       	cpi	r24, 0x0F	; 15
     bd8:	10 f4       	brcc	.+4      	; 0xbde <_Z8meanDifffP16meanDiffFilter_t+0x86>
	filterValues->count++;
     bda:	8f 5f       	subi	r24, 0xFF	; 255
     bdc:	88 83       	st	Y, r24

	avg = filterValues->sum / filterValues->count;
	return avg - M;
     bde:	68 81       	ld	r22, Y
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 49 08 	call	0x1092	; 0x1092 <__floatsisf>
     bea:	9b 01       	movw	r18, r22
     bec:	ac 01       	movw	r20, r24
     bee:	c5 01       	movw	r24, r10
     bf0:	b4 01       	movw	r22, r8
     bf2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__divsf3>
     bf6:	a7 01       	movw	r20, r14
     bf8:	96 01       	movw	r18, r12
     bfa:	0e 94 34 07 	call	0xe68	; 0xe68 <__subsf3>
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	1f 91       	pop	r17
     c04:	0f 91       	pop	r16
     c06:	ff 90       	pop	r15
     c08:	ef 90       	pop	r14
     c0a:	df 90       	pop	r13
     c0c:	cf 90       	pop	r12
     c0e:	bf 90       	pop	r11
     c10:	af 90       	pop	r10
     c12:	9f 90       	pop	r9
     c14:	8f 90       	pop	r8
     c16:	7f 90       	pop	r7
     c18:	08 95       	ret

00000c1a <loop>:
  particleSensor.setPulseAmplitudeRed(0x0A); //Turn Red LED to low to indicate sensor is running
  particleSensor.setPulseAmplitudeGreen(0); //Turn off Green LED
}

void loop()
{
     c1a:	4f 92       	push	r4
     c1c:	5f 92       	push	r5
     c1e:	6f 92       	push	r6
     c20:	7f 92       	push	r7
     c22:	8f 92       	push	r8
     c24:	9f 92       	push	r9
     c26:	af 92       	push	r10
     c28:	bf 92       	push	r11
     c2a:	cf 92       	push	r12
     c2c:	df 92       	push	r13
     c2e:	ef 92       	push	r14
     c30:	ff 92       	push	r15
     c32:	0f 93       	push	r16
     c34:	1f 93       	push	r17
     c36:	cf 93       	push	r28
  long irValue = particleSensor.getIR();
     c38:	8a ee       	ldi	r24, 0xEA	; 234
     c3a:	92 e0       	ldi	r25, 0x02	; 2
     c3c:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <_ZN8MAX301055getIREv>
     c40:	6b 01       	movw	r12, r22
     c42:	7c 01       	movw	r14, r24

  if (checkForBeat(irValue) == true)
     c44:	0e 94 25 01 	call	0x24a	; 0x24a <_Z12checkForBeatl>
     c48:	88 23       	and	r24, r24
     c4a:	09 f4       	brne	.+2      	; 0xc4e <loop+0x34>
     c4c:	6f c0       	rjmp	.+222    	; 0xd2c <loop+0x112>
  {
    //We sensed a beat!
    long delta = millis() - lastBeat;
     c4e:	0e 94 77 0d 	call	0x1aee	; 0x1aee <millis>
     c52:	00 91 97 02 	lds	r16, 0x0297	; 0x800297 <lastBeat>
     c56:	10 91 98 02 	lds	r17, 0x0298	; 0x800298 <lastBeat+0x1>
     c5a:	20 91 99 02 	lds	r18, 0x0299	; 0x800299 <lastBeat+0x2>
     c5e:	30 91 9a 02 	lds	r19, 0x029A	; 0x80029a <lastBeat+0x3>
     c62:	4b 01       	movw	r8, r22
     c64:	5c 01       	movw	r10, r24
     c66:	80 1a       	sub	r8, r16
     c68:	91 0a       	sbc	r9, r17
     c6a:	a2 0a       	sbc	r10, r18
     c6c:	b3 0a       	sbc	r11, r19
    lastBeat = millis();
     c6e:	0e 94 77 0d 	call	0x1aee	; 0x1aee <millis>
     c72:	60 93 97 02 	sts	0x0297, r22	; 0x800297 <lastBeat>
     c76:	70 93 98 02 	sts	0x0298, r23	; 0x800298 <lastBeat+0x1>
     c7a:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <lastBeat+0x2>
     c7e:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <lastBeat+0x3>

    beatsPerMinute = 60 / (delta / 1000.0);
     c82:	c5 01       	movw	r24, r10
     c84:	b4 01       	movw	r22, r8
     c86:	0e 94 49 08 	call	0x1092	; 0x1092 <__floatsisf>
     c8a:	20 e0       	ldi	r18, 0x00	; 0
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	4a e7       	ldi	r20, 0x7A	; 122
     c90:	54 e4       	ldi	r21, 0x44	; 68
     c92:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__divsf3>
     c96:	9b 01       	movw	r18, r22
     c98:	ac 01       	movw	r20, r24
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	70 e0       	ldi	r23, 0x00	; 0
     c9e:	80 e7       	ldi	r24, 0x70	; 112
     ca0:	92 e4       	ldi	r25, 0x42	; 66
     ca2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__divsf3>
     ca6:	4b 01       	movw	r8, r22
     ca8:	5c 01       	movw	r10, r24
     caa:	60 93 93 02 	sts	0x0293, r22	; 0x800293 <beatsPerMinute>
     cae:	70 93 94 02 	sts	0x0294, r23	; 0x800294 <beatsPerMinute+0x1>
     cb2:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <beatsPerMinute+0x2>
     cb6:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <beatsPerMinute+0x3>

    if (beatsPerMinute < 255 && beatsPerMinute > 20)
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	4f e7       	ldi	r20, 0x7F	; 127
     cc0:	53 e4       	ldi	r21, 0x43	; 67
     cc2:	0e 94 a1 07 	call	0xf42	; 0xf42 <__cmpsf2>
     cc6:	87 ff       	sbrs	r24, 7
     cc8:	31 c0       	rjmp	.+98     	; 0xd2c <loop+0x112>
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	40 ea       	ldi	r20, 0xA0	; 160
     cd0:	51 e4       	ldi	r21, 0x41	; 65
     cd2:	c5 01       	movw	r24, r10
     cd4:	b4 01       	movw	r22, r8
     cd6:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__gesf2>
     cda:	18 16       	cp	r1, r24
     cdc:	3c f5       	brge	.+78     	; 0xd2c <loop+0x112>
    {
      rates[rateSpot++] = (byte)beatsPerMinute; //Store this reading in the array
     cde:	c0 91 9b 02 	lds	r28, 0x029B	; 0x80029b <rateSpot>
     ce2:	0c 2f       	mov	r16, r28
     ce4:	10 e0       	ldi	r17, 0x00	; 0
     ce6:	04 56       	subi	r16, 0x64	; 100
     ce8:	1d 4f       	sbci	r17, 0xFD	; 253
     cea:	c5 01       	movw	r24, r10
     cec:	b4 01       	movw	r22, r8
     cee:	0e 94 18 08 	call	0x1030	; 0x1030 <__fixunssfsi>
     cf2:	f8 01       	movw	r30, r16
     cf4:	60 83       	st	Z, r22
      rateSpot %= RATE_SIZE; //Wrap variable
     cf6:	cf 5f       	subi	r28, 0xFF	; 255
     cf8:	c3 70       	andi	r28, 0x03	; 3
     cfa:	c0 93 9b 02 	sts	0x029B, r28	; 0x80029b <rateSpot>

      //Take average of readings
      beatAvg = 0;
      for (byte x = 0 ; x < RATE_SIZE ; x++)
        beatAvg += rates[x];
      beatAvg /= RATE_SIZE;
     cfe:	20 91 9c 02 	lds	r18, 0x029C	; 0x80029c <rates>
     d02:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <rates+0x1>
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	82 0f       	add	r24, r18
     d0a:	91 1d       	adc	r25, r1
     d0c:	20 91 9e 02 	lds	r18, 0x029E	; 0x80029e <rates+0x2>
     d10:	82 0f       	add	r24, r18
     d12:	91 1d       	adc	r25, r1
     d14:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <rates+0x3>
     d18:	82 0f       	add	r24, r18
     d1a:	91 1d       	adc	r25, r1
     d1c:	95 95       	asr	r25
     d1e:	87 95       	ror	r24
     d20:	95 95       	asr	r25
     d22:	87 95       	ror	r24
     d24:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <beatAvg+0x1>
     d28:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <beatAvg>
    }
  }

  dcFilterIR = dcRemoval(particleSensor.getIR(), dcFilterIR.w ,ALPHA);
     d2c:	40 90 e2 02 	lds	r4, 0x02E2	; 0x8002e2 <dcFilterIR>
     d30:	50 90 e3 02 	lds	r5, 0x02E3	; 0x8002e3 <dcFilterIR+0x1>
     d34:	60 90 e4 02 	lds	r6, 0x02E4	; 0x8002e4 <dcFilterIR+0x2>
     d38:	70 90 e5 02 	lds	r7, 0x02E5	; 0x8002e5 <dcFilterIR+0x3>
     d3c:	8a ee       	ldi	r24, 0xEA	; 234
     d3e:	92 e0       	ldi	r25, 0x02	; 2
     d40:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <_ZN8MAX301055getIREv>


dcFilter_t dcRemoval(float x, float prev_w, float alpha)
{
	dcFilter_t filtered;
	filtered.w = x + alpha* prev_w;
     d44:	0e 94 47 08 	call	0x108e	; 0x108e <__floatunsisf>
     d48:	4b 01       	movw	r8, r22
     d4a:	5c 01       	movw	r10, r24
     d4c:	23 e3       	ldi	r18, 0x33	; 51
     d4e:	33 e3       	ldi	r19, 0x33	; 51
     d50:	43 e7       	ldi	r20, 0x73	; 115
     d52:	5f e3       	ldi	r21, 0x3F	; 63
     d54:	c3 01       	movw	r24, r6
     d56:	b2 01       	movw	r22, r4
     d58:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__mulsf3>
     d5c:	9b 01       	movw	r18, r22
     d5e:	ac 01       	movw	r20, r24
     d60:	c5 01       	movw	r24, r10
     d62:	b4 01       	movw	r22, r8
     d64:	0e 94 35 07 	call	0xe6a	; 0xe6a <__addsf3>
     d68:	4b 01       	movw	r8, r22
     d6a:	5c 01       	movw	r10, r24
	filtered.result = filtered.w - prev_w;
     d6c:	a3 01       	movw	r20, r6
     d6e:	92 01       	movw	r18, r4
     d70:	0e 94 34 07 	call	0xe68	; 0xe68 <__subsf3>
        beatAvg += rates[x];
      beatAvg /= RATE_SIZE;
    }
  }

  dcFilterIR = dcRemoval(particleSensor.getIR(), dcFilterIR.w ,ALPHA);
     d74:	80 92 e2 02 	sts	0x02E2, r8	; 0x8002e2 <dcFilterIR>
     d78:	90 92 e3 02 	sts	0x02E3, r9	; 0x8002e3 <dcFilterIR+0x1>
     d7c:	a0 92 e4 02 	sts	0x02E4, r10	; 0x8002e4 <dcFilterIR+0x2>
     d80:	b0 92 e5 02 	sts	0x02E5, r11	; 0x8002e5 <dcFilterIR+0x3>
     d84:	60 93 e6 02 	sts	0x02E6, r22	; 0x8002e6 <dcFilterIR+0x4>
     d88:	70 93 e7 02 	sts	0x02E7, r23	; 0x8002e7 <dcFilterIR+0x5>
     d8c:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <dcFilterIR+0x6>
     d90:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <dcFilterIR+0x7>
  float meanDiffResIR = meanDiff( dcFilterIR.result, &meanDiffIR);
     d94:	40 ea       	ldi	r20, 0xA0	; 160
     d96:	52 e0       	ldi	r21, 0x02	; 2
     d98:	0e 94 ac 05 	call	0xb58	; 0xb58 <_Z8meanDifffP16meanDiffFilter_t>
     d9c:	4b 01       	movw	r8, r22
     d9e:	5c 01       	movw	r10, r24

 

  Serial.print("IR=");
     da0:	6c e9       	ldi	r22, 0x9C	; 156
     da2:	71 e0       	ldi	r23, 0x01	; 1
     da4:	8f ee       	ldi	r24, 0xEF	; 239
     da6:	92 e0       	ldi	r25, 0x02	; 2
     da8:	0e 94 86 0b 	call	0x170c	; 0x170c <_ZN5Print5printEPKc>
  Serial.print(irValue);
     dac:	2a e0       	ldi	r18, 0x0A	; 10
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	b7 01       	movw	r22, r14
     db2:	a6 01       	movw	r20, r12
     db4:	8f ee       	ldi	r24, 0xEF	; 239
     db6:	92 e0       	ldi	r25, 0x02	; 2
     db8:	0e 94 01 0c 	call	0x1802	; 0x1802 <_ZN5Print5printEli>
  Serial.print(", BPM=");
     dbc:	60 ea       	ldi	r22, 0xA0	; 160
     dbe:	71 e0       	ldi	r23, 0x01	; 1
     dc0:	8f ee       	ldi	r24, 0xEF	; 239
     dc2:	92 e0       	ldi	r25, 0x02	; 2
     dc4:	0e 94 86 0b 	call	0x170c	; 0x170c <_ZN5Print5printEPKc>
  Serial.print(beatsPerMinute);
     dc8:	40 91 93 02 	lds	r20, 0x0293	; 0x800293 <beatsPerMinute>
     dcc:	50 91 94 02 	lds	r21, 0x0294	; 0x800294 <beatsPerMinute+0x1>
     dd0:	60 91 95 02 	lds	r22, 0x0295	; 0x800295 <beatsPerMinute+0x2>
     dd4:	70 91 96 02 	lds	r23, 0x0296	; 0x800296 <beatsPerMinute+0x3>
     dd8:	22 e0       	ldi	r18, 0x02	; 2
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	8f ee       	ldi	r24, 0xEF	; 239
     dde:	92 e0       	ldi	r25, 0x02	; 2
     de0:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <_ZN5Print5printEdi>
  Serial.print(", Avg BPM=");
     de4:	67 ea       	ldi	r22, 0xA7	; 167
     de6:	71 e0       	ldi	r23, 0x01	; 1
     de8:	8f ee       	ldi	r24, 0xEF	; 239
     dea:	92 e0       	ldi	r25, 0x02	; 2
     dec:	0e 94 86 0b 	call	0x170c	; 0x170c <_ZN5Print5printEPKc>
  Serial.print(beatAvg);
     df0:	60 91 91 02 	lds	r22, 0x0291	; 0x800291 <beatAvg>
     df4:	70 91 92 02 	lds	r23, 0x0292	; 0x800292 <beatAvg+0x1>
     df8:	4a e0       	ldi	r20, 0x0A	; 10
     dfa:	50 e0       	ldi	r21, 0x00	; 0
     dfc:	8f ee       	ldi	r24, 0xEF	; 239
     dfe:	92 e0       	ldi	r25, 0x02	; 2
     e00:	0e 94 49 0c 	call	0x1892	; 0x1892 <_ZN5Print5printEii>
  Serial.print(", Mean Difference Filter=");
     e04:	62 eb       	ldi	r22, 0xB2	; 178
     e06:	71 e0       	ldi	r23, 0x01	; 1
     e08:	8f ee       	ldi	r24, 0xEF	; 239
     e0a:	92 e0       	ldi	r25, 0x02	; 2
     e0c:	0e 94 86 0b 	call	0x170c	; 0x170c <_ZN5Print5printEPKc>
   Serial.print(meanDiffResIR, 2);
     e10:	22 e0       	ldi	r18, 0x02	; 2
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	b5 01       	movw	r22, r10
     e16:	a4 01       	movw	r20, r8
     e18:	8f ee       	ldi	r24, 0xEF	; 239
     e1a:	92 e0       	ldi	r25, 0x02	; 2
     e1c:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <_ZN5Print5printEdi>

  if (irValue < 50000)
     e20:	f0 e5       	ldi	r31, 0x50	; 80
     e22:	cf 16       	cp	r12, r31
     e24:	f3 ec       	ldi	r31, 0xC3	; 195
     e26:	df 06       	cpc	r13, r31
     e28:	e1 04       	cpc	r14, r1
     e2a:	f1 04       	cpc	r15, r1
     e2c:	34 f4       	brge	.+12     	; 0xe3a <loop+0x220>
    Serial.print(" No finger?");
     e2e:	6c ec       	ldi	r22, 0xCC	; 204
     e30:	71 e0       	ldi	r23, 0x01	; 1
     e32:	8f ee       	ldi	r24, 0xEF	; 239
     e34:	92 e0       	ldi	r25, 0x02	; 2
     e36:	0e 94 86 0b 	call	0x170c	; 0x170c <_ZN5Print5printEPKc>

  Serial.println();
     e3a:	8f ee       	ldi	r24, 0xEF	; 239
     e3c:	92 e0       	ldi	r25, 0x02	; 2
  

  
}
     e3e:	cf 91       	pop	r28
     e40:	1f 91       	pop	r17
     e42:	0f 91       	pop	r16
     e44:	ff 90       	pop	r15
     e46:	ef 90       	pop	r14
     e48:	df 90       	pop	r13
     e4a:	cf 90       	pop	r12
     e4c:	bf 90       	pop	r11
     e4e:	af 90       	pop	r10
     e50:	9f 90       	pop	r9
     e52:	8f 90       	pop	r8
     e54:	7f 90       	pop	r7
     e56:	6f 90       	pop	r6
     e58:	5f 90       	pop	r5
     e5a:	4f 90       	pop	r4
   Serial.print(meanDiffResIR, 2);

  if (irValue < 50000)
    Serial.print(" No finger?");

  Serial.println();
     e5c:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <_ZN5Print7printlnEv>

00000e60 <_GLOBAL__sub_I_particleSensor>:
//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio



MAX30105 particleSensor;
     e60:	8a ee       	ldi	r24, 0xEA	; 234
     e62:	92 e0       	ldi	r25, 0x02	; 2
     e64:	0c 94 b5 01 	jmp	0x36a	; 0x36a <_ZN8MAX30105C1Ev>

00000e68 <__subsf3>:
     e68:	50 58       	subi	r21, 0x80	; 128

00000e6a <__addsf3>:
     e6a:	bb 27       	eor	r27, r27
     e6c:	aa 27       	eor	r26, r26
     e6e:	0e 94 4c 07 	call	0xe98	; 0xe98 <__addsf3x>
     e72:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__fp_round>
     e76:	0e 94 b1 08 	call	0x1162	; 0x1162 <__fp_pscA>
     e7a:	38 f0       	brcs	.+14     	; 0xe8a <__addsf3+0x20>
     e7c:	0e 94 b8 08 	call	0x1170	; 0x1170 <__fp_pscB>
     e80:	20 f0       	brcs	.+8      	; 0xe8a <__addsf3+0x20>
     e82:	39 f4       	brne	.+14     	; 0xe92 <__addsf3+0x28>
     e84:	9f 3f       	cpi	r25, 0xFF	; 255
     e86:	19 f4       	brne	.+6      	; 0xe8e <__addsf3+0x24>
     e88:	26 f4       	brtc	.+8      	; 0xe92 <__addsf3+0x28>
     e8a:	0c 94 ae 08 	jmp	0x115c	; 0x115c <__fp_nan>
     e8e:	0e f4       	brtc	.+2      	; 0xe92 <__addsf3+0x28>
     e90:	e0 95       	com	r30
     e92:	e7 fb       	bst	r30, 7
     e94:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__fp_inf>

00000e98 <__addsf3x>:
     e98:	e9 2f       	mov	r30, r25
     e9a:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__fp_split3>
     e9e:	58 f3       	brcs	.-42     	; 0xe76 <__addsf3+0xc>
     ea0:	ba 17       	cp	r27, r26
     ea2:	62 07       	cpc	r22, r18
     ea4:	73 07       	cpc	r23, r19
     ea6:	84 07       	cpc	r24, r20
     ea8:	95 07       	cpc	r25, r21
     eaa:	20 f0       	brcs	.+8      	; 0xeb4 <__addsf3x+0x1c>
     eac:	79 f4       	brne	.+30     	; 0xecc <__addsf3x+0x34>
     eae:	a6 f5       	brtc	.+104    	; 0xf18 <__addsf3x+0x80>
     eb0:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__fp_zero>
     eb4:	0e f4       	brtc	.+2      	; 0xeb8 <__addsf3x+0x20>
     eb6:	e0 95       	com	r30
     eb8:	0b 2e       	mov	r0, r27
     eba:	ba 2f       	mov	r27, r26
     ebc:	a0 2d       	mov	r26, r0
     ebe:	0b 01       	movw	r0, r22
     ec0:	b9 01       	movw	r22, r18
     ec2:	90 01       	movw	r18, r0
     ec4:	0c 01       	movw	r0, r24
     ec6:	ca 01       	movw	r24, r20
     ec8:	a0 01       	movw	r20, r0
     eca:	11 24       	eor	r1, r1
     ecc:	ff 27       	eor	r31, r31
     ece:	59 1b       	sub	r21, r25
     ed0:	99 f0       	breq	.+38     	; 0xef8 <__addsf3x+0x60>
     ed2:	59 3f       	cpi	r21, 0xF9	; 249
     ed4:	50 f4       	brcc	.+20     	; 0xeea <__addsf3x+0x52>
     ed6:	50 3e       	cpi	r21, 0xE0	; 224
     ed8:	68 f1       	brcs	.+90     	; 0xf34 <__addsf3x+0x9c>
     eda:	1a 16       	cp	r1, r26
     edc:	f0 40       	sbci	r31, 0x00	; 0
     ede:	a2 2f       	mov	r26, r18
     ee0:	23 2f       	mov	r18, r19
     ee2:	34 2f       	mov	r19, r20
     ee4:	44 27       	eor	r20, r20
     ee6:	58 5f       	subi	r21, 0xF8	; 248
     ee8:	f3 cf       	rjmp	.-26     	; 0xed0 <__addsf3x+0x38>
     eea:	46 95       	lsr	r20
     eec:	37 95       	ror	r19
     eee:	27 95       	ror	r18
     ef0:	a7 95       	ror	r26
     ef2:	f0 40       	sbci	r31, 0x00	; 0
     ef4:	53 95       	inc	r21
     ef6:	c9 f7       	brne	.-14     	; 0xeea <__addsf3x+0x52>
     ef8:	7e f4       	brtc	.+30     	; 0xf18 <__addsf3x+0x80>
     efa:	1f 16       	cp	r1, r31
     efc:	ba 0b       	sbc	r27, r26
     efe:	62 0b       	sbc	r22, r18
     f00:	73 0b       	sbc	r23, r19
     f02:	84 0b       	sbc	r24, r20
     f04:	ba f0       	brmi	.+46     	; 0xf34 <__addsf3x+0x9c>
     f06:	91 50       	subi	r25, 0x01	; 1
     f08:	a1 f0       	breq	.+40     	; 0xf32 <__addsf3x+0x9a>
     f0a:	ff 0f       	add	r31, r31
     f0c:	bb 1f       	adc	r27, r27
     f0e:	66 1f       	adc	r22, r22
     f10:	77 1f       	adc	r23, r23
     f12:	88 1f       	adc	r24, r24
     f14:	c2 f7       	brpl	.-16     	; 0xf06 <__addsf3x+0x6e>
     f16:	0e c0       	rjmp	.+28     	; 0xf34 <__addsf3x+0x9c>
     f18:	ba 0f       	add	r27, r26
     f1a:	62 1f       	adc	r22, r18
     f1c:	73 1f       	adc	r23, r19
     f1e:	84 1f       	adc	r24, r20
     f20:	48 f4       	brcc	.+18     	; 0xf34 <__addsf3x+0x9c>
     f22:	87 95       	ror	r24
     f24:	77 95       	ror	r23
     f26:	67 95       	ror	r22
     f28:	b7 95       	ror	r27
     f2a:	f7 95       	ror	r31
     f2c:	9e 3f       	cpi	r25, 0xFE	; 254
     f2e:	08 f0       	brcs	.+2      	; 0xf32 <__addsf3x+0x9a>
     f30:	b0 cf       	rjmp	.-160    	; 0xe92 <__addsf3+0x28>
     f32:	93 95       	inc	r25
     f34:	88 0f       	add	r24, r24
     f36:	08 f0       	brcs	.+2      	; 0xf3a <__addsf3x+0xa2>
     f38:	99 27       	eor	r25, r25
     f3a:	ee 0f       	add	r30, r30
     f3c:	97 95       	ror	r25
     f3e:	87 95       	ror	r24
     f40:	08 95       	ret

00000f42 <__cmpsf2>:
     f42:	0e 94 84 08 	call	0x1108	; 0x1108 <__fp_cmp>
     f46:	08 f4       	brcc	.+2      	; 0xf4a <__cmpsf2+0x8>
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	08 95       	ret

00000f4c <__divsf3>:
     f4c:	0e 94 ba 07 	call	0xf74	; 0xf74 <__divsf3x>
     f50:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__fp_round>
     f54:	0e 94 b8 08 	call	0x1170	; 0x1170 <__fp_pscB>
     f58:	58 f0       	brcs	.+22     	; 0xf70 <__divsf3+0x24>
     f5a:	0e 94 b1 08 	call	0x1162	; 0x1162 <__fp_pscA>
     f5e:	40 f0       	brcs	.+16     	; 0xf70 <__divsf3+0x24>
     f60:	29 f4       	brne	.+10     	; 0xf6c <__divsf3+0x20>
     f62:	5f 3f       	cpi	r21, 0xFF	; 255
     f64:	29 f0       	breq	.+10     	; 0xf70 <__divsf3+0x24>
     f66:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__fp_inf>
     f6a:	51 11       	cpse	r21, r1
     f6c:	0c 94 f3 08 	jmp	0x11e6	; 0x11e6 <__fp_szero>
     f70:	0c 94 ae 08 	jmp	0x115c	; 0x115c <__fp_nan>

00000f74 <__divsf3x>:
     f74:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__fp_split3>
     f78:	68 f3       	brcs	.-38     	; 0xf54 <__divsf3+0x8>

00000f7a <__divsf3_pse>:
     f7a:	99 23       	and	r25, r25
     f7c:	b1 f3       	breq	.-20     	; 0xf6a <__divsf3+0x1e>
     f7e:	55 23       	and	r21, r21
     f80:	91 f3       	breq	.-28     	; 0xf66 <__divsf3+0x1a>
     f82:	95 1b       	sub	r25, r21
     f84:	55 0b       	sbc	r21, r21
     f86:	bb 27       	eor	r27, r27
     f88:	aa 27       	eor	r26, r26
     f8a:	62 17       	cp	r22, r18
     f8c:	73 07       	cpc	r23, r19
     f8e:	84 07       	cpc	r24, r20
     f90:	38 f0       	brcs	.+14     	; 0xfa0 <__divsf3_pse+0x26>
     f92:	9f 5f       	subi	r25, 0xFF	; 255
     f94:	5f 4f       	sbci	r21, 0xFF	; 255
     f96:	22 0f       	add	r18, r18
     f98:	33 1f       	adc	r19, r19
     f9a:	44 1f       	adc	r20, r20
     f9c:	aa 1f       	adc	r26, r26
     f9e:	a9 f3       	breq	.-22     	; 0xf8a <__divsf3_pse+0x10>
     fa0:	35 d0       	rcall	.+106    	; 0x100c <__divsf3_pse+0x92>
     fa2:	0e 2e       	mov	r0, r30
     fa4:	3a f0       	brmi	.+14     	; 0xfb4 <__divsf3_pse+0x3a>
     fa6:	e0 e8       	ldi	r30, 0x80	; 128
     fa8:	32 d0       	rcall	.+100    	; 0x100e <__divsf3_pse+0x94>
     faa:	91 50       	subi	r25, 0x01	; 1
     fac:	50 40       	sbci	r21, 0x00	; 0
     fae:	e6 95       	lsr	r30
     fb0:	00 1c       	adc	r0, r0
     fb2:	ca f7       	brpl	.-14     	; 0xfa6 <__divsf3_pse+0x2c>
     fb4:	2b d0       	rcall	.+86     	; 0x100c <__divsf3_pse+0x92>
     fb6:	fe 2f       	mov	r31, r30
     fb8:	29 d0       	rcall	.+82     	; 0x100c <__divsf3_pse+0x92>
     fba:	66 0f       	add	r22, r22
     fbc:	77 1f       	adc	r23, r23
     fbe:	88 1f       	adc	r24, r24
     fc0:	bb 1f       	adc	r27, r27
     fc2:	26 17       	cp	r18, r22
     fc4:	37 07       	cpc	r19, r23
     fc6:	48 07       	cpc	r20, r24
     fc8:	ab 07       	cpc	r26, r27
     fca:	b0 e8       	ldi	r27, 0x80	; 128
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <__divsf3_pse+0x56>
     fce:	bb 0b       	sbc	r27, r27
     fd0:	80 2d       	mov	r24, r0
     fd2:	bf 01       	movw	r22, r30
     fd4:	ff 27       	eor	r31, r31
     fd6:	93 58       	subi	r25, 0x83	; 131
     fd8:	5f 4f       	sbci	r21, 0xFF	; 255
     fda:	3a f0       	brmi	.+14     	; 0xfea <__divsf3_pse+0x70>
     fdc:	9e 3f       	cpi	r25, 0xFE	; 254
     fde:	51 05       	cpc	r21, r1
     fe0:	78 f0       	brcs	.+30     	; 0x1000 <__divsf3_pse+0x86>
     fe2:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__fp_inf>
     fe6:	0c 94 f3 08 	jmp	0x11e6	; 0x11e6 <__fp_szero>
     fea:	5f 3f       	cpi	r21, 0xFF	; 255
     fec:	e4 f3       	brlt	.-8      	; 0xfe6 <__divsf3_pse+0x6c>
     fee:	98 3e       	cpi	r25, 0xE8	; 232
     ff0:	d4 f3       	brlt	.-12     	; 0xfe6 <__divsf3_pse+0x6c>
     ff2:	86 95       	lsr	r24
     ff4:	77 95       	ror	r23
     ff6:	67 95       	ror	r22
     ff8:	b7 95       	ror	r27
     ffa:	f7 95       	ror	r31
     ffc:	9f 5f       	subi	r25, 0xFF	; 255
     ffe:	c9 f7       	brne	.-14     	; 0xff2 <__divsf3_pse+0x78>
    1000:	88 0f       	add	r24, r24
    1002:	91 1d       	adc	r25, r1
    1004:	96 95       	lsr	r25
    1006:	87 95       	ror	r24
    1008:	97 f9       	bld	r25, 7
    100a:	08 95       	ret
    100c:	e1 e0       	ldi	r30, 0x01	; 1
    100e:	66 0f       	add	r22, r22
    1010:	77 1f       	adc	r23, r23
    1012:	88 1f       	adc	r24, r24
    1014:	bb 1f       	adc	r27, r27
    1016:	62 17       	cp	r22, r18
    1018:	73 07       	cpc	r23, r19
    101a:	84 07       	cpc	r24, r20
    101c:	ba 07       	cpc	r27, r26
    101e:	20 f0       	brcs	.+8      	; 0x1028 <__divsf3_pse+0xae>
    1020:	62 1b       	sub	r22, r18
    1022:	73 0b       	sbc	r23, r19
    1024:	84 0b       	sbc	r24, r20
    1026:	ba 0b       	sbc	r27, r26
    1028:	ee 1f       	adc	r30, r30
    102a:	88 f7       	brcc	.-30     	; 0x100e <__divsf3_pse+0x94>
    102c:	e0 95       	com	r30
    102e:	08 95       	ret

00001030 <__fixunssfsi>:
    1030:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__fp_splitA>
    1034:	88 f0       	brcs	.+34     	; 0x1058 <__fixunssfsi+0x28>
    1036:	9f 57       	subi	r25, 0x7F	; 127
    1038:	98 f0       	brcs	.+38     	; 0x1060 <__fixunssfsi+0x30>
    103a:	b9 2f       	mov	r27, r25
    103c:	99 27       	eor	r25, r25
    103e:	b7 51       	subi	r27, 0x17	; 23
    1040:	b0 f0       	brcs	.+44     	; 0x106e <__fixunssfsi+0x3e>
    1042:	e1 f0       	breq	.+56     	; 0x107c <__fixunssfsi+0x4c>
    1044:	66 0f       	add	r22, r22
    1046:	77 1f       	adc	r23, r23
    1048:	88 1f       	adc	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	1a f0       	brmi	.+6      	; 0x1054 <__fixunssfsi+0x24>
    104e:	ba 95       	dec	r27
    1050:	c9 f7       	brne	.-14     	; 0x1044 <__fixunssfsi+0x14>
    1052:	14 c0       	rjmp	.+40     	; 0x107c <__fixunssfsi+0x4c>
    1054:	b1 30       	cpi	r27, 0x01	; 1
    1056:	91 f0       	breq	.+36     	; 0x107c <__fixunssfsi+0x4c>
    1058:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__fp_zero>
    105c:	b1 e0       	ldi	r27, 0x01	; 1
    105e:	08 95       	ret
    1060:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__fp_zero>
    1064:	67 2f       	mov	r22, r23
    1066:	78 2f       	mov	r23, r24
    1068:	88 27       	eor	r24, r24
    106a:	b8 5f       	subi	r27, 0xF8	; 248
    106c:	39 f0       	breq	.+14     	; 0x107c <__fixunssfsi+0x4c>
    106e:	b9 3f       	cpi	r27, 0xF9	; 249
    1070:	cc f3       	brlt	.-14     	; 0x1064 <__fixunssfsi+0x34>
    1072:	86 95       	lsr	r24
    1074:	77 95       	ror	r23
    1076:	67 95       	ror	r22
    1078:	b3 95       	inc	r27
    107a:	d9 f7       	brne	.-10     	; 0x1072 <__fixunssfsi+0x42>
    107c:	3e f4       	brtc	.+14     	; 0x108c <__fixunssfsi+0x5c>
    107e:	90 95       	com	r25
    1080:	80 95       	com	r24
    1082:	70 95       	com	r23
    1084:	61 95       	neg	r22
    1086:	7f 4f       	sbci	r23, 0xFF	; 255
    1088:	8f 4f       	sbci	r24, 0xFF	; 255
    108a:	9f 4f       	sbci	r25, 0xFF	; 255
    108c:	08 95       	ret

0000108e <__floatunsisf>:
    108e:	e8 94       	clt
    1090:	09 c0       	rjmp	.+18     	; 0x10a4 <__floatsisf+0x12>

00001092 <__floatsisf>:
    1092:	97 fb       	bst	r25, 7
    1094:	3e f4       	brtc	.+14     	; 0x10a4 <__floatsisf+0x12>
    1096:	90 95       	com	r25
    1098:	80 95       	com	r24
    109a:	70 95       	com	r23
    109c:	61 95       	neg	r22
    109e:	7f 4f       	sbci	r23, 0xFF	; 255
    10a0:	8f 4f       	sbci	r24, 0xFF	; 255
    10a2:	9f 4f       	sbci	r25, 0xFF	; 255
    10a4:	99 23       	and	r25, r25
    10a6:	a9 f0       	breq	.+42     	; 0x10d2 <__floatsisf+0x40>
    10a8:	f9 2f       	mov	r31, r25
    10aa:	96 e9       	ldi	r25, 0x96	; 150
    10ac:	bb 27       	eor	r27, r27
    10ae:	93 95       	inc	r25
    10b0:	f6 95       	lsr	r31
    10b2:	87 95       	ror	r24
    10b4:	77 95       	ror	r23
    10b6:	67 95       	ror	r22
    10b8:	b7 95       	ror	r27
    10ba:	f1 11       	cpse	r31, r1
    10bc:	f8 cf       	rjmp	.-16     	; 0x10ae <__floatsisf+0x1c>
    10be:	fa f4       	brpl	.+62     	; 0x10fe <__floatsisf+0x6c>
    10c0:	bb 0f       	add	r27, r27
    10c2:	11 f4       	brne	.+4      	; 0x10c8 <__floatsisf+0x36>
    10c4:	60 ff       	sbrs	r22, 0
    10c6:	1b c0       	rjmp	.+54     	; 0x10fe <__floatsisf+0x6c>
    10c8:	6f 5f       	subi	r22, 0xFF	; 255
    10ca:	7f 4f       	sbci	r23, 0xFF	; 255
    10cc:	8f 4f       	sbci	r24, 0xFF	; 255
    10ce:	9f 4f       	sbci	r25, 0xFF	; 255
    10d0:	16 c0       	rjmp	.+44     	; 0x10fe <__floatsisf+0x6c>
    10d2:	88 23       	and	r24, r24
    10d4:	11 f0       	breq	.+4      	; 0x10da <__floatsisf+0x48>
    10d6:	96 e9       	ldi	r25, 0x96	; 150
    10d8:	11 c0       	rjmp	.+34     	; 0x10fc <__floatsisf+0x6a>
    10da:	77 23       	and	r23, r23
    10dc:	21 f0       	breq	.+8      	; 0x10e6 <__floatsisf+0x54>
    10de:	9e e8       	ldi	r25, 0x8E	; 142
    10e0:	87 2f       	mov	r24, r23
    10e2:	76 2f       	mov	r23, r22
    10e4:	05 c0       	rjmp	.+10     	; 0x10f0 <__floatsisf+0x5e>
    10e6:	66 23       	and	r22, r22
    10e8:	71 f0       	breq	.+28     	; 0x1106 <__floatsisf+0x74>
    10ea:	96 e8       	ldi	r25, 0x86	; 134
    10ec:	86 2f       	mov	r24, r22
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	2a f0       	brmi	.+10     	; 0x10fe <__floatsisf+0x6c>
    10f4:	9a 95       	dec	r25
    10f6:	66 0f       	add	r22, r22
    10f8:	77 1f       	adc	r23, r23
    10fa:	88 1f       	adc	r24, r24
    10fc:	da f7       	brpl	.-10     	; 0x10f4 <__floatsisf+0x62>
    10fe:	88 0f       	add	r24, r24
    1100:	96 95       	lsr	r25
    1102:	87 95       	ror	r24
    1104:	97 f9       	bld	r25, 7
    1106:	08 95       	ret

00001108 <__fp_cmp>:
    1108:	99 0f       	add	r25, r25
    110a:	00 08       	sbc	r0, r0
    110c:	55 0f       	add	r21, r21
    110e:	aa 0b       	sbc	r26, r26
    1110:	e0 e8       	ldi	r30, 0x80	; 128
    1112:	fe ef       	ldi	r31, 0xFE	; 254
    1114:	16 16       	cp	r1, r22
    1116:	17 06       	cpc	r1, r23
    1118:	e8 07       	cpc	r30, r24
    111a:	f9 07       	cpc	r31, r25
    111c:	c0 f0       	brcs	.+48     	; 0x114e <__fp_cmp+0x46>
    111e:	12 16       	cp	r1, r18
    1120:	13 06       	cpc	r1, r19
    1122:	e4 07       	cpc	r30, r20
    1124:	f5 07       	cpc	r31, r21
    1126:	98 f0       	brcs	.+38     	; 0x114e <__fp_cmp+0x46>
    1128:	62 1b       	sub	r22, r18
    112a:	73 0b       	sbc	r23, r19
    112c:	84 0b       	sbc	r24, r20
    112e:	95 0b       	sbc	r25, r21
    1130:	39 f4       	brne	.+14     	; 0x1140 <__fp_cmp+0x38>
    1132:	0a 26       	eor	r0, r26
    1134:	61 f0       	breq	.+24     	; 0x114e <__fp_cmp+0x46>
    1136:	23 2b       	or	r18, r19
    1138:	24 2b       	or	r18, r20
    113a:	25 2b       	or	r18, r21
    113c:	21 f4       	brne	.+8      	; 0x1146 <__fp_cmp+0x3e>
    113e:	08 95       	ret
    1140:	0a 26       	eor	r0, r26
    1142:	09 f4       	brne	.+2      	; 0x1146 <__fp_cmp+0x3e>
    1144:	a1 40       	sbci	r26, 0x01	; 1
    1146:	a6 95       	lsr	r26
    1148:	8f ef       	ldi	r24, 0xFF	; 255
    114a:	81 1d       	adc	r24, r1
    114c:	81 1d       	adc	r24, r1
    114e:	08 95       	ret

00001150 <__fp_inf>:
    1150:	97 f9       	bld	r25, 7
    1152:	9f 67       	ori	r25, 0x7F	; 127
    1154:	80 e8       	ldi	r24, 0x80	; 128
    1156:	70 e0       	ldi	r23, 0x00	; 0
    1158:	60 e0       	ldi	r22, 0x00	; 0
    115a:	08 95       	ret

0000115c <__fp_nan>:
    115c:	9f ef       	ldi	r25, 0xFF	; 255
    115e:	80 ec       	ldi	r24, 0xC0	; 192
    1160:	08 95       	ret

00001162 <__fp_pscA>:
    1162:	00 24       	eor	r0, r0
    1164:	0a 94       	dec	r0
    1166:	16 16       	cp	r1, r22
    1168:	17 06       	cpc	r1, r23
    116a:	18 06       	cpc	r1, r24
    116c:	09 06       	cpc	r0, r25
    116e:	08 95       	ret

00001170 <__fp_pscB>:
    1170:	00 24       	eor	r0, r0
    1172:	0a 94       	dec	r0
    1174:	12 16       	cp	r1, r18
    1176:	13 06       	cpc	r1, r19
    1178:	14 06       	cpc	r1, r20
    117a:	05 06       	cpc	r0, r21
    117c:	08 95       	ret

0000117e <__fp_round>:
    117e:	09 2e       	mov	r0, r25
    1180:	03 94       	inc	r0
    1182:	00 0c       	add	r0, r0
    1184:	11 f4       	brne	.+4      	; 0x118a <__fp_round+0xc>
    1186:	88 23       	and	r24, r24
    1188:	52 f0       	brmi	.+20     	; 0x119e <__fp_round+0x20>
    118a:	bb 0f       	add	r27, r27
    118c:	40 f4       	brcc	.+16     	; 0x119e <__fp_round+0x20>
    118e:	bf 2b       	or	r27, r31
    1190:	11 f4       	brne	.+4      	; 0x1196 <__fp_round+0x18>
    1192:	60 ff       	sbrs	r22, 0
    1194:	04 c0       	rjmp	.+8      	; 0x119e <__fp_round+0x20>
    1196:	6f 5f       	subi	r22, 0xFF	; 255
    1198:	7f 4f       	sbci	r23, 0xFF	; 255
    119a:	8f 4f       	sbci	r24, 0xFF	; 255
    119c:	9f 4f       	sbci	r25, 0xFF	; 255
    119e:	08 95       	ret

000011a0 <__fp_split3>:
    11a0:	57 fd       	sbrc	r21, 7
    11a2:	90 58       	subi	r25, 0x80	; 128
    11a4:	44 0f       	add	r20, r20
    11a6:	55 1f       	adc	r21, r21
    11a8:	59 f0       	breq	.+22     	; 0x11c0 <__fp_splitA+0x10>
    11aa:	5f 3f       	cpi	r21, 0xFF	; 255
    11ac:	71 f0       	breq	.+28     	; 0x11ca <__fp_splitA+0x1a>
    11ae:	47 95       	ror	r20

000011b0 <__fp_splitA>:
    11b0:	88 0f       	add	r24, r24
    11b2:	97 fb       	bst	r25, 7
    11b4:	99 1f       	adc	r25, r25
    11b6:	61 f0       	breq	.+24     	; 0x11d0 <__fp_splitA+0x20>
    11b8:	9f 3f       	cpi	r25, 0xFF	; 255
    11ba:	79 f0       	breq	.+30     	; 0x11da <__fp_splitA+0x2a>
    11bc:	87 95       	ror	r24
    11be:	08 95       	ret
    11c0:	12 16       	cp	r1, r18
    11c2:	13 06       	cpc	r1, r19
    11c4:	14 06       	cpc	r1, r20
    11c6:	55 1f       	adc	r21, r21
    11c8:	f2 cf       	rjmp	.-28     	; 0x11ae <__fp_split3+0xe>
    11ca:	46 95       	lsr	r20
    11cc:	f1 df       	rcall	.-30     	; 0x11b0 <__fp_splitA>
    11ce:	08 c0       	rjmp	.+16     	; 0x11e0 <__fp_splitA+0x30>
    11d0:	16 16       	cp	r1, r22
    11d2:	17 06       	cpc	r1, r23
    11d4:	18 06       	cpc	r1, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	f1 cf       	rjmp	.-30     	; 0x11bc <__fp_splitA+0xc>
    11da:	86 95       	lsr	r24
    11dc:	71 05       	cpc	r23, r1
    11de:	61 05       	cpc	r22, r1
    11e0:	08 94       	sec
    11e2:	08 95       	ret

000011e4 <__fp_zero>:
    11e4:	e8 94       	clt

000011e6 <__fp_szero>:
    11e6:	bb 27       	eor	r27, r27
    11e8:	66 27       	eor	r22, r22
    11ea:	77 27       	eor	r23, r23
    11ec:	cb 01       	movw	r24, r22
    11ee:	97 f9       	bld	r25, 7
    11f0:	08 95       	ret

000011f2 <__gesf2>:
    11f2:	0e 94 84 08 	call	0x1108	; 0x1108 <__fp_cmp>
    11f6:	08 f4       	brcc	.+2      	; 0x11fa <__gesf2+0x8>
    11f8:	8f ef       	ldi	r24, 0xFF	; 255
    11fa:	08 95       	ret

000011fc <__mulsf3>:
    11fc:	0e 94 11 09 	call	0x1222	; 0x1222 <__mulsf3x>
    1200:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__fp_round>
    1204:	0e 94 b1 08 	call	0x1162	; 0x1162 <__fp_pscA>
    1208:	38 f0       	brcs	.+14     	; 0x1218 <__mulsf3+0x1c>
    120a:	0e 94 b8 08 	call	0x1170	; 0x1170 <__fp_pscB>
    120e:	20 f0       	brcs	.+8      	; 0x1218 <__mulsf3+0x1c>
    1210:	95 23       	and	r25, r21
    1212:	11 f0       	breq	.+4      	; 0x1218 <__mulsf3+0x1c>
    1214:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__fp_inf>
    1218:	0c 94 ae 08 	jmp	0x115c	; 0x115c <__fp_nan>
    121c:	11 24       	eor	r1, r1
    121e:	0c 94 f3 08 	jmp	0x11e6	; 0x11e6 <__fp_szero>

00001222 <__mulsf3x>:
    1222:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__fp_split3>
    1226:	70 f3       	brcs	.-36     	; 0x1204 <__mulsf3+0x8>

00001228 <__mulsf3_pse>:
    1228:	95 9f       	mul	r25, r21
    122a:	c1 f3       	breq	.-16     	; 0x121c <__mulsf3+0x20>
    122c:	95 0f       	add	r25, r21
    122e:	50 e0       	ldi	r21, 0x00	; 0
    1230:	55 1f       	adc	r21, r21
    1232:	62 9f       	mul	r22, r18
    1234:	f0 01       	movw	r30, r0
    1236:	72 9f       	mul	r23, r18
    1238:	bb 27       	eor	r27, r27
    123a:	f0 0d       	add	r31, r0
    123c:	b1 1d       	adc	r27, r1
    123e:	63 9f       	mul	r22, r19
    1240:	aa 27       	eor	r26, r26
    1242:	f0 0d       	add	r31, r0
    1244:	b1 1d       	adc	r27, r1
    1246:	aa 1f       	adc	r26, r26
    1248:	64 9f       	mul	r22, r20
    124a:	66 27       	eor	r22, r22
    124c:	b0 0d       	add	r27, r0
    124e:	a1 1d       	adc	r26, r1
    1250:	66 1f       	adc	r22, r22
    1252:	82 9f       	mul	r24, r18
    1254:	22 27       	eor	r18, r18
    1256:	b0 0d       	add	r27, r0
    1258:	a1 1d       	adc	r26, r1
    125a:	62 1f       	adc	r22, r18
    125c:	73 9f       	mul	r23, r19
    125e:	b0 0d       	add	r27, r0
    1260:	a1 1d       	adc	r26, r1
    1262:	62 1f       	adc	r22, r18
    1264:	83 9f       	mul	r24, r19
    1266:	a0 0d       	add	r26, r0
    1268:	61 1d       	adc	r22, r1
    126a:	22 1f       	adc	r18, r18
    126c:	74 9f       	mul	r23, r20
    126e:	33 27       	eor	r19, r19
    1270:	a0 0d       	add	r26, r0
    1272:	61 1d       	adc	r22, r1
    1274:	23 1f       	adc	r18, r19
    1276:	84 9f       	mul	r24, r20
    1278:	60 0d       	add	r22, r0
    127a:	21 1d       	adc	r18, r1
    127c:	82 2f       	mov	r24, r18
    127e:	76 2f       	mov	r23, r22
    1280:	6a 2f       	mov	r22, r26
    1282:	11 24       	eor	r1, r1
    1284:	9f 57       	subi	r25, 0x7F	; 127
    1286:	50 40       	sbci	r21, 0x00	; 0
    1288:	9a f0       	brmi	.+38     	; 0x12b0 <__mulsf3_pse+0x88>
    128a:	f1 f0       	breq	.+60     	; 0x12c8 <__mulsf3_pse+0xa0>
    128c:	88 23       	and	r24, r24
    128e:	4a f0       	brmi	.+18     	; 0x12a2 <__mulsf3_pse+0x7a>
    1290:	ee 0f       	add	r30, r30
    1292:	ff 1f       	adc	r31, r31
    1294:	bb 1f       	adc	r27, r27
    1296:	66 1f       	adc	r22, r22
    1298:	77 1f       	adc	r23, r23
    129a:	88 1f       	adc	r24, r24
    129c:	91 50       	subi	r25, 0x01	; 1
    129e:	50 40       	sbci	r21, 0x00	; 0
    12a0:	a9 f7       	brne	.-22     	; 0x128c <__mulsf3_pse+0x64>
    12a2:	9e 3f       	cpi	r25, 0xFE	; 254
    12a4:	51 05       	cpc	r21, r1
    12a6:	80 f0       	brcs	.+32     	; 0x12c8 <__mulsf3_pse+0xa0>
    12a8:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__fp_inf>
    12ac:	0c 94 f3 08 	jmp	0x11e6	; 0x11e6 <__fp_szero>
    12b0:	5f 3f       	cpi	r21, 0xFF	; 255
    12b2:	e4 f3       	brlt	.-8      	; 0x12ac <__mulsf3_pse+0x84>
    12b4:	98 3e       	cpi	r25, 0xE8	; 232
    12b6:	d4 f3       	brlt	.-12     	; 0x12ac <__mulsf3_pse+0x84>
    12b8:	86 95       	lsr	r24
    12ba:	77 95       	ror	r23
    12bc:	67 95       	ror	r22
    12be:	b7 95       	ror	r27
    12c0:	f7 95       	ror	r31
    12c2:	e7 95       	ror	r30
    12c4:	9f 5f       	subi	r25, 0xFF	; 255
    12c6:	c1 f7       	brne	.-16     	; 0x12b8 <__mulsf3_pse+0x90>
    12c8:	fe 2b       	or	r31, r30
    12ca:	88 0f       	add	r24, r24
    12cc:	91 1d       	adc	r25, r1
    12ce:	96 95       	lsr	r25
    12d0:	87 95       	ror	r24
    12d2:	97 f9       	bld	r25, 7
    12d4:	08 95       	ret

000012d6 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    12d6:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    12d8:	91 8d       	ldd	r25, Z+25	; 0x19
    12da:	22 8d       	ldd	r18, Z+26	; 0x1a
    12dc:	89 2f       	mov	r24, r25
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	80 5c       	subi	r24, 0xC0	; 192
    12e2:	9f 4f       	sbci	r25, 0xFF	; 255
    12e4:	82 1b       	sub	r24, r18
    12e6:	91 09       	sbc	r25, r1
}
    12e8:	8f 73       	andi	r24, 0x3F	; 63
    12ea:	99 27       	eor	r25, r25
    12ec:	08 95       	ret

000012ee <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    12ee:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    12f0:	91 8d       	ldd	r25, Z+25	; 0x19
    12f2:	82 8d       	ldd	r24, Z+26	; 0x1a
    12f4:	98 17       	cp	r25, r24
    12f6:	31 f0       	breq	.+12     	; 0x1304 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    12f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    12fa:	e8 0f       	add	r30, r24
    12fc:	f1 1d       	adc	r31, r1
    12fe:	85 8d       	ldd	r24, Z+29	; 0x1d
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1304:	8f ef       	ldi	r24, 0xFF	; 255
    1306:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1308:	08 95       	ret

0000130a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    130a:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    130c:	91 8d       	ldd	r25, Z+25	; 0x19
    130e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1310:	98 17       	cp	r25, r24
    1312:	61 f0       	breq	.+24     	; 0x132c <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1314:	82 8d       	ldd	r24, Z+26	; 0x1a
    1316:	df 01       	movw	r26, r30
    1318:	a8 0f       	add	r26, r24
    131a:	b1 1d       	adc	r27, r1
    131c:	5d 96       	adiw	r26, 0x1d	; 29
    131e:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1320:	92 8d       	ldd	r25, Z+26	; 0x1a
    1322:	9f 5f       	subi	r25, 0xFF	; 255
    1324:	9f 73       	andi	r25, 0x3F	; 63
    1326:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    132c:	8f ef       	ldi	r24, 0xFF	; 255
    132e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1330:	08 95       	ret

00001332 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    1332:	fc 01       	movw	r30, r24
    1334:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
    1336:	44 8d       	ldd	r20, Z+28	; 0x1c
    1338:	25 2f       	mov	r18, r21
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	84 2f       	mov	r24, r20
    133e:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1340:	82 1b       	sub	r24, r18
    1342:	93 0b       	sbc	r25, r19
    1344:	54 17       	cp	r21, r20
    1346:	10 f0       	brcs	.+4      	; 0x134c <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1348:	cf 96       	adiw	r24, 0x3f	; 63
    134a:	08 95       	ret
  return tail - head - 1;
    134c:	01 97       	sbiw	r24, 0x01	; 1
}
    134e:	08 95       	ret

00001350 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	9b e0       	ldi	r25, 0x0B	; 11
    1354:	89 2b       	or	r24, r25
    1356:	49 f0       	breq	.+18     	; 0x136a <_Z14serialEventRunv+0x1a>
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	89 2b       	or	r24, r25
    135e:	29 f0       	breq	.+10     	; 0x136a <_Z14serialEventRunv+0x1a>
    1360:	0e 94 00 0b 	call	0x1600	; 0x1600 <_Z17Serial0_availablev>
    1364:	81 11       	cpse	r24, r1
    1366:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    136a:	08 95       	ret

0000136c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    136c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    136e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1370:	df 01       	movw	r26, r30
    1372:	a8 0f       	add	r26, r24
    1374:	b1 1d       	adc	r27, r1
    1376:	a3 5a       	subi	r26, 0xA3	; 163
    1378:	bf 4f       	sbci	r27, 0xFF	; 255
    137a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    137c:	84 8d       	ldd	r24, Z+28	; 0x1c
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	01 96       	adiw	r24, 0x01	; 1
    1382:	8f 73       	andi	r24, 0x3F	; 63
    1384:	99 27       	eor	r25, r25
    1386:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1388:	a6 89       	ldd	r26, Z+22	; 0x16
    138a:	b7 89       	ldd	r27, Z+23	; 0x17
    138c:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    138e:	a0 89       	ldd	r26, Z+16	; 0x10
    1390:	b1 89       	ldd	r27, Z+17	; 0x11
    1392:	8c 91       	ld	r24, X
    1394:	80 64       	ori	r24, 0x40	; 64
    1396:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1398:	93 8d       	ldd	r25, Z+27	; 0x1b
    139a:	84 8d       	ldd	r24, Z+28	; 0x1c
    139c:	98 13       	cpse	r25, r24
    139e:	06 c0       	rjmp	.+12     	; 0x13ac <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    13a0:	02 88       	ldd	r0, Z+18	; 0x12
    13a2:	f3 89       	ldd	r31, Z+19	; 0x13
    13a4:	e0 2d       	mov	r30, r0
    13a6:	80 81       	ld	r24, Z
    13a8:	8f 7d       	andi	r24, 0xDF	; 223
    13aa:	80 83       	st	Z, r24
    13ac:	08 95       	ret

000013ae <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    13ae:	ef 92       	push	r14
    13b0:	ff 92       	push	r15
    13b2:	0f 93       	push	r16
    13b4:	1f 93       	push	r17
    13b6:	cf 93       	push	r28
    13b8:	df 93       	push	r29
    13ba:	ec 01       	movw	r28, r24
  _written = true;
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    13c0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    13c2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13c4:	98 13       	cpse	r25, r24
    13c6:	05 c0       	rjmp	.+10     	; 0x13d2 <_ZN14HardwareSerial5writeEh+0x24>
    13c8:	e8 89       	ldd	r30, Y+16	; 0x10
    13ca:	f9 89       	ldd	r31, Y+17	; 0x11
    13cc:	80 81       	ld	r24, Z
    13ce:	85 fd       	sbrc	r24, 5
    13d0:	24 c0       	rjmp	.+72     	; 0x141a <_ZN14HardwareSerial5writeEh+0x6c>
    13d2:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    13d4:	0b 8d       	ldd	r16, Y+27	; 0x1b
    13d6:	10 e0       	ldi	r17, 0x00	; 0
    13d8:	0f 5f       	subi	r16, 0xFF	; 255
    13da:	1f 4f       	sbci	r17, 0xFF	; 255
    13dc:	0f 73       	andi	r16, 0x3F	; 63
    13de:	11 27       	eor	r17, r17
    13e0:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    13e2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13e4:	e8 12       	cpse	r14, r24
    13e6:	0c c0       	rjmp	.+24     	; 0x1400 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	07 fc       	sbrc	r0, 7
    13ec:	fa cf       	rjmp	.-12     	; 0x13e2 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    13ee:	e8 89       	ldd	r30, Y+16	; 0x10
    13f0:	f9 89       	ldd	r31, Y+17	; 0x11
    13f2:	80 81       	ld	r24, Z
    13f4:	85 ff       	sbrs	r24, 5
    13f6:	f5 cf       	rjmp	.-22     	; 0x13e2 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    13f8:	ce 01       	movw	r24, r28
    13fa:	0e 94 b6 09 	call	0x136c	; 0x136c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    13fe:	f1 cf       	rjmp	.-30     	; 0x13e2 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1400:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1402:	fe 01       	movw	r30, r28
    1404:	e8 0f       	add	r30, r24
    1406:	f1 1d       	adc	r31, r1
    1408:	e3 5a       	subi	r30, 0xA3	; 163
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    140e:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1410:	ea 89       	ldd	r30, Y+18	; 0x12
    1412:	fb 89       	ldd	r31, Y+19	; 0x13
    1414:	80 81       	ld	r24, Z
    1416:	80 62       	ori	r24, 0x20	; 32
    1418:	07 c0       	rjmp	.+14     	; 0x1428 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    141a:	ee 89       	ldd	r30, Y+22	; 0x16
    141c:	ff 89       	ldd	r31, Y+23	; 0x17
    141e:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1420:	e8 89       	ldd	r30, Y+16	; 0x10
    1422:	f9 89       	ldd	r31, Y+17	; 0x11
    1424:	80 81       	ld	r24, Z
    1426:	80 64       	ori	r24, 0x40	; 64
    1428:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	df 91       	pop	r29
    1430:	cf 91       	pop	r28
    1432:	1f 91       	pop	r17
    1434:	0f 91       	pop	r16
    1436:	ff 90       	pop	r15
    1438:	ef 90       	pop	r14
    143a:	08 95       	ret

0000143c <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    143c:	cf 93       	push	r28
    143e:	df 93       	push	r29
    1440:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1442:	88 8d       	ldd	r24, Y+24	; 0x18
    1444:	88 23       	and	r24, r24
    1446:	c9 f0       	breq	.+50     	; 0x147a <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1448:	ea 89       	ldd	r30, Y+18	; 0x12
    144a:	fb 89       	ldd	r31, Y+19	; 0x13
    144c:	80 81       	ld	r24, Z
    144e:	85 fd       	sbrc	r24, 5
    1450:	05 c0       	rjmp	.+10     	; 0x145c <_ZN14HardwareSerial5flushEv+0x20>
    1452:	a8 89       	ldd	r26, Y+16	; 0x10
    1454:	b9 89       	ldd	r27, Y+17	; 0x11
    1456:	8c 91       	ld	r24, X
    1458:	86 fd       	sbrc	r24, 6
    145a:	0f c0       	rjmp	.+30     	; 0x147a <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	07 fc       	sbrc	r0, 7
    1460:	f5 cf       	rjmp	.-22     	; 0x144c <_ZN14HardwareSerial5flushEv+0x10>
    1462:	80 81       	ld	r24, Z
    1464:	85 ff       	sbrs	r24, 5
    1466:	f2 cf       	rjmp	.-28     	; 0x144c <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1468:	a8 89       	ldd	r26, Y+16	; 0x10
    146a:	b9 89       	ldd	r27, Y+17	; 0x11
    146c:	8c 91       	ld	r24, X
    146e:	85 ff       	sbrs	r24, 5
    1470:	ed cf       	rjmp	.-38     	; 0x144c <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1472:	ce 01       	movw	r24, r28
    1474:	0e 94 b6 09 	call	0x136c	; 0x136c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1478:	e7 cf       	rjmp	.-50     	; 0x1448 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    147a:	df 91       	pop	r29
    147c:	cf 91       	pop	r28
    147e:	08 95       	ret

00001480 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1480:	cf 92       	push	r12
    1482:	df 92       	push	r13
    1484:	ef 92       	push	r14
    1486:	ff 92       	push	r15
    1488:	1f 93       	push	r17
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	ec 01       	movw	r28, r24
    1490:	6a 01       	movw	r12, r20
    1492:	7b 01       	movw	r14, r22
    1494:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1496:	e8 89       	ldd	r30, Y+16	; 0x10
    1498:	f9 89       	ldd	r31, Y+17	; 0x11
    149a:	82 e0       	ldi	r24, 0x02	; 2
    149c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    149e:	41 15       	cp	r20, r1
    14a0:	51 4e       	sbci	r21, 0xE1	; 225
    14a2:	61 05       	cpc	r22, r1
    14a4:	71 05       	cpc	r23, r1
    14a6:	b1 f0       	breq	.+44     	; 0x14d4 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	79 e0       	ldi	r23, 0x09	; 9
    14ac:	8d e3       	ldi	r24, 0x3D	; 61
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	a7 01       	movw	r20, r14
    14b2:	96 01       	movw	r18, r12
    14b4:	0e 94 05 12 	call	0x240a	; 0x240a <__udivmodsi4>
    14b8:	da 01       	movw	r26, r20
    14ba:	c9 01       	movw	r24, r18
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	a1 09       	sbc	r26, r1
    14c0:	b1 09       	sbc	r27, r1
    14c2:	b6 95       	lsr	r27
    14c4:	a7 95       	ror	r26
    14c6:	97 95       	ror	r25
    14c8:	87 95       	ror	r24
    14ca:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    14cc:	21 15       	cp	r18, r1
    14ce:	80 e1       	ldi	r24, 0x10	; 16
    14d0:	38 07       	cpc	r19, r24
    14d2:	a8 f0       	brcs	.+42     	; 0x14fe <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    14d4:	e8 89       	ldd	r30, Y+16	; 0x10
    14d6:	f9 89       	ldd	r31, Y+17	; 0x11
    14d8:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    14da:	60 e8       	ldi	r22, 0x80	; 128
    14dc:	74 e8       	ldi	r23, 0x84	; 132
    14de:	8e e1       	ldi	r24, 0x1E	; 30
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	a7 01       	movw	r20, r14
    14e4:	96 01       	movw	r18, r12
    14e6:	0e 94 05 12 	call	0x240a	; 0x240a <__udivmodsi4>
    14ea:	da 01       	movw	r26, r20
    14ec:	c9 01       	movw	r24, r18
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	a1 09       	sbc	r26, r1
    14f2:	b1 09       	sbc	r27, r1
    14f4:	b6 95       	lsr	r27
    14f6:	a7 95       	ror	r26
    14f8:	97 95       	ror	r25
    14fa:	87 95       	ror	r24
    14fc:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    14fe:	ec 85       	ldd	r30, Y+12	; 0x0c
    1500:	fd 85       	ldd	r31, Y+13	; 0x0d
    1502:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1504:	ee 85       	ldd	r30, Y+14	; 0x0e
    1506:	ff 85       	ldd	r31, Y+15	; 0x0f
    1508:	20 83       	st	Z, r18

  _written = false;
    150a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    150c:	ec 89       	ldd	r30, Y+20	; 0x14
    150e:	fd 89       	ldd	r31, Y+21	; 0x15
    1510:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1512:	ea 89       	ldd	r30, Y+18	; 0x12
    1514:	fb 89       	ldd	r31, Y+19	; 0x13
    1516:	80 81       	ld	r24, Z
    1518:	80 61       	ori	r24, 0x10	; 16
    151a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    151c:	ea 89       	ldd	r30, Y+18	; 0x12
    151e:	fb 89       	ldd	r31, Y+19	; 0x13
    1520:	80 81       	ld	r24, Z
    1522:	88 60       	ori	r24, 0x08	; 8
    1524:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1526:	ea 89       	ldd	r30, Y+18	; 0x12
    1528:	fb 89       	ldd	r31, Y+19	; 0x13
    152a:	80 81       	ld	r24, Z
    152c:	80 68       	ori	r24, 0x80	; 128
    152e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1530:	ea 89       	ldd	r30, Y+18	; 0x12
    1532:	fb 89       	ldd	r31, Y+19	; 0x13
    1534:	80 81       	ld	r24, Z
    1536:	8f 7d       	andi	r24, 0xDF	; 223
    1538:	80 83       	st	Z, r24
}
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	1f 91       	pop	r17
    1540:	ff 90       	pop	r15
    1542:	ef 90       	pop	r14
    1544:	df 90       	pop	r13
    1546:	cf 90       	pop	r12
    1548:	08 95       	ret

0000154a <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	08 95       	ret

00001550 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1550:	1f 92       	push	r1
    1552:	0f 92       	push	r0
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	0f 92       	push	r0
    1558:	11 24       	eor	r1, r1
    155a:	2f 93       	push	r18
    155c:	8f 93       	push	r24
    155e:	9f 93       	push	r25
    1560:	ef 93       	push	r30
    1562:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1564:	e0 91 ff 02 	lds	r30, 0x02FF	; 0x8002ff <Serial+0x10>
    1568:	f0 91 00 03 	lds	r31, 0x0300	; 0x800300 <Serial+0x11>
    156c:	80 81       	ld	r24, Z
    156e:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <Serial+0x16>
    1572:	f0 91 06 03 	lds	r31, 0x0306	; 0x800306 <Serial+0x17>
    1576:	82 fd       	sbrc	r24, 2
    1578:	12 c0       	rjmp	.+36     	; 0x159e <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    157a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    157c:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <Serial+0x19>
    1580:	8f 5f       	subi	r24, 0xFF	; 255
    1582:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1584:	20 91 09 03 	lds	r18, 0x0309	; 0x800309 <Serial+0x1a>
    1588:	82 17       	cp	r24, r18
    158a:	51 f0       	breq	.+20     	; 0x15a0 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    158c:	e0 91 08 03 	lds	r30, 0x0308	; 0x800308 <Serial+0x19>
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	e1 51       	subi	r30, 0x11	; 17
    1594:	fd 4f       	sbci	r31, 0xFD	; 253
    1596:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1598:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <Serial+0x19>
    159c:	01 c0       	rjmp	.+2      	; 0x15a0 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    159e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    15a0:	ff 91       	pop	r31
    15a2:	ef 91       	pop	r30
    15a4:	9f 91       	pop	r25
    15a6:	8f 91       	pop	r24
    15a8:	2f 91       	pop	r18
    15aa:	0f 90       	pop	r0
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	0f 90       	pop	r0
    15b0:	1f 90       	pop	r1
    15b2:	18 95       	reti

000015b4 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    15b4:	1f 92       	push	r1
    15b6:	0f 92       	push	r0
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	0f 92       	push	r0
    15bc:	11 24       	eor	r1, r1
    15be:	2f 93       	push	r18
    15c0:	3f 93       	push	r19
    15c2:	4f 93       	push	r20
    15c4:	5f 93       	push	r21
    15c6:	6f 93       	push	r22
    15c8:	7f 93       	push	r23
    15ca:	8f 93       	push	r24
    15cc:	9f 93       	push	r25
    15ce:	af 93       	push	r26
    15d0:	bf 93       	push	r27
    15d2:	ef 93       	push	r30
    15d4:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    15d6:	8f ee       	ldi	r24, 0xEF	; 239
    15d8:	92 e0       	ldi	r25, 0x02	; 2
    15da:	0e 94 b6 09 	call	0x136c	; 0x136c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    15de:	ff 91       	pop	r31
    15e0:	ef 91       	pop	r30
    15e2:	bf 91       	pop	r27
    15e4:	af 91       	pop	r26
    15e6:	9f 91       	pop	r25
    15e8:	8f 91       	pop	r24
    15ea:	7f 91       	pop	r23
    15ec:	6f 91       	pop	r22
    15ee:	5f 91       	pop	r21
    15f0:	4f 91       	pop	r20
    15f2:	3f 91       	pop	r19
    15f4:	2f 91       	pop	r18
    15f6:	0f 90       	pop	r0
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	0f 90       	pop	r0
    15fc:	1f 90       	pop	r1
    15fe:	18 95       	reti

00001600 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1600:	8f ee       	ldi	r24, 0xEF	; 239
    1602:	92 e0       	ldi	r25, 0x02	; 2
    1604:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <_ZN14HardwareSerial9availableEv>
    1608:	21 e0       	ldi	r18, 0x01	; 1
    160a:	89 2b       	or	r24, r25
    160c:	09 f4       	brne	.+2      	; 0x1610 <_Z17Serial0_availablev+0x10>
    160e:	20 e0       	ldi	r18, 0x00	; 0
}
    1610:	82 2f       	mov	r24, r18
    1612:	08 95       	ret

00001614 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1614:	ef ee       	ldi	r30, 0xEF	; 239
    1616:	f2 e0       	ldi	r31, 0x02	; 2
    1618:	13 82       	std	Z+3, r1	; 0x03
    161a:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    161c:	88 ee       	ldi	r24, 0xE8	; 232
    161e:	93 e0       	ldi	r25, 0x03	; 3
    1620:	a0 e0       	ldi	r26, 0x00	; 0
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	84 83       	std	Z+4, r24	; 0x04
    1626:	95 83       	std	Z+5, r25	; 0x05
    1628:	a6 83       	std	Z+6, r26	; 0x06
    162a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    162c:	8c ed       	ldi	r24, 0xDC	; 220
    162e:	91 e0       	ldi	r25, 0x01	; 1
    1630:	91 83       	std	Z+1, r25	; 0x01
    1632:	80 83       	st	Z, r24
    1634:	85 ec       	ldi	r24, 0xC5	; 197
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	95 87       	std	Z+13, r25	; 0x0d
    163a:	84 87       	std	Z+12, r24	; 0x0c
    163c:	84 ec       	ldi	r24, 0xC4	; 196
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	97 87       	std	Z+15, r25	; 0x0f
    1642:	86 87       	std	Z+14, r24	; 0x0e
    1644:	80 ec       	ldi	r24, 0xC0	; 192
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	91 8b       	std	Z+17, r25	; 0x11
    164a:	80 8b       	std	Z+16, r24	; 0x10
    164c:	81 ec       	ldi	r24, 0xC1	; 193
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	93 8b       	std	Z+19, r25	; 0x13
    1652:	82 8b       	std	Z+18, r24	; 0x12
    1654:	82 ec       	ldi	r24, 0xC2	; 194
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	95 8b       	std	Z+21, r25	; 0x15
    165a:	84 8b       	std	Z+20, r24	; 0x14
    165c:	86 ec       	ldi	r24, 0xC6	; 198
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	97 8b       	std	Z+23, r25	; 0x17
    1662:	86 8b       	std	Z+22, r24	; 0x16
    1664:	11 8e       	std	Z+25, r1	; 0x19
    1666:	12 8e       	std	Z+26, r1	; 0x1a
    1668:	13 8e       	std	Z+27, r1	; 0x1b
    166a:	14 8e       	std	Z+28, r1	; 0x1c
    166c:	08 95       	ret

0000166e <initVariant>:
    166e:	08 95       	ret

00001670 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1670:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <init>

	initVariant();
    1674:	0e 94 37 0b 	call	0x166e	; 0x166e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1678:	0e 94 5d 05 	call	0xaba	; 0xaba <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    167c:	c8 ea       	ldi	r28, 0xA8	; 168
    167e:	d9 e0       	ldi	r29, 0x09	; 9
#endif
	
	setup();
    
	for (;;) {
		loop();
    1680:	0e 94 0d 06 	call	0xc1a	; 0xc1a <loop>
		if (serialEventRun) serialEventRun();
    1684:	20 97       	sbiw	r28, 0x00	; 0
    1686:	e1 f3       	breq	.-8      	; 0x1680 <main+0x10>
    1688:	0e 94 a8 09 	call	0x1350	; 0x1350 <_Z14serialEventRunv>
    168c:	f9 cf       	rjmp	.-14     	; 0x1680 <main+0x10>

0000168e <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    168e:	cf 92       	push	r12
    1690:	df 92       	push	r13
    1692:	ef 92       	push	r14
    1694:	ff 92       	push	r15
    1696:	0f 93       	push	r16
    1698:	1f 93       	push	r17
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	6c 01       	movw	r12, r24
    16a0:	7a 01       	movw	r14, r20
    16a2:	8b 01       	movw	r16, r22
    16a4:	c0 e0       	ldi	r28, 0x00	; 0
    16a6:	d0 e0       	ldi	r29, 0x00	; 0
    16a8:	ce 15       	cp	r28, r14
    16aa:	df 05       	cpc	r29, r15
    16ac:	81 f0       	breq	.+32     	; 0x16ce <_ZN5Print5writeEPKhj+0x40>
    16ae:	d8 01       	movw	r26, r16
    16b0:	6d 91       	ld	r22, X+
    16b2:	8d 01       	movw	r16, r26
    16b4:	d6 01       	movw	r26, r12
    16b6:	ed 91       	ld	r30, X+
    16b8:	fc 91       	ld	r31, X
    16ba:	01 90       	ld	r0, Z+
    16bc:	f0 81       	ld	r31, Z
    16be:	e0 2d       	mov	r30, r0
    16c0:	c6 01       	movw	r24, r12
    16c2:	09 95       	icall
    16c4:	89 2b       	or	r24, r25
    16c6:	11 f0       	breq	.+4      	; 0x16cc <_ZN5Print5writeEPKhj+0x3e>
    16c8:	21 96       	adiw	r28, 0x01	; 1
    16ca:	ee cf       	rjmp	.-36     	; 0x16a8 <_ZN5Print5writeEPKhj+0x1a>
    16cc:	7e 01       	movw	r14, r28
    16ce:	c7 01       	movw	r24, r14
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	1f 91       	pop	r17
    16d6:	0f 91       	pop	r16
    16d8:	ff 90       	pop	r15
    16da:	ef 90       	pop	r14
    16dc:	df 90       	pop	r13
    16de:	cf 90       	pop	r12
    16e0:	08 95       	ret

000016e2 <_ZN5Print5writeEPKc>:
    16e2:	61 15       	cp	r22, r1
    16e4:	71 05       	cpc	r23, r1
    16e6:	79 f0       	breq	.+30     	; 0x1706 <_ZN5Print5writeEPKc+0x24>
    16e8:	fb 01       	movw	r30, r22
    16ea:	01 90       	ld	r0, Z+
    16ec:	00 20       	and	r0, r0
    16ee:	e9 f7       	brne	.-6      	; 0x16ea <_ZN5Print5writeEPKc+0x8>
    16f0:	31 97       	sbiw	r30, 0x01	; 1
    16f2:	af 01       	movw	r20, r30
    16f4:	46 1b       	sub	r20, r22
    16f6:	57 0b       	sbc	r21, r23
    16f8:	dc 01       	movw	r26, r24
    16fa:	ed 91       	ld	r30, X+
    16fc:	fc 91       	ld	r31, X
    16fe:	02 80       	ldd	r0, Z+2	; 0x02
    1700:	f3 81       	ldd	r31, Z+3	; 0x03
    1702:	e0 2d       	mov	r30, r0
    1704:	09 94       	ijmp
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	08 95       	ret

0000170c <_ZN5Print5printEPKc>:
    170c:	0c 94 71 0b 	jmp	0x16e2	; 0x16e2 <_ZN5Print5writeEPKc>

00001710 <_ZN5Print5printEc>:
    1710:	dc 01       	movw	r26, r24
    1712:	ed 91       	ld	r30, X+
    1714:	fc 91       	ld	r31, X
    1716:	01 90       	ld	r0, Z+
    1718:	f0 81       	ld	r31, Z
    171a:	e0 2d       	mov	r30, r0
    171c:	09 94       	ijmp

0000171e <_ZN5Print7printlnEv>:
    171e:	6a ee       	ldi	r22, 0xEA	; 234
    1720:	71 e0       	ldi	r23, 0x01	; 1
    1722:	0c 94 71 0b 	jmp	0x16e2	; 0x16e2 <_ZN5Print5writeEPKc>

00001726 <_ZN5Print7printlnEPKc>:
    1726:	0f 93       	push	r16
    1728:	1f 93       	push	r17
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    172e:	ec 01       	movw	r28, r24
    1730:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <_ZN5Print5writeEPKc>
    1734:	8c 01       	movw	r16, r24
    1736:	ce 01       	movw	r24, r28
    1738:	0e 94 8f 0b 	call	0x171e	; 0x171e <_ZN5Print7printlnEv>
    173c:	80 0f       	add	r24, r16
    173e:	91 1f       	adc	r25, r17
    1740:	df 91       	pop	r29
    1742:	cf 91       	pop	r28
    1744:	1f 91       	pop	r17
    1746:	0f 91       	pop	r16
    1748:	08 95       	ret

0000174a <_ZN5Print11printNumberEmh>:
    174a:	8f 92       	push	r8
    174c:	9f 92       	push	r9
    174e:	af 92       	push	r10
    1750:	bf 92       	push	r11
    1752:	ef 92       	push	r14
    1754:	ff 92       	push	r15
    1756:	0f 93       	push	r16
    1758:	1f 93       	push	r17
    175a:	cf 93       	push	r28
    175c:	df 93       	push	r29
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    1762:	a1 97       	sbiw	r28, 0x21	; 33
    1764:	0f b6       	in	r0, 0x3f	; 63
    1766:	f8 94       	cli
    1768:	de bf       	out	0x3e, r29	; 62
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	cd bf       	out	0x3d, r28	; 61
    176e:	7c 01       	movw	r14, r24
    1770:	fa 01       	movw	r30, r20
    1772:	cb 01       	movw	r24, r22
    1774:	19 a2       	std	Y+33, r1	; 0x21
    1776:	22 30       	cpi	r18, 0x02	; 2
    1778:	08 f4       	brcc	.+2      	; 0x177c <_ZN5Print11printNumberEmh+0x32>
    177a:	2a e0       	ldi	r18, 0x0A	; 10
    177c:	8e 01       	movw	r16, r28
    177e:	0f 5d       	subi	r16, 0xDF	; 223
    1780:	1f 4f       	sbci	r17, 0xFF	; 255
    1782:	82 2e       	mov	r8, r18
    1784:	91 2c       	mov	r9, r1
    1786:	a1 2c       	mov	r10, r1
    1788:	b1 2c       	mov	r11, r1
    178a:	bf 01       	movw	r22, r30
    178c:	a5 01       	movw	r20, r10
    178e:	94 01       	movw	r18, r8
    1790:	0e 94 05 12 	call	0x240a	; 0x240a <__udivmodsi4>
    1794:	f9 01       	movw	r30, r18
    1796:	ca 01       	movw	r24, r20
    1798:	01 50       	subi	r16, 0x01	; 1
    179a:	11 09       	sbc	r17, r1
    179c:	6a 30       	cpi	r22, 0x0A	; 10
    179e:	10 f4       	brcc	.+4      	; 0x17a4 <_ZN5Print11printNumberEmh+0x5a>
    17a0:	60 5d       	subi	r22, 0xD0	; 208
    17a2:	01 c0       	rjmp	.+2      	; 0x17a6 <_ZN5Print11printNumberEmh+0x5c>
    17a4:	69 5c       	subi	r22, 0xC9	; 201
    17a6:	d8 01       	movw	r26, r16
    17a8:	6c 93       	st	X, r22
    17aa:	23 2b       	or	r18, r19
    17ac:	24 2b       	or	r18, r20
    17ae:	25 2b       	or	r18, r21
    17b0:	61 f7       	brne	.-40     	; 0x178a <_ZN5Print11printNumberEmh+0x40>
    17b2:	b8 01       	movw	r22, r16
    17b4:	c7 01       	movw	r24, r14
    17b6:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <_ZN5Print5writeEPKc>
    17ba:	a1 96       	adiw	r28, 0x21	; 33
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
    17c0:	de bf       	out	0x3e, r29	; 62
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	cd bf       	out	0x3d, r28	; 61
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	1f 91       	pop	r17
    17cc:	0f 91       	pop	r16
    17ce:	ff 90       	pop	r15
    17d0:	ef 90       	pop	r14
    17d2:	bf 90       	pop	r11
    17d4:	af 90       	pop	r10
    17d6:	9f 90       	pop	r9
    17d8:	8f 90       	pop	r8
    17da:	08 95       	ret

000017dc <_ZN5Print5printEmi>:
    17dc:	21 15       	cp	r18, r1
    17de:	31 05       	cpc	r19, r1
    17e0:	41 f4       	brne	.+16     	; 0x17f2 <_ZN5Print5printEmi+0x16>
    17e2:	dc 01       	movw	r26, r24
    17e4:	ed 91       	ld	r30, X+
    17e6:	fc 91       	ld	r31, X
    17e8:	01 90       	ld	r0, Z+
    17ea:	f0 81       	ld	r31, Z
    17ec:	e0 2d       	mov	r30, r0
    17ee:	64 2f       	mov	r22, r20
    17f0:	09 94       	ijmp
    17f2:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <_ZN5Print11printNumberEmh>

000017f6 <_ZN5Print5printEji>:
    17f6:	9a 01       	movw	r18, r20
    17f8:	ab 01       	movw	r20, r22
    17fa:	60 e0       	ldi	r22, 0x00	; 0
    17fc:	70 e0       	ldi	r23, 0x00	; 0
    17fe:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <_ZN5Print5printEmi>

00001802 <_ZN5Print5printEli>:
    1802:	cf 92       	push	r12
    1804:	df 92       	push	r13
    1806:	ef 92       	push	r14
    1808:	ff 92       	push	r15
    180a:	0f 93       	push	r16
    180c:	1f 93       	push	r17
    180e:	cf 93       	push	r28
    1810:	df 93       	push	r29
    1812:	21 15       	cp	r18, r1
    1814:	31 05       	cpc	r19, r1
    1816:	81 f4       	brne	.+32     	; 0x1838 <_ZN5Print5printEli+0x36>
    1818:	dc 01       	movw	r26, r24
    181a:	ed 91       	ld	r30, X+
    181c:	fc 91       	ld	r31, X
    181e:	01 90       	ld	r0, Z+
    1820:	f0 81       	ld	r31, Z
    1822:	e0 2d       	mov	r30, r0
    1824:	64 2f       	mov	r22, r20
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	1f 91       	pop	r17
    182c:	0f 91       	pop	r16
    182e:	ff 90       	pop	r15
    1830:	ef 90       	pop	r14
    1832:	df 90       	pop	r13
    1834:	cf 90       	pop	r12
    1836:	09 94       	ijmp
    1838:	2a 30       	cpi	r18, 0x0A	; 10
    183a:	31 05       	cpc	r19, r1
    183c:	01 f5       	brne	.+64     	; 0x187e <_ZN5Print5printEli+0x7c>
    183e:	77 ff       	sbrs	r23, 7
    1840:	1d c0       	rjmp	.+58     	; 0x187c <_ZN5Print5printEli+0x7a>
    1842:	6a 01       	movw	r12, r20
    1844:	7b 01       	movw	r14, r22
    1846:	ec 01       	movw	r28, r24
    1848:	6d e2       	ldi	r22, 0x2D	; 45
    184a:	0e 94 88 0b 	call	0x1710	; 0x1710 <_ZN5Print5printEc>
    184e:	8c 01       	movw	r16, r24
    1850:	44 27       	eor	r20, r20
    1852:	55 27       	eor	r21, r21
    1854:	ba 01       	movw	r22, r20
    1856:	4c 19       	sub	r20, r12
    1858:	5d 09       	sbc	r21, r13
    185a:	6e 09       	sbc	r22, r14
    185c:	7f 09       	sbc	r23, r15
    185e:	2a e0       	ldi	r18, 0x0A	; 10
    1860:	ce 01       	movw	r24, r28
    1862:	0e 94 a5 0b 	call	0x174a	; 0x174a <_ZN5Print11printNumberEmh>
    1866:	80 0f       	add	r24, r16
    1868:	91 1f       	adc	r25, r17
    186a:	df 91       	pop	r29
    186c:	cf 91       	pop	r28
    186e:	1f 91       	pop	r17
    1870:	0f 91       	pop	r16
    1872:	ff 90       	pop	r15
    1874:	ef 90       	pop	r14
    1876:	df 90       	pop	r13
    1878:	cf 90       	pop	r12
    187a:	08 95       	ret
    187c:	2a e0       	ldi	r18, 0x0A	; 10
    187e:	df 91       	pop	r29
    1880:	cf 91       	pop	r28
    1882:	1f 91       	pop	r17
    1884:	0f 91       	pop	r16
    1886:	ff 90       	pop	r15
    1888:	ef 90       	pop	r14
    188a:	df 90       	pop	r13
    188c:	cf 90       	pop	r12
    188e:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <_ZN5Print11printNumberEmh>

00001892 <_ZN5Print5printEii>:
    1892:	9a 01       	movw	r18, r20
    1894:	ab 01       	movw	r20, r22
    1896:	77 0f       	add	r23, r23
    1898:	66 0b       	sbc	r22, r22
    189a:	77 0b       	sbc	r23, r23
    189c:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <_ZN5Print5printEli>

000018a0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    18a0:	7f 92       	push	r7
    18a2:	8f 92       	push	r8
    18a4:	9f 92       	push	r9
    18a6:	af 92       	push	r10
    18a8:	bf 92       	push	r11
    18aa:	cf 92       	push	r12
    18ac:	df 92       	push	r13
    18ae:	ef 92       	push	r14
    18b0:	ff 92       	push	r15
    18b2:	0f 93       	push	r16
    18b4:	1f 93       	push	r17
    18b6:	cf 93       	push	r28
    18b8:	df 93       	push	r29
    18ba:	8c 01       	movw	r16, r24
    18bc:	6a 01       	movw	r12, r20
    18be:	7b 01       	movw	r14, r22
    18c0:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    18c2:	9a 01       	movw	r18, r20
    18c4:	ab 01       	movw	r20, r22
    18c6:	c7 01       	movw	r24, r14
    18c8:	b6 01       	movw	r22, r12
    18ca:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__unordsf2>
    18ce:	88 23       	and	r24, r24
    18d0:	19 f0       	breq	.+6      	; 0x18d8 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    18d2:	6d ee       	ldi	r22, 0xED	; 237
    18d4:	71 e0       	ldi	r23, 0x01	; 1
    18d6:	27 c0       	rjmp	.+78     	; 0x1926 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    18d8:	46 01       	movw	r8, r12
    18da:	57 01       	movw	r10, r14
    18dc:	e8 94       	clt
    18de:	b7 f8       	bld	r11, 7
    18e0:	2f ef       	ldi	r18, 0xFF	; 255
    18e2:	3f ef       	ldi	r19, 0xFF	; 255
    18e4:	4f e7       	ldi	r20, 0x7F	; 127
    18e6:	5f e7       	ldi	r21, 0x7F	; 127
    18e8:	c5 01       	movw	r24, r10
    18ea:	b4 01       	movw	r22, r8
    18ec:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__unordsf2>
    18f0:	81 11       	cpse	r24, r1
    18f2:	0d c0       	rjmp	.+26     	; 0x190e <_ZN5Print10printFloatEdh+0x6e>
    18f4:	2f ef       	ldi	r18, 0xFF	; 255
    18f6:	3f ef       	ldi	r19, 0xFF	; 255
    18f8:	4f e7       	ldi	r20, 0x7F	; 127
    18fa:	5f e7       	ldi	r21, 0x7F	; 127
    18fc:	c5 01       	movw	r24, r10
    18fe:	b4 01       	movw	r22, r8
    1900:	0e 94 a1 07 	call	0xf42	; 0xf42 <__cmpsf2>
    1904:	18 16       	cp	r1, r24
    1906:	1c f4       	brge	.+6      	; 0x190e <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1908:	61 ef       	ldi	r22, 0xF1	; 241
    190a:	71 e0       	ldi	r23, 0x01	; 1
    190c:	0c c0       	rjmp	.+24     	; 0x1926 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    190e:	2f ef       	ldi	r18, 0xFF	; 255
    1910:	3f ef       	ldi	r19, 0xFF	; 255
    1912:	4f e7       	ldi	r20, 0x7F	; 127
    1914:	5f e4       	ldi	r21, 0x4F	; 79
    1916:	c7 01       	movw	r24, r14
    1918:	b6 01       	movw	r22, r12
    191a:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__gesf2>
    191e:	18 16       	cp	r1, r24
    1920:	94 f4       	brge	.+36     	; 0x1946 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1922:	65 ef       	ldi	r22, 0xF5	; 245
    1924:	71 e0       	ldi	r23, 0x01	; 1
    1926:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1928:	df 91       	pop	r29
    192a:	cf 91       	pop	r28
    192c:	1f 91       	pop	r17
    192e:	0f 91       	pop	r16
    1930:	ff 90       	pop	r15
    1932:	ef 90       	pop	r14
    1934:	df 90       	pop	r13
    1936:	cf 90       	pop	r12
    1938:	bf 90       	pop	r11
    193a:	af 90       	pop	r10
    193c:	9f 90       	pop	r9
    193e:	8f 90       	pop	r8
    1940:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1942:	0c 94 71 0b 	jmp	0x16e2	; 0x16e2 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    1946:	2f ef       	ldi	r18, 0xFF	; 255
    1948:	3f ef       	ldi	r19, 0xFF	; 255
    194a:	4f e7       	ldi	r20, 0x7F	; 127
    194c:	5f ec       	ldi	r21, 0xCF	; 207
    194e:	c7 01       	movw	r24, r14
    1950:	b6 01       	movw	r22, r12
    1952:	0e 94 a1 07 	call	0xf42	; 0xf42 <__cmpsf2>
    1956:	87 fd       	sbrc	r24, 7
    1958:	e4 cf       	rjmp	.-56     	; 0x1922 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	a9 01       	movw	r20, r18
    1960:	c7 01       	movw	r24, r14
    1962:	b6 01       	movw	r22, r12
    1964:	0e 94 a1 07 	call	0xf42	; 0xf42 <__cmpsf2>
    1968:	87 ff       	sbrs	r24, 7
    196a:	0a c0       	rjmp	.+20     	; 0x1980 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    196c:	6d e2       	ldi	r22, 0x2D	; 45
    196e:	c8 01       	movw	r24, r16
    1970:	0e 94 88 0b 	call	0x1710	; 0x1710 <_ZN5Print5printEc>
    1974:	ec 01       	movw	r28, r24
     number = -number;
    1976:	f7 fa       	bst	r15, 7
    1978:	f0 94       	com	r15
    197a:	f7 f8       	bld	r15, 7
    197c:	f0 94       	com	r15
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1980:	c0 e0       	ldi	r28, 0x00	; 0
    1982:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1984:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1986:	60 e0       	ldi	r22, 0x00	; 0
    1988:	70 e0       	ldi	r23, 0x00	; 0
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    198e:	7b 14       	cp	r7, r11
    1990:	41 f0       	breq	.+16     	; 0x19a2 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	40 e2       	ldi	r20, 0x20	; 32
    1998:	51 e4       	ldi	r21, 0x41	; 65
    199a:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    199e:	b3 94       	inc	r11
    19a0:	f6 cf       	rjmp	.-20     	; 0x198e <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    19a2:	a7 01       	movw	r20, r14
    19a4:	96 01       	movw	r18, r12
    19a6:	0e 94 35 07 	call	0xe6a	; 0xe6a <__addsf3>
    19aa:	6b 01       	movw	r12, r22
    19ac:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    19ae:	0e 94 18 08 	call	0x1030	; 0x1030 <__fixunssfsi>
    19b2:	4b 01       	movw	r8, r22
    19b4:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    19b6:	2a e0       	ldi	r18, 0x0A	; 10
    19b8:	ab 01       	movw	r20, r22
    19ba:	bc 01       	movw	r22, r24
    19bc:	c8 01       	movw	r24, r16
    19be:	0e 94 a5 0b 	call	0x174a	; 0x174a <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    19c2:	c8 0f       	add	r28, r24
    19c4:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    19c6:	77 20       	and	r7, r7
    19c8:	b9 f1       	breq	.+110    	; 0x1a38 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    19ca:	c5 01       	movw	r24, r10
    19cc:	b4 01       	movw	r22, r8
    19ce:	0e 94 47 08 	call	0x108e	; 0x108e <__floatunsisf>
    19d2:	9b 01       	movw	r18, r22
    19d4:	ac 01       	movw	r20, r24
    19d6:	c7 01       	movw	r24, r14
    19d8:	b6 01       	movw	r22, r12
    19da:	0e 94 34 07 	call	0xe68	; 0xe68 <__subsf3>
    19de:	6b 01       	movw	r12, r22
    19e0:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    19e2:	6e e2       	ldi	r22, 0x2E	; 46
    19e4:	c8 01       	movw	r24, r16
    19e6:	0e 94 88 0b 	call	0x1710	; 0x1710 <_ZN5Print5printEc>
    19ea:	c8 0f       	add	r28, r24
    19ec:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	40 e2       	ldi	r20, 0x20	; 32
    19f4:	51 e4       	ldi	r21, 0x41	; 65
    19f6:	c7 01       	movw	r24, r14
    19f8:	b6 01       	movw	r22, r12
    19fa:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__mulsf3>
    19fe:	4b 01       	movw	r8, r22
    1a00:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    1a02:	0e 94 18 08 	call	0x1030	; 0x1030 <__fixunssfsi>
    1a06:	6b 01       	movw	r12, r22
    1a08:	7c 01       	movw	r14, r24
    n += print(toPrint);
    1a0a:	4a e0       	ldi	r20, 0x0A	; 10
    1a0c:	50 e0       	ldi	r21, 0x00	; 0
    1a0e:	c8 01       	movw	r24, r16
    1a10:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN5Print5printEji>
    1a14:	c8 0f       	add	r28, r24
    1a16:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    1a18:	b6 01       	movw	r22, r12
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	0e 94 47 08 	call	0x108e	; 0x108e <__floatunsisf>
    1a22:	9b 01       	movw	r18, r22
    1a24:	ac 01       	movw	r20, r24
    1a26:	c5 01       	movw	r24, r10
    1a28:	b4 01       	movw	r22, r8
    1a2a:	0e 94 34 07 	call	0xe68	; 0xe68 <__subsf3>
    1a2e:	6b 01       	movw	r12, r22
    1a30:	7c 01       	movw	r14, r24
    1a32:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1a34:	71 10       	cpse	r7, r1
    1a36:	db cf       	rjmp	.-74     	; 0x19ee <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1a38:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1a3a:	df 91       	pop	r29
    1a3c:	cf 91       	pop	r28
    1a3e:	1f 91       	pop	r17
    1a40:	0f 91       	pop	r16
    1a42:	ff 90       	pop	r15
    1a44:	ef 90       	pop	r14
    1a46:	df 90       	pop	r13
    1a48:	cf 90       	pop	r12
    1a4a:	bf 90       	pop	r11
    1a4c:	af 90       	pop	r10
    1a4e:	9f 90       	pop	r9
    1a50:	8f 90       	pop	r8
    1a52:	7f 90       	pop	r7
    1a54:	08 95       	ret

00001a56 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1a56:	0c 94 50 0c 	jmp	0x18a0	; 0x18a0 <_ZN5Print10printFloatEdh>

00001a5a <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1a5a:	1f 92       	push	r1
    1a5c:	0f 92       	push	r0
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	0f 92       	push	r0
    1a62:	11 24       	eor	r1, r1
    1a64:	2f 93       	push	r18
    1a66:	3f 93       	push	r19
    1a68:	8f 93       	push	r24
    1a6a:	9f 93       	push	r25
    1a6c:	af 93       	push	r26
    1a6e:	bf 93       	push	r27
    1a70:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <timer0_millis>
    1a74:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <timer0_millis+0x1>
    1a78:	a0 91 8f 03 	lds	r26, 0x038F	; 0x80038f <timer0_millis+0x2>
    1a7c:	b0 91 90 03 	lds	r27, 0x0390	; 0x800390 <timer0_millis+0x3>
    1a80:	30 91 8c 03 	lds	r19, 0x038C	; 0x80038c <timer0_fract>
    1a84:	23 e0       	ldi	r18, 0x03	; 3
    1a86:	23 0f       	add	r18, r19
    1a88:	2d 37       	cpi	r18, 0x7D	; 125
    1a8a:	20 f4       	brcc	.+8      	; 0x1a94 <__vector_16+0x3a>
    1a8c:	01 96       	adiw	r24, 0x01	; 1
    1a8e:	a1 1d       	adc	r26, r1
    1a90:	b1 1d       	adc	r27, r1
    1a92:	05 c0       	rjmp	.+10     	; 0x1a9e <__vector_16+0x44>
    1a94:	26 e8       	ldi	r18, 0x86	; 134
    1a96:	23 0f       	add	r18, r19
    1a98:	02 96       	adiw	r24, 0x02	; 2
    1a9a:	a1 1d       	adc	r26, r1
    1a9c:	b1 1d       	adc	r27, r1
    1a9e:	20 93 8c 03 	sts	0x038C, r18	; 0x80038c <timer0_fract>
    1aa2:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <timer0_millis>
    1aa6:	90 93 8e 03 	sts	0x038E, r25	; 0x80038e <timer0_millis+0x1>
    1aaa:	a0 93 8f 03 	sts	0x038F, r26	; 0x80038f <timer0_millis+0x2>
    1aae:	b0 93 90 03 	sts	0x0390, r27	; 0x800390 <timer0_millis+0x3>
    1ab2:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <timer0_overflow_count>
    1ab6:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <timer0_overflow_count+0x1>
    1aba:	a0 91 93 03 	lds	r26, 0x0393	; 0x800393 <timer0_overflow_count+0x2>
    1abe:	b0 91 94 03 	lds	r27, 0x0394	; 0x800394 <timer0_overflow_count+0x3>
    1ac2:	01 96       	adiw	r24, 0x01	; 1
    1ac4:	a1 1d       	adc	r26, r1
    1ac6:	b1 1d       	adc	r27, r1
    1ac8:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <timer0_overflow_count>
    1acc:	90 93 92 03 	sts	0x0392, r25	; 0x800392 <timer0_overflow_count+0x1>
    1ad0:	a0 93 93 03 	sts	0x0393, r26	; 0x800393 <timer0_overflow_count+0x2>
    1ad4:	b0 93 94 03 	sts	0x0394, r27	; 0x800394 <timer0_overflow_count+0x3>
    1ad8:	bf 91       	pop	r27
    1ada:	af 91       	pop	r26
    1adc:	9f 91       	pop	r25
    1ade:	8f 91       	pop	r24
    1ae0:	3f 91       	pop	r19
    1ae2:	2f 91       	pop	r18
    1ae4:	0f 90       	pop	r0
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	0f 90       	pop	r0
    1aea:	1f 90       	pop	r1
    1aec:	18 95       	reti

00001aee <millis>:
    1aee:	2f b7       	in	r18, 0x3f	; 63
    1af0:	f8 94       	cli
    1af2:	60 91 8d 03 	lds	r22, 0x038D	; 0x80038d <timer0_millis>
    1af6:	70 91 8e 03 	lds	r23, 0x038E	; 0x80038e <timer0_millis+0x1>
    1afa:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <timer0_millis+0x2>
    1afe:	90 91 90 03 	lds	r25, 0x0390	; 0x800390 <timer0_millis+0x3>
    1b02:	2f bf       	out	0x3f, r18	; 63
    1b04:	08 95       	ret

00001b06 <micros>:
    1b06:	3f b7       	in	r19, 0x3f	; 63
    1b08:	f8 94       	cli
    1b0a:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <timer0_overflow_count>
    1b0e:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <timer0_overflow_count+0x1>
    1b12:	a0 91 93 03 	lds	r26, 0x0393	; 0x800393 <timer0_overflow_count+0x2>
    1b16:	b0 91 94 03 	lds	r27, 0x0394	; 0x800394 <timer0_overflow_count+0x3>
    1b1a:	26 b5       	in	r18, 0x26	; 38
    1b1c:	a8 9b       	sbis	0x15, 0	; 21
    1b1e:	05 c0       	rjmp	.+10     	; 0x1b2a <micros+0x24>
    1b20:	2f 3f       	cpi	r18, 0xFF	; 255
    1b22:	19 f0       	breq	.+6      	; 0x1b2a <micros+0x24>
    1b24:	01 96       	adiw	r24, 0x01	; 1
    1b26:	a1 1d       	adc	r26, r1
    1b28:	b1 1d       	adc	r27, r1
    1b2a:	3f bf       	out	0x3f, r19	; 63
    1b2c:	ba 2f       	mov	r27, r26
    1b2e:	a9 2f       	mov	r26, r25
    1b30:	98 2f       	mov	r25, r24
    1b32:	88 27       	eor	r24, r24
    1b34:	82 0f       	add	r24, r18
    1b36:	91 1d       	adc	r25, r1
    1b38:	a1 1d       	adc	r26, r1
    1b3a:	b1 1d       	adc	r27, r1
    1b3c:	bc 01       	movw	r22, r24
    1b3e:	cd 01       	movw	r24, r26
    1b40:	42 e0       	ldi	r20, 0x02	; 2
    1b42:	66 0f       	add	r22, r22
    1b44:	77 1f       	adc	r23, r23
    1b46:	88 1f       	adc	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	4a 95       	dec	r20
    1b4c:	d1 f7       	brne	.-12     	; 0x1b42 <micros+0x3c>
    1b4e:	08 95       	ret

00001b50 <delay>:
    1b50:	8f 92       	push	r8
    1b52:	9f 92       	push	r9
    1b54:	af 92       	push	r10
    1b56:	bf 92       	push	r11
    1b58:	cf 92       	push	r12
    1b5a:	df 92       	push	r13
    1b5c:	ef 92       	push	r14
    1b5e:	ff 92       	push	r15
    1b60:	6b 01       	movw	r12, r22
    1b62:	7c 01       	movw	r14, r24
    1b64:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <micros>
    1b68:	4b 01       	movw	r8, r22
    1b6a:	5c 01       	movw	r10, r24
    1b6c:	c1 14       	cp	r12, r1
    1b6e:	d1 04       	cpc	r13, r1
    1b70:	e1 04       	cpc	r14, r1
    1b72:	f1 04       	cpc	r15, r1
    1b74:	01 f1       	breq	.+64     	; 0x1bb6 <delay+0x66>
    1b76:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <yield>
    1b7a:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <micros>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	88 19       	sub	r24, r8
    1b84:	99 09       	sbc	r25, r9
    1b86:	aa 09       	sbc	r26, r10
    1b88:	bb 09       	sbc	r27, r11
    1b8a:	88 3e       	cpi	r24, 0xE8	; 232
    1b8c:	93 40       	sbci	r25, 0x03	; 3
    1b8e:	a1 05       	cpc	r26, r1
    1b90:	b1 05       	cpc	r27, r1
    1b92:	60 f3       	brcs	.-40     	; 0x1b6c <delay+0x1c>
    1b94:	21 e0       	ldi	r18, 0x01	; 1
    1b96:	c2 1a       	sub	r12, r18
    1b98:	d1 08       	sbc	r13, r1
    1b9a:	e1 08       	sbc	r14, r1
    1b9c:	f1 08       	sbc	r15, r1
    1b9e:	88 ee       	ldi	r24, 0xE8	; 232
    1ba0:	88 0e       	add	r8, r24
    1ba2:	83 e0       	ldi	r24, 0x03	; 3
    1ba4:	98 1e       	adc	r9, r24
    1ba6:	a1 1c       	adc	r10, r1
    1ba8:	b1 1c       	adc	r11, r1
    1baa:	c1 14       	cp	r12, r1
    1bac:	d1 04       	cpc	r13, r1
    1bae:	e1 04       	cpc	r14, r1
    1bb0:	f1 04       	cpc	r15, r1
    1bb2:	19 f7       	brne	.-58     	; 0x1b7a <delay+0x2a>
    1bb4:	db cf       	rjmp	.-74     	; 0x1b6c <delay+0x1c>
    1bb6:	ff 90       	pop	r15
    1bb8:	ef 90       	pop	r14
    1bba:	df 90       	pop	r13
    1bbc:	cf 90       	pop	r12
    1bbe:	bf 90       	pop	r11
    1bc0:	af 90       	pop	r10
    1bc2:	9f 90       	pop	r9
    1bc4:	8f 90       	pop	r8
    1bc6:	08 95       	ret

00001bc8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1bc8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1bca:	84 b5       	in	r24, 0x24	; 36
    1bcc:	82 60       	ori	r24, 0x02	; 2
    1bce:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1bd0:	84 b5       	in	r24, 0x24	; 36
    1bd2:	81 60       	ori	r24, 0x01	; 1
    1bd4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1bd6:	85 b5       	in	r24, 0x25	; 37
    1bd8:	82 60       	ori	r24, 0x02	; 2
    1bda:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1bdc:	85 b5       	in	r24, 0x25	; 37
    1bde:	81 60       	ori	r24, 0x01	; 1
    1be0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1be2:	ee e6       	ldi	r30, 0x6E	; 110
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	81 60       	ori	r24, 0x01	; 1
    1bea:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1bec:	e1 e8       	ldi	r30, 0x81	; 129
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1bf2:	80 81       	ld	r24, Z
    1bf4:	82 60       	ori	r24, 0x02	; 2
    1bf6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1bf8:	80 81       	ld	r24, Z
    1bfa:	81 60       	ori	r24, 0x01	; 1
    1bfc:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1bfe:	e0 e8       	ldi	r30, 0x80	; 128
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	81 60       	ori	r24, 0x01	; 1
    1c06:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1c08:	e1 eb       	ldi	r30, 0xB1	; 177
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	84 60       	ori	r24, 0x04	; 4
    1c10:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1c12:	e0 eb       	ldi	r30, 0xB0	; 176
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	81 60       	ori	r24, 0x01	; 1
    1c1a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1c1c:	ea e7       	ldi	r30, 0x7A	; 122
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	84 60       	ori	r24, 0x04	; 4
    1c24:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1c26:	80 81       	ld	r24, Z
    1c28:	82 60       	ori	r24, 0x02	; 2
    1c2a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1c2c:	80 81       	ld	r24, Z
    1c2e:	81 60       	ori	r24, 0x01	; 1
    1c30:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1c32:	80 81       	ld	r24, Z
    1c34:	80 68       	ori	r24, 0x80	; 128
    1c36:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1c38:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1c3c:	08 95       	ret

00001c3e <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1c3e:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <_ZN7TwoWire14rxBufferLengthE>
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	20 91 c6 03 	lds	r18, 0x03C6	; 0x8003c6 <_ZN7TwoWire13rxBufferIndexE>
    1c48:	82 1b       	sub	r24, r18
    1c4a:	91 09       	sbc	r25, r1
    1c4c:	08 95       	ret

00001c4e <_ZN7TwoWire4readEv>:
    1c4e:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <_ZN7TwoWire13rxBufferIndexE>
    1c52:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <_ZN7TwoWire14rxBufferLengthE>
    1c56:	98 17       	cp	r25, r24
    1c58:	50 f4       	brcc	.+20     	; 0x1c6e <_ZN7TwoWire4readEv+0x20>
    1c5a:	e9 2f       	mov	r30, r25
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	e9 53       	subi	r30, 0x39	; 57
    1c60:	fc 4f       	sbci	r31, 0xFC	; 252
    1c62:	20 81       	ld	r18, Z
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	9f 5f       	subi	r25, 0xFF	; 255
    1c68:	90 93 c6 03 	sts	0x03C6, r25	; 0x8003c6 <_ZN7TwoWire13rxBufferIndexE>
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <_ZN7TwoWire4readEv+0x24>
    1c6e:	2f ef       	ldi	r18, 0xFF	; 255
    1c70:	3f ef       	ldi	r19, 0xFF	; 255
    1c72:	c9 01       	movw	r24, r18
    1c74:	08 95       	ret

00001c76 <_ZN7TwoWire4peekEv>:
    1c76:	e0 91 c6 03 	lds	r30, 0x03C6	; 0x8003c6 <_ZN7TwoWire13rxBufferIndexE>
    1c7a:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <_ZN7TwoWire14rxBufferLengthE>
    1c7e:	e8 17       	cp	r30, r24
    1c80:	30 f4       	brcc	.+12     	; 0x1c8e <_ZN7TwoWire4peekEv+0x18>
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	e9 53       	subi	r30, 0x39	; 57
    1c86:	fc 4f       	sbci	r31, 0xFC	; 252
    1c88:	80 81       	ld	r24, Z
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	08 95       	ret
    1c8e:	8f ef       	ldi	r24, 0xFF	; 255
    1c90:	9f ef       	ldi	r25, 0xFF	; 255
    1c92:	08 95       	ret

00001c94 <_ZN7TwoWire5flushEv>:
    1c94:	08 95       	ret

00001c96 <_ZN7TwoWire5writeEPKhj>:
    1c96:	cf 92       	push	r12
    1c98:	df 92       	push	r13
    1c9a:	ef 92       	push	r14
    1c9c:	ff 92       	push	r15
    1c9e:	0f 93       	push	r16
    1ca0:	1f 93       	push	r17
    1ca2:	cf 93       	push	r28
    1ca4:	df 93       	push	r29
    1ca6:	7c 01       	movw	r14, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	8a 01       	movw	r16, r20
    1cac:	20 91 a1 03 	lds	r18, 0x03A1	; 0x8003a1 <_ZN7TwoWire12transmittingE>
    1cb0:	22 23       	and	r18, r18
    1cb2:	89 f0       	breq	.+34     	; 0x1cd6 <_ZN7TwoWire5writeEPKhj+0x40>
    1cb4:	eb 01       	movw	r28, r22
    1cb6:	6b 01       	movw	r12, r22
    1cb8:	c4 0e       	add	r12, r20
    1cba:	d5 1e       	adc	r13, r21
    1cbc:	cc 15       	cp	r28, r12
    1cbe:	dd 05       	cpc	r29, r13
    1cc0:	69 f0       	breq	.+26     	; 0x1cdc <_ZN7TwoWire5writeEPKhj+0x46>
    1cc2:	69 91       	ld	r22, Y+
    1cc4:	d7 01       	movw	r26, r14
    1cc6:	ed 91       	ld	r30, X+
    1cc8:	fc 91       	ld	r31, X
    1cca:	01 90       	ld	r0, Z+
    1ccc:	f0 81       	ld	r31, Z
    1cce:	e0 2d       	mov	r30, r0
    1cd0:	c7 01       	movw	r24, r14
    1cd2:	09 95       	icall
    1cd4:	f3 cf       	rjmp	.-26     	; 0x1cbc <_ZN7TwoWire5writeEPKhj+0x26>
    1cd6:	64 2f       	mov	r22, r20
    1cd8:	0e 94 23 10 	call	0x2046	; 0x2046 <twi_transmit>
    1cdc:	c8 01       	movw	r24, r16
    1cde:	df 91       	pop	r29
    1ce0:	cf 91       	pop	r28
    1ce2:	1f 91       	pop	r17
    1ce4:	0f 91       	pop	r16
    1ce6:	ff 90       	pop	r15
    1ce8:	ef 90       	pop	r14
    1cea:	df 90       	pop	r13
    1cec:	cf 90       	pop	r12
    1cee:	08 95       	ret

00001cf0 <_ZN7TwoWire5writeEh>:
    1cf0:	cf 93       	push	r28
    1cf2:	df 93       	push	r29
    1cf4:	1f 92       	push	r1
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	69 83       	std	Y+1, r22	; 0x01
    1cfc:	20 91 a1 03 	lds	r18, 0x03A1	; 0x8003a1 <_ZN7TwoWire12transmittingE>
    1d00:	22 23       	and	r18, r18
    1d02:	d1 f0       	breq	.+52     	; 0x1d38 <_ZN7TwoWire5writeEh+0x48>
    1d04:	20 91 a2 03 	lds	r18, 0x03A2	; 0x8003a2 <_ZN7TwoWire14txBufferLengthE>
    1d08:	20 32       	cpi	r18, 0x20	; 32
    1d0a:	40 f0       	brcs	.+16     	; 0x1d1c <_ZN7TwoWire5writeEh+0x2c>
    1d0c:	21 e0       	ldi	r18, 0x01	; 1
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	fc 01       	movw	r30, r24
    1d12:	33 83       	std	Z+3, r19	; 0x03
    1d14:	22 83       	std	Z+2, r18	; 0x02
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	15 c0       	rjmp	.+42     	; 0x1d46 <_ZN7TwoWire5writeEh+0x56>
    1d1c:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <_ZN7TwoWire13txBufferIndexE>
    1d20:	e8 2f       	mov	r30, r24
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	ec 55       	subi	r30, 0x5C	; 92
    1d26:	fc 4f       	sbci	r31, 0xFC	; 252
    1d28:	99 81       	ldd	r25, Y+1	; 0x01
    1d2a:	90 83       	st	Z, r25
    1d2c:	8f 5f       	subi	r24, 0xFF	; 255
    1d2e:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <_ZN7TwoWire13txBufferIndexE>
    1d32:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <_ZN7TwoWire14txBufferLengthE>
    1d36:	05 c0       	rjmp	.+10     	; 0x1d42 <_ZN7TwoWire5writeEh+0x52>
    1d38:	61 e0       	ldi	r22, 0x01	; 1
    1d3a:	ce 01       	movw	r24, r28
    1d3c:	01 96       	adiw	r24, 0x01	; 1
    1d3e:	0e 94 23 10 	call	0x2046	; 0x2046 <twi_transmit>
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	0f 90       	pop	r0
    1d48:	df 91       	pop	r29
    1d4a:	cf 91       	pop	r28
    1d4c:	08 95       	ret

00001d4e <_ZN7TwoWireC1Ev>:
    1d4e:	fc 01       	movw	r30, r24
    1d50:	13 82       	std	Z+3, r1	; 0x03
    1d52:	12 82       	std	Z+2, r1	; 0x02
    1d54:	88 ee       	ldi	r24, 0xE8	; 232
    1d56:	93 e0       	ldi	r25, 0x03	; 3
    1d58:	a0 e0       	ldi	r26, 0x00	; 0
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	84 83       	std	Z+4, r24	; 0x04
    1d5e:	95 83       	std	Z+5, r25	; 0x05
    1d60:	a6 83       	std	Z+6, r26	; 0x06
    1d62:	b7 83       	std	Z+7, r27	; 0x07
    1d64:	8d ef       	ldi	r24, 0xFD	; 253
    1d66:	91 e0       	ldi	r25, 0x01	; 1
    1d68:	91 83       	std	Z+1, r25	; 0x01
    1d6a:	80 83       	st	Z, r24
    1d6c:	08 95       	ret

00001d6e <_ZN7TwoWire5beginEv>:
    1d6e:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <_ZN7TwoWire13rxBufferIndexE>
    1d72:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <_ZN7TwoWire14rxBufferLengthE>
    1d76:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <_ZN7TwoWire13txBufferIndexE>
    1d7a:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <_ZN7TwoWire14txBufferLengthE>
    1d7e:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <twi_init>

00001d82 <_ZN7TwoWire8setClockEm>:
    1d82:	cb 01       	movw	r24, r22
    1d84:	ba 01       	movw	r22, r20
    1d86:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <twi_setFrequency>

00001d8a <_ZN7TwoWire17beginTransmissionEh>:
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <_ZN7TwoWire12transmittingE>
    1d90:	60 93 c4 03 	sts	0x03C4, r22	; 0x8003c4 <_ZN7TwoWire9txAddressE>
    1d94:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <_ZN7TwoWire13txBufferIndexE>
    1d98:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <_ZN7TwoWire14txBufferLengthE>
    1d9c:	08 95       	ret

00001d9e <_ZN7TwoWire17beginTransmissionEi>:
    1d9e:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <_ZN7TwoWire17beginTransmissionEh>

00001da2 <_ZN7TwoWire15endTransmissionEh>:
    1da2:	0f 93       	push	r16
    1da4:	06 2f       	mov	r16, r22
    1da6:	21 e0       	ldi	r18, 0x01	; 1
    1da8:	40 91 a2 03 	lds	r20, 0x03A2	; 0x8003a2 <_ZN7TwoWire14txBufferLengthE>
    1dac:	64 ea       	ldi	r22, 0xA4	; 164
    1dae:	73 e0       	ldi	r23, 0x03	; 3
    1db0:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <_ZN7TwoWire9txAddressE>
    1db4:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <twi_writeTo>
    1db8:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <_ZN7TwoWire13txBufferIndexE>
    1dbc:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <_ZN7TwoWire14txBufferLengthE>
    1dc0:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <_ZN7TwoWire12transmittingE>
    1dc4:	0f 91       	pop	r16
    1dc6:	08 95       	ret

00001dc8 <_ZN7TwoWire11requestFromEhhmhh>:
    1dc8:	4f 92       	push	r4
    1dca:	5f 92       	push	r5
    1dcc:	6f 92       	push	r6
    1dce:	7f 92       	push	r7
    1dd0:	af 92       	push	r10
    1dd2:	bf 92       	push	r11
    1dd4:	cf 92       	push	r12
    1dd6:	ef 92       	push	r14
    1dd8:	ff 92       	push	r15
    1dda:	0f 93       	push	r16
    1ddc:	1f 93       	push	r17
    1dde:	cf 93       	push	r28
    1de0:	df 93       	push	r29
    1de2:	5c 01       	movw	r10, r24
    1de4:	f6 2e       	mov	r15, r22
    1de6:	d4 2f       	mov	r29, r20
    1de8:	28 01       	movw	r4, r16
    1dea:	39 01       	movw	r6, r18
    1dec:	ee 20       	and	r14, r14
    1dee:	21 f1       	breq	.+72     	; 0x1e38 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    1df0:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <_ZN7TwoWire17beginTransmissionEh>
    1df4:	ce 2d       	mov	r28, r14
    1df6:	c4 30       	cpi	r28, 0x04	; 4
    1df8:	08 f0       	brcs	.+2      	; 0x1dfc <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1dfa:	c3 e0       	ldi	r28, 0x03	; 3
    1dfc:	c1 50       	subi	r28, 0x01	; 1
    1dfe:	c0 f0       	brcs	.+48     	; 0x1e30 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    1e00:	28 e0       	ldi	r18, 0x08	; 8
    1e02:	c2 9f       	mul	r28, r18
    1e04:	c0 01       	movw	r24, r0
    1e06:	11 24       	eor	r1, r1
    1e08:	a3 01       	movw	r20, r6
    1e0a:	92 01       	movw	r18, r4
    1e0c:	04 c0       	rjmp	.+8      	; 0x1e16 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    1e0e:	56 95       	lsr	r21
    1e10:	47 95       	ror	r20
    1e12:	37 95       	ror	r19
    1e14:	27 95       	ror	r18
    1e16:	8a 95       	dec	r24
    1e18:	d2 f7       	brpl	.-12     	; 0x1e0e <_ZN7TwoWire11requestFromEhhmhh+0x46>
    1e1a:	ca 01       	movw	r24, r20
    1e1c:	b9 01       	movw	r22, r18
    1e1e:	d5 01       	movw	r26, r10
    1e20:	ed 91       	ld	r30, X+
    1e22:	fc 91       	ld	r31, X
    1e24:	01 90       	ld	r0, Z+
    1e26:	f0 81       	ld	r31, Z
    1e28:	e0 2d       	mov	r30, r0
    1e2a:	c5 01       	movw	r24, r10
    1e2c:	09 95       	icall
    1e2e:	e6 cf       	rjmp	.-52     	; 0x1dfc <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1e30:	60 e0       	ldi	r22, 0x00	; 0
    1e32:	c5 01       	movw	r24, r10
    1e34:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <_ZN7TwoWire15endTransmissionEh>
    1e38:	4d 2f       	mov	r20, r29
    1e3a:	d1 32       	cpi	r29, 0x21	; 33
    1e3c:	08 f0       	brcs	.+2      	; 0x1e40 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    1e3e:	40 e2       	ldi	r20, 0x20	; 32
    1e40:	2c 2d       	mov	r18, r12
    1e42:	67 ec       	ldi	r22, 0xC7	; 199
    1e44:	73 e0       	ldi	r23, 0x03	; 3
    1e46:	8f 2d       	mov	r24, r15
    1e48:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <twi_readFrom>
    1e4c:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <_ZN7TwoWire13rxBufferIndexE>
    1e50:	80 93 c5 03 	sts	0x03C5, r24	; 0x8003c5 <_ZN7TwoWire14rxBufferLengthE>
    1e54:	df 91       	pop	r29
    1e56:	cf 91       	pop	r28
    1e58:	1f 91       	pop	r17
    1e5a:	0f 91       	pop	r16
    1e5c:	ff 90       	pop	r15
    1e5e:	ef 90       	pop	r14
    1e60:	cf 90       	pop	r12
    1e62:	bf 90       	pop	r11
    1e64:	af 90       	pop	r10
    1e66:	7f 90       	pop	r7
    1e68:	6f 90       	pop	r6
    1e6a:	5f 90       	pop	r5
    1e6c:	4f 90       	pop	r4
    1e6e:	08 95       	ret

00001e70 <_ZN7TwoWire11requestFromEhhh>:
    1e70:	cf 92       	push	r12
    1e72:	ef 92       	push	r14
    1e74:	0f 93       	push	r16
    1e76:	1f 93       	push	r17
    1e78:	c2 2e       	mov	r12, r18
    1e7a:	e1 2c       	mov	r14, r1
    1e7c:	00 e0       	ldi	r16, 0x00	; 0
    1e7e:	10 e0       	ldi	r17, 0x00	; 0
    1e80:	98 01       	movw	r18, r16
    1e82:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZN7TwoWire11requestFromEhhmhh>
    1e86:	1f 91       	pop	r17
    1e88:	0f 91       	pop	r16
    1e8a:	ef 90       	pop	r14
    1e8c:	cf 90       	pop	r12
    1e8e:	08 95       	ret

00001e90 <_ZN7TwoWire11requestFromEii>:
    1e90:	21 e0       	ldi	r18, 0x01	; 1
    1e92:	0c 94 38 0f 	jmp	0x1e70	; 0x1e70 <_ZN7TwoWire11requestFromEhhh>

00001e96 <_ZN7TwoWire15endTransmissionEv>:
    1e96:	61 e0       	ldi	r22, 0x01	; 1
    1e98:	0c 94 d1 0e 	jmp	0x1da2	; 0x1da2 <_ZN7TwoWire15endTransmissionEh>

00001e9c <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1e9c:	85 e9       	ldi	r24, 0x95	; 149
    1e9e:	93 e0       	ldi	r25, 0x03	; 3
    1ea0:	0c 94 a7 0e 	jmp	0x1d4e	; 0x1d4e <_ZN7TwoWireC1Ev>

00001ea4 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1ea4:	08 95       	ret

00001ea6 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1ea6:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <twi_state>
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <twi_sendStop>
    1eb0:	10 92 51 04 	sts	0x0451, r1	; 0x800451 <twi_inRepStart>
    1eb4:	61 e0       	ldi	r22, 0x01	; 1
    1eb6:	82 e1       	ldi	r24, 0x12	; 18
    1eb8:	0e 94 b1 11 	call	0x2362	; 0x2362 <digitalWrite>
    1ebc:	61 e0       	ldi	r22, 0x01	; 1
    1ebe:	83 e1       	ldi	r24, 0x13	; 19
    1ec0:	0e 94 b1 11 	call	0x2362	; 0x2362 <digitalWrite>
    1ec4:	e9 eb       	ldi	r30, 0xB9	; 185
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	8e 7f       	andi	r24, 0xFE	; 254
    1ecc:	80 83       	st	Z, r24
    1ece:	80 81       	ld	r24, Z
    1ed0:	8d 7f       	andi	r24, 0xFD	; 253
    1ed2:	80 83       	st	Z, r24
    1ed4:	88 e4       	ldi	r24, 0x48	; 72
    1ed6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1eda:	85 e4       	ldi	r24, 0x45	; 69
    1edc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1ee0:	08 95       	ret

00001ee2 <twi_setFrequency>:
    1ee2:	9b 01       	movw	r18, r22
    1ee4:	ac 01       	movw	r20, r24
    1ee6:	60 e0       	ldi	r22, 0x00	; 0
    1ee8:	74 e2       	ldi	r23, 0x24	; 36
    1eea:	84 ef       	ldi	r24, 0xF4	; 244
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	0e 94 05 12 	call	0x240a	; 0x240a <__udivmodsi4>
    1ef2:	da 01       	movw	r26, r20
    1ef4:	c9 01       	movw	r24, r18
    1ef6:	40 97       	sbiw	r24, 0x10	; 16
    1ef8:	a1 09       	sbc	r26, r1
    1efa:	b1 09       	sbc	r27, r1
    1efc:	b6 95       	lsr	r27
    1efe:	a7 95       	ror	r26
    1f00:	97 95       	ror	r25
    1f02:	87 95       	ror	r24
    1f04:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1f08:	08 95       	ret

00001f0a <twi_readFrom>:
    1f0a:	41 32       	cpi	r20, 0x21	; 33
    1f0c:	08 f0       	brcs	.+2      	; 0x1f10 <twi_readFrom+0x6>
    1f0e:	43 c0       	rjmp	.+134    	; 0x1f96 <twi_readFrom+0x8c>
    1f10:	90 91 54 04 	lds	r25, 0x0454	; 0x800454 <twi_state>
    1f14:	91 11       	cpse	r25, r1
    1f16:	fc cf       	rjmp	.-8      	; 0x1f10 <twi_readFrom+0x6>
    1f18:	91 e0       	ldi	r25, 0x01	; 1
    1f1a:	90 93 54 04 	sts	0x0454, r25	; 0x800454 <twi_state>
    1f1e:	20 93 52 04 	sts	0x0452, r18	; 0x800452 <twi_sendStop>
    1f22:	2f ef       	ldi	r18, 0xFF	; 255
    1f24:	20 93 e7 03 	sts	0x03E7, r18	; 0x8003e7 <twi_error>
    1f28:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <twi_masterBufferIndex>
    1f2c:	24 0f       	add	r18, r20
    1f2e:	20 93 2b 04 	sts	0x042B, r18	; 0x80042b <twi_masterBufferLength>
    1f32:	90 93 53 04 	sts	0x0453, r25	; 0x800453 <twi_slarw>
    1f36:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <twi_slarw>
    1f3a:	88 0f       	add	r24, r24
    1f3c:	89 2b       	or	r24, r25
    1f3e:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <twi_slarw>
    1f42:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <twi_inRepStart>
    1f46:	81 30       	cpi	r24, 0x01	; 1
    1f48:	61 f4       	brne	.+24     	; 0x1f62 <twi_readFrom+0x58>
    1f4a:	10 92 51 04 	sts	0x0451, r1	; 0x800451 <twi_inRepStart>
    1f4e:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <twi_slarw>
    1f52:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1f56:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1f5a:	83 fd       	sbrc	r24, 3
    1f5c:	f8 cf       	rjmp	.-16     	; 0x1f4e <twi_readFrom+0x44>
    1f5e:	85 ec       	ldi	r24, 0xC5	; 197
    1f60:	01 c0       	rjmp	.+2      	; 0x1f64 <twi_readFrom+0x5a>
    1f62:	85 ee       	ldi	r24, 0xE5	; 229
    1f64:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1f68:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <twi_state>
    1f6c:	81 30       	cpi	r24, 0x01	; 1
    1f6e:	e1 f3       	breq	.-8      	; 0x1f68 <twi_readFrom+0x5e>
    1f70:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <twi_masterBufferIndex>
    1f74:	84 17       	cp	r24, r20
    1f76:	10 f4       	brcc	.+4      	; 0x1f7c <twi_readFrom+0x72>
    1f78:	40 91 2c 04 	lds	r20, 0x042C	; 0x80042c <twi_masterBufferIndex>
    1f7c:	ad e2       	ldi	r26, 0x2D	; 45
    1f7e:	b4 e0       	ldi	r27, 0x04	; 4
    1f80:	96 2f       	mov	r25, r22
    1f82:	fb 01       	movw	r30, r22
    1f84:	8e 2f       	mov	r24, r30
    1f86:	89 1b       	sub	r24, r25
    1f88:	84 17       	cp	r24, r20
    1f8a:	18 f4       	brcc	.+6      	; 0x1f92 <twi_readFrom+0x88>
    1f8c:	8d 91       	ld	r24, X+
    1f8e:	81 93       	st	Z+, r24
    1f90:	f9 cf       	rjmp	.-14     	; 0x1f84 <twi_readFrom+0x7a>
    1f92:	84 2f       	mov	r24, r20
    1f94:	08 95       	ret
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	08 95       	ret

00001f9a <twi_writeTo>:
    1f9a:	0f 93       	push	r16
    1f9c:	41 32       	cpi	r20, 0x21	; 33
    1f9e:	08 f0       	brcs	.+2      	; 0x1fa2 <twi_writeTo+0x8>
    1fa0:	4a c0       	rjmp	.+148    	; 0x2036 <twi_writeTo+0x9c>
    1fa2:	90 91 54 04 	lds	r25, 0x0454	; 0x800454 <twi_state>
    1fa6:	91 11       	cpse	r25, r1
    1fa8:	fc cf       	rjmp	.-8      	; 0x1fa2 <twi_writeTo+0x8>
    1faa:	32 e0       	ldi	r19, 0x02	; 2
    1fac:	30 93 54 04 	sts	0x0454, r19	; 0x800454 <twi_state>
    1fb0:	00 93 52 04 	sts	0x0452, r16	; 0x800452 <twi_sendStop>
    1fb4:	3f ef       	ldi	r19, 0xFF	; 255
    1fb6:	30 93 e7 03 	sts	0x03E7, r19	; 0x8003e7 <twi_error>
    1fba:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <twi_masterBufferIndex>
    1fbe:	40 93 2b 04 	sts	0x042B, r20	; 0x80042b <twi_masterBufferLength>
    1fc2:	56 2f       	mov	r21, r22
    1fc4:	ad e2       	ldi	r26, 0x2D	; 45
    1fc6:	b4 e0       	ldi	r27, 0x04	; 4
    1fc8:	fb 01       	movw	r30, r22
    1fca:	3e 2f       	mov	r19, r30
    1fcc:	35 1b       	sub	r19, r21
    1fce:	34 17       	cp	r19, r20
    1fd0:	18 f4       	brcc	.+6      	; 0x1fd8 <twi_writeTo+0x3e>
    1fd2:	31 91       	ld	r19, Z+
    1fd4:	3d 93       	st	X+, r19
    1fd6:	f9 cf       	rjmp	.-14     	; 0x1fca <twi_writeTo+0x30>
    1fd8:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <twi_slarw>
    1fdc:	30 91 53 04 	lds	r19, 0x0453	; 0x800453 <twi_slarw>
    1fe0:	88 0f       	add	r24, r24
    1fe2:	83 2b       	or	r24, r19
    1fe4:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <twi_slarw>
    1fe8:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <twi_inRepStart>
    1fec:	81 30       	cpi	r24, 0x01	; 1
    1fee:	61 f4       	brne	.+24     	; 0x2008 <twi_writeTo+0x6e>
    1ff0:	10 92 51 04 	sts	0x0451, r1	; 0x800451 <twi_inRepStart>
    1ff4:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <twi_slarw>
    1ff8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1ffc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2000:	83 fd       	sbrc	r24, 3
    2002:	f8 cf       	rjmp	.-16     	; 0x1ff4 <twi_writeTo+0x5a>
    2004:	85 ec       	ldi	r24, 0xC5	; 197
    2006:	01 c0       	rjmp	.+2      	; 0x200a <twi_writeTo+0x70>
    2008:	85 ee       	ldi	r24, 0xE5	; 229
    200a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    200e:	22 23       	and	r18, r18
    2010:	21 f0       	breq	.+8      	; 0x201a <twi_writeTo+0x80>
    2012:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <twi_state>
    2016:	82 30       	cpi	r24, 0x02	; 2
    2018:	d1 f3       	breq	.-12     	; 0x200e <twi_writeTo+0x74>
    201a:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <twi_error>
    201e:	8f 3f       	cpi	r24, 0xFF	; 255
    2020:	79 f0       	breq	.+30     	; 0x2040 <twi_writeTo+0xa6>
    2022:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <twi_error>
    2026:	80 32       	cpi	r24, 0x20	; 32
    2028:	41 f0       	breq	.+16     	; 0x203a <twi_writeTo+0xa0>
    202a:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <twi_error>
    202e:	80 33       	cpi	r24, 0x30	; 48
    2030:	31 f0       	breq	.+12     	; 0x203e <twi_writeTo+0xa4>
    2032:	94 e0       	ldi	r25, 0x04	; 4
    2034:	05 c0       	rjmp	.+10     	; 0x2040 <twi_writeTo+0xa6>
    2036:	91 e0       	ldi	r25, 0x01	; 1
    2038:	03 c0       	rjmp	.+6      	; 0x2040 <twi_writeTo+0xa6>
    203a:	92 e0       	ldi	r25, 0x02	; 2
    203c:	01 c0       	rjmp	.+2      	; 0x2040 <twi_writeTo+0xa6>
    203e:	93 e0       	ldi	r25, 0x03	; 3
    2040:	89 2f       	mov	r24, r25
    2042:	0f 91       	pop	r16
    2044:	08 95       	ret

00002046 <twi_transmit>:
    2046:	40 91 09 04 	lds	r20, 0x0409	; 0x800409 <twi_txBufferLength>
    204a:	26 2f       	mov	r18, r22
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	24 0f       	add	r18, r20
    2050:	31 1d       	adc	r19, r1
    2052:	21 32       	cpi	r18, 0x21	; 33
    2054:	31 05       	cpc	r19, r1
    2056:	dc f4       	brge	.+54     	; 0x208e <twi_transmit+0x48>
    2058:	20 91 54 04 	lds	r18, 0x0454	; 0x800454 <twi_state>
    205c:	24 30       	cpi	r18, 0x04	; 4
    205e:	c9 f4       	brne	.+50     	; 0x2092 <twi_transmit+0x4c>
    2060:	fc 01       	movw	r30, r24
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	86 17       	cp	r24, r22
    2068:	58 f4       	brcc	.+22     	; 0x2080 <twi_transmit+0x3a>
    206a:	30 91 09 04 	lds	r19, 0x0409	; 0x800409 <twi_txBufferLength>
    206e:	21 91       	ld	r18, Z+
    2070:	dc 01       	movw	r26, r24
    2072:	a5 5f       	subi	r26, 0xF5	; 245
    2074:	bb 4f       	sbci	r27, 0xFB	; 251
    2076:	a3 0f       	add	r26, r19
    2078:	b1 1d       	adc	r27, r1
    207a:	2c 93       	st	X, r18
    207c:	01 96       	adiw	r24, 0x01	; 1
    207e:	f3 cf       	rjmp	.-26     	; 0x2066 <twi_transmit+0x20>
    2080:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <twi_txBufferLength>
    2084:	68 0f       	add	r22, r24
    2086:	60 93 09 04 	sts	0x0409, r22	; 0x800409 <twi_txBufferLength>
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	08 95       	ret
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	08 95       	ret
    2092:	82 e0       	ldi	r24, 0x02	; 2
    2094:	08 95       	ret

00002096 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2096:	85 ed       	ldi	r24, 0xD5	; 213
    2098:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    209c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    20a0:	84 fd       	sbrc	r24, 4
    20a2:	fc cf       	rjmp	.-8      	; 0x209c <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    20a4:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <twi_state>
    20a8:	08 95       	ret

000020aa <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    20aa:	85 ec       	ldi	r24, 0xC5	; 197
    20ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    20b0:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <twi_state>
    20b4:	08 95       	ret

000020b6 <__vector_24>:
}

ISR(TWI_vect)
{
    20b6:	1f 92       	push	r1
    20b8:	0f 92       	push	r0
    20ba:	0f b6       	in	r0, 0x3f	; 63
    20bc:	0f 92       	push	r0
    20be:	11 24       	eor	r1, r1
    20c0:	2f 93       	push	r18
    20c2:	3f 93       	push	r19
    20c4:	4f 93       	push	r20
    20c6:	5f 93       	push	r21
    20c8:	6f 93       	push	r22
    20ca:	7f 93       	push	r23
    20cc:	8f 93       	push	r24
    20ce:	9f 93       	push	r25
    20d0:	af 93       	push	r26
    20d2:	bf 93       	push	r27
    20d4:	ef 93       	push	r30
    20d6:	ff 93       	push	r31
  switch(TW_STATUS){
    20d8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    20dc:	88 7f       	andi	r24, 0xF8	; 248
    20de:	80 36       	cpi	r24, 0x60	; 96
    20e0:	09 f4       	brne	.+2      	; 0x20e4 <__vector_24+0x2e>
    20e2:	9e c0       	rjmp	.+316    	; 0x2220 <__vector_24+0x16a>
    20e4:	78 f5       	brcc	.+94     	; 0x2144 <__vector_24+0x8e>
    20e6:	88 32       	cpi	r24, 0x28	; 40
    20e8:	09 f4       	brne	.+2      	; 0x20ec <__vector_24+0x36>
    20ea:	5d c0       	rjmp	.+186    	; 0x21a6 <__vector_24+0xf0>
    20ec:	90 f4       	brcc	.+36     	; 0x2112 <__vector_24+0x5c>
    20ee:	80 31       	cpi	r24, 0x10	; 16
    20f0:	09 f4       	brne	.+2      	; 0x20f4 <__vector_24+0x3e>
    20f2:	56 c0       	rjmp	.+172    	; 0x21a0 <__vector_24+0xea>
    20f4:	38 f4       	brcc	.+14     	; 0x2104 <__vector_24+0x4e>
    20f6:	88 23       	and	r24, r24
    20f8:	09 f4       	brne	.+2      	; 0x20fc <__vector_24+0x46>
    20fa:	f5 c0       	rjmp	.+490    	; 0x22e6 <__vector_24+0x230>
    20fc:	88 30       	cpi	r24, 0x08	; 8
    20fe:	09 f4       	brne	.+2      	; 0x2102 <__vector_24+0x4c>
    2100:	4f c0       	rjmp	.+158    	; 0x21a0 <__vector_24+0xea>
    2102:	f5 c0       	rjmp	.+490    	; 0x22ee <__vector_24+0x238>
    2104:	88 31       	cpi	r24, 0x18	; 24
    2106:	09 f4       	brne	.+2      	; 0x210a <__vector_24+0x54>
    2108:	4e c0       	rjmp	.+156    	; 0x21a6 <__vector_24+0xf0>
    210a:	80 32       	cpi	r24, 0x20	; 32
    210c:	09 f4       	brne	.+2      	; 0x2110 <__vector_24+0x5a>
    210e:	5f c0       	rjmp	.+190    	; 0x21ce <__vector_24+0x118>
    2110:	ee c0       	rjmp	.+476    	; 0x22ee <__vector_24+0x238>
    2112:	80 34       	cpi	r24, 0x40	; 64
    2114:	09 f4       	brne	.+2      	; 0x2118 <__vector_24+0x62>
    2116:	6a c0       	rjmp	.+212    	; 0x21ec <__vector_24+0x136>
    2118:	58 f4       	brcc	.+22     	; 0x2130 <__vector_24+0x7a>
    211a:	80 33       	cpi	r24, 0x30	; 48
    211c:	09 f4       	brne	.+2      	; 0x2120 <__vector_24+0x6a>
    211e:	57 c0       	rjmp	.+174    	; 0x21ce <__vector_24+0x118>
    2120:	88 33       	cpi	r24, 0x38	; 56
    2122:	09 f0       	breq	.+2      	; 0x2126 <__vector_24+0x70>
    2124:	e4 c0       	rjmp	.+456    	; 0x22ee <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2126:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <twi_error>
      twi_releaseBus();
    212a:	0e 94 55 10 	call	0x20aa	; 0x20aa <twi_releaseBus>
      break;
    212e:	df c0       	rjmp	.+446    	; 0x22ee <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2130:	80 35       	cpi	r24, 0x50	; 80
    2132:	09 f4       	brne	.+2      	; 0x2136 <__vector_24+0x80>
    2134:	4f c0       	rjmp	.+158    	; 0x21d4 <__vector_24+0x11e>
    2136:	88 35       	cpi	r24, 0x58	; 88
    2138:	09 f4       	brne	.+2      	; 0x213c <__vector_24+0x86>
    213a:	5d c0       	rjmp	.+186    	; 0x21f6 <__vector_24+0x140>
    213c:	88 34       	cpi	r24, 0x48	; 72
    213e:	09 f0       	breq	.+2      	; 0x2142 <__vector_24+0x8c>
    2140:	d6 c0       	rjmp	.+428    	; 0x22ee <__vector_24+0x238>
    2142:	d3 c0       	rjmp	.+422    	; 0x22ea <__vector_24+0x234>
    2144:	88 39       	cpi	r24, 0x98	; 152
    2146:	09 f4       	brne	.+2      	; 0x214a <__vector_24+0x94>
    2148:	c4 c0       	rjmp	.+392    	; 0x22d2 <__vector_24+0x21c>
    214a:	a8 f4       	brcc	.+42     	; 0x2176 <__vector_24+0xc0>
    214c:	88 37       	cpi	r24, 0x78	; 120
    214e:	09 f4       	brne	.+2      	; 0x2152 <__vector_24+0x9c>
    2150:	67 c0       	rjmp	.+206    	; 0x2220 <__vector_24+0x16a>
    2152:	38 f4       	brcc	.+14     	; 0x2162 <__vector_24+0xac>
    2154:	88 36       	cpi	r24, 0x68	; 104
    2156:	09 f4       	brne	.+2      	; 0x215a <__vector_24+0xa4>
    2158:	63 c0       	rjmp	.+198    	; 0x2220 <__vector_24+0x16a>
    215a:	80 37       	cpi	r24, 0x70	; 112
    215c:	09 f4       	brne	.+2      	; 0x2160 <__vector_24+0xaa>
    215e:	60 c0       	rjmp	.+192    	; 0x2220 <__vector_24+0x16a>
    2160:	c6 c0       	rjmp	.+396    	; 0x22ee <__vector_24+0x238>
    2162:	88 38       	cpi	r24, 0x88	; 136
    2164:	09 f4       	brne	.+2      	; 0x2168 <__vector_24+0xb2>
    2166:	b5 c0       	rjmp	.+362    	; 0x22d2 <__vector_24+0x21c>
    2168:	80 39       	cpi	r24, 0x90	; 144
    216a:	09 f4       	brne	.+2      	; 0x216e <__vector_24+0xb8>
    216c:	5f c0       	rjmp	.+190    	; 0x222c <__vector_24+0x176>
    216e:	80 38       	cpi	r24, 0x80	; 128
    2170:	09 f0       	breq	.+2      	; 0x2174 <__vector_24+0xbe>
    2172:	bd c0       	rjmp	.+378    	; 0x22ee <__vector_24+0x238>
    2174:	5b c0       	rjmp	.+182    	; 0x222c <__vector_24+0x176>
    2176:	80 3b       	cpi	r24, 0xB0	; 176
    2178:	09 f4       	brne	.+2      	; 0x217c <__vector_24+0xc6>
    217a:	83 c0       	rjmp	.+262    	; 0x2282 <__vector_24+0x1cc>
    217c:	38 f4       	brcc	.+14     	; 0x218c <__vector_24+0xd6>
    217e:	80 3a       	cpi	r24, 0xA0	; 160
    2180:	09 f4       	brne	.+2      	; 0x2184 <__vector_24+0xce>
    2182:	66 c0       	rjmp	.+204    	; 0x2250 <__vector_24+0x19a>
    2184:	88 3a       	cpi	r24, 0xA8	; 168
    2186:	09 f4       	brne	.+2      	; 0x218a <__vector_24+0xd4>
    2188:	7c c0       	rjmp	.+248    	; 0x2282 <__vector_24+0x1cc>
    218a:	b1 c0       	rjmp	.+354    	; 0x22ee <__vector_24+0x238>
    218c:	80 3c       	cpi	r24, 0xC0	; 192
    218e:	09 f4       	brne	.+2      	; 0x2192 <__vector_24+0xdc>
    2190:	a4 c0       	rjmp	.+328    	; 0x22da <__vector_24+0x224>
    2192:	88 3c       	cpi	r24, 0xC8	; 200
    2194:	09 f4       	brne	.+2      	; 0x2198 <__vector_24+0xe2>
    2196:	a1 c0       	rjmp	.+322    	; 0x22da <__vector_24+0x224>
    2198:	88 3b       	cpi	r24, 0xB8	; 184
    219a:	09 f4       	brne	.+2      	; 0x219e <__vector_24+0xe8>
    219c:	87 c0       	rjmp	.+270    	; 0x22ac <__vector_24+0x1f6>
    219e:	a7 c0       	rjmp	.+334    	; 0x22ee <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    21a0:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <twi_slarw>
    21a4:	10 c0       	rjmp	.+32     	; 0x21c6 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    21a6:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <twi_masterBufferIndex>
    21aa:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <twi_masterBufferLength>
    21ae:	98 17       	cp	r25, r24
    21b0:	70 f5       	brcc	.+92     	; 0x220e <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    21b2:	e0 91 2c 04 	lds	r30, 0x042C	; 0x80042c <twi_masterBufferIndex>
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	8e 0f       	add	r24, r30
    21ba:	80 93 2c 04 	sts	0x042C, r24	; 0x80042c <twi_masterBufferIndex>
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	e3 5d       	subi	r30, 0xD3	; 211
    21c2:	fb 4f       	sbci	r31, 0xFB	; 251
    21c4:	80 81       	ld	r24, Z
    21c6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    21ca:	85 ec       	ldi	r24, 0xC5	; 197
    21cc:	83 c0       	rjmp	.+262    	; 0x22d4 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    21ce:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <twi_error>
    21d2:	8b c0       	rjmp	.+278    	; 0x22ea <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    21d4:	e0 91 2c 04 	lds	r30, 0x042C	; 0x80042c <twi_masterBufferIndex>
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	8e 0f       	add	r24, r30
    21dc:	80 93 2c 04 	sts	0x042C, r24	; 0x80042c <twi_masterBufferIndex>
    21e0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	e3 5d       	subi	r30, 0xD3	; 211
    21e8:	fb 4f       	sbci	r31, 0xFB	; 251
    21ea:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    21ec:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <twi_masterBufferIndex>
    21f0:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <twi_masterBufferLength>
    21f4:	6b c0       	rjmp	.+214    	; 0x22cc <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    21f6:	e0 91 2c 04 	lds	r30, 0x042C	; 0x80042c <twi_masterBufferIndex>
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	8e 0f       	add	r24, r30
    21fe:	80 93 2c 04 	sts	0x042C, r24	; 0x80042c <twi_masterBufferIndex>
    2202:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	e3 5d       	subi	r30, 0xD3	; 211
    220a:	fb 4f       	sbci	r31, 0xFB	; 251
    220c:	80 83       	st	Z, r24
	if (twi_sendStop)
    220e:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <twi_sendStop>
    2212:	81 11       	cpse	r24, r1
    2214:	6a c0       	rjmp	.+212    	; 0x22ea <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    221c:	84 ea       	ldi	r24, 0xA4	; 164
    221e:	5e c0       	rjmp	.+188    	; 0x22dc <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2220:	83 e0       	ldi	r24, 0x03	; 3
    2222:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2226:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <twi_rxBufferIndex>
    222a:	cf cf       	rjmp	.-98     	; 0x21ca <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    222c:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <twi_rxBufferIndex>
    2230:	80 32       	cpi	r24, 0x20	; 32
    2232:	08 f0       	brcs	.+2      	; 0x2236 <__vector_24+0x180>
    2234:	4e c0       	rjmp	.+156    	; 0x22d2 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2236:	e0 91 e8 03 	lds	r30, 0x03E8	; 0x8003e8 <twi_rxBufferIndex>
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	8e 0f       	add	r24, r30
    223e:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <twi_rxBufferIndex>
    2242:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	e7 51       	subi	r30, 0x17	; 23
    224a:	fc 4f       	sbci	r31, 0xFC	; 252
    224c:	80 83       	st	Z, r24
    224e:	bd cf       	rjmp	.-134    	; 0x21ca <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2250:	0e 94 55 10 	call	0x20aa	; 0x20aa <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2254:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <twi_rxBufferIndex>
    2258:	80 32       	cpi	r24, 0x20	; 32
    225a:	30 f4       	brcc	.+12     	; 0x2268 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    225c:	e0 91 e8 03 	lds	r30, 0x03E8	; 0x8003e8 <twi_rxBufferIndex>
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	e7 51       	subi	r30, 0x17	; 23
    2264:	fc 4f       	sbci	r31, 0xFC	; 252
    2266:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2268:	60 91 e8 03 	lds	r22, 0x03E8	; 0x8003e8 <twi_rxBufferIndex>
    226c:	70 e0       	ldi	r23, 0x00	; 0
    226e:	e0 91 4d 04 	lds	r30, 0x044D	; 0x80044d <twi_onSlaveReceive>
    2272:	f0 91 4e 04 	lds	r31, 0x044E	; 0x80044e <twi_onSlaveReceive+0x1>
    2276:	89 ee       	ldi	r24, 0xE9	; 233
    2278:	93 e0       	ldi	r25, 0x03	; 3
    227a:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    227c:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <twi_rxBufferIndex>
      break;
    2280:	36 c0       	rjmp	.+108    	; 0x22ee <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2282:	84 e0       	ldi	r24, 0x04	; 4
    2284:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2288:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    228c:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2290:	e0 91 4f 04 	lds	r30, 0x044F	; 0x80044f <twi_onSlaveTransmit>
    2294:	f0 91 50 04 	lds	r31, 0x0450	; 0x800450 <twi_onSlaveTransmit+0x1>
    2298:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    229a:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <twi_txBufferLength>
    229e:	81 11       	cpse	r24, r1
    22a0:	05 c0       	rjmp	.+10     	; 0x22ac <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    22a8:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    22ac:	e0 91 0a 04 	lds	r30, 0x040A	; 0x80040a <twi_txBufferIndex>
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	8e 0f       	add	r24, r30
    22b4:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <twi_txBufferIndex>
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	e5 5f       	subi	r30, 0xF5	; 245
    22bc:	fb 4f       	sbci	r31, 0xFB	; 251
    22be:	80 81       	ld	r24, Z
    22c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    22c4:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <twi_txBufferIndex>
    22c8:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <twi_txBufferLength>
    22cc:	98 17       	cp	r25, r24
    22ce:	08 f4       	brcc	.+2      	; 0x22d2 <__vector_24+0x21c>
    22d0:	7c cf       	rjmp	.-264    	; 0x21ca <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    22d2:	85 e8       	ldi	r24, 0x85	; 133
    22d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    22d8:	0a c0       	rjmp	.+20     	; 0x22ee <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    22da:	85 ec       	ldi	r24, 0xC5	; 197
    22dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    22e0:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <twi_state>
      break;
    22e4:	04 c0       	rjmp	.+8      	; 0x22ee <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    22e6:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <twi_error>
      twi_stop();
    22ea:	0e 94 4b 10 	call	0x2096	; 0x2096 <twi_stop>
      break;
  }
}
    22ee:	ff 91       	pop	r31
    22f0:	ef 91       	pop	r30
    22f2:	bf 91       	pop	r27
    22f4:	af 91       	pop	r26
    22f6:	9f 91       	pop	r25
    22f8:	8f 91       	pop	r24
    22fa:	7f 91       	pop	r23
    22fc:	6f 91       	pop	r22
    22fe:	5f 91       	pop	r21
    2300:	4f 91       	pop	r20
    2302:	3f 91       	pop	r19
    2304:	2f 91       	pop	r18
    2306:	0f 90       	pop	r0
    2308:	0f be       	out	0x3f, r0	; 63
    230a:	0f 90       	pop	r0
    230c:	1f 90       	pop	r1
    230e:	18 95       	reti

00002310 <turnOffPWM>:
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
    2310:	83 30       	cpi	r24, 0x03	; 3
    2312:	81 f0       	breq	.+32     	; 0x2334 <turnOffPWM+0x24>
    2314:	28 f4       	brcc	.+10     	; 0x2320 <turnOffPWM+0x10>
    2316:	81 30       	cpi	r24, 0x01	; 1
    2318:	99 f0       	breq	.+38     	; 0x2340 <turnOffPWM+0x30>
    231a:	82 30       	cpi	r24, 0x02	; 2
    231c:	a1 f0       	breq	.+40     	; 0x2346 <turnOffPWM+0x36>
    231e:	08 95       	ret
    2320:	87 30       	cpi	r24, 0x07	; 7
    2322:	a9 f0       	breq	.+42     	; 0x234e <turnOffPWM+0x3e>
    2324:	88 30       	cpi	r24, 0x08	; 8
    2326:	b9 f0       	breq	.+46     	; 0x2356 <turnOffPWM+0x46>
    2328:	84 30       	cpi	r24, 0x04	; 4
    232a:	d1 f4       	brne	.+52     	; 0x2360 <turnOffPWM+0x50>
    232c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2330:	8f 7d       	andi	r24, 0xDF	; 223
    2332:	03 c0       	rjmp	.+6      	; 0x233a <turnOffPWM+0x2a>
    2334:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2338:	8f 77       	andi	r24, 0x7F	; 127
    233a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    233e:	08 95       	ret
    2340:	84 b5       	in	r24, 0x24	; 36
    2342:	8f 77       	andi	r24, 0x7F	; 127
    2344:	02 c0       	rjmp	.+4      	; 0x234a <turnOffPWM+0x3a>
    2346:	84 b5       	in	r24, 0x24	; 36
    2348:	8f 7d       	andi	r24, 0xDF	; 223
    234a:	84 bd       	out	0x24, r24	; 36
    234c:	08 95       	ret
    234e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2352:	8f 77       	andi	r24, 0x7F	; 127
    2354:	03 c0       	rjmp	.+6      	; 0x235c <turnOffPWM+0x4c>
    2356:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    235a:	8f 7d       	andi	r24, 0xDF	; 223
    235c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2360:	08 95       	ret

00002362 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2362:	1f 93       	push	r17
    2364:	cf 93       	push	r28
    2366:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2368:	28 2f       	mov	r18, r24
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	f9 01       	movw	r30, r18
    236e:	e8 59       	subi	r30, 0x98	; 152
    2370:	ff 4f       	sbci	r31, 0xFF	; 255
    2372:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2374:	f9 01       	movw	r30, r18
    2376:	e4 58       	subi	r30, 0x84	; 132
    2378:	ff 4f       	sbci	r31, 0xFF	; 255
    237a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    237c:	f9 01       	movw	r30, r18
    237e:	e0 57       	subi	r30, 0x70	; 112
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2384:	cc 23       	and	r28, r28
    2386:	c1 f0       	breq	.+48     	; 0x23b8 <digitalWrite+0x56>
    2388:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    238a:	81 11       	cpse	r24, r1
    238c:	0e 94 88 11 	call	0x2310	; 0x2310 <turnOffPWM>

	out = portOutputRegister(port);
    2390:	ec 2f       	mov	r30, r28
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	ee 0f       	add	r30, r30
    2396:	ff 1f       	adc	r31, r31
    2398:	ec 55       	subi	r30, 0x5C	; 92
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	a5 91       	lpm	r26, Z+
    239e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    23a0:	9f b7       	in	r25, 0x3f	; 63
	cli();
    23a2:	f8 94       	cli

	if (val == LOW) {
    23a4:	11 11       	cpse	r17, r1
    23a6:	04 c0       	rjmp	.+8      	; 0x23b0 <digitalWrite+0x4e>
		*out &= ~bit;
    23a8:	8c 91       	ld	r24, X
    23aa:	d0 95       	com	r29
    23ac:	d8 23       	and	r29, r24
    23ae:	02 c0       	rjmp	.+4      	; 0x23b4 <digitalWrite+0x52>
	} else {
		*out |= bit;
    23b0:	ec 91       	ld	r30, X
    23b2:	de 2b       	or	r29, r30
    23b4:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    23b6:	9f bf       	out	0x3f, r25	; 63
}
    23b8:	df 91       	pop	r29
    23ba:	cf 91       	pop	r28
    23bc:	1f 91       	pop	r17
    23be:	08 95       	ret

000023c0 <__unordsf2>:
    23c0:	0e 94 84 08 	call	0x1108	; 0x1108 <__fp_cmp>
    23c4:	88 0b       	sbc	r24, r24
    23c6:	99 0b       	sbc	r25, r25
    23c8:	08 95       	ret

000023ca <__udivmodqi4>:
    23ca:	99 1b       	sub	r25, r25
    23cc:	79 e0       	ldi	r23, 0x09	; 9
    23ce:	04 c0       	rjmp	.+8      	; 0x23d8 <__udivmodqi4_ep>

000023d0 <__udivmodqi4_loop>:
    23d0:	99 1f       	adc	r25, r25
    23d2:	96 17       	cp	r25, r22
    23d4:	08 f0       	brcs	.+2      	; 0x23d8 <__udivmodqi4_ep>
    23d6:	96 1b       	sub	r25, r22

000023d8 <__udivmodqi4_ep>:
    23d8:	88 1f       	adc	r24, r24
    23da:	7a 95       	dec	r23
    23dc:	c9 f7       	brne	.-14     	; 0x23d0 <__udivmodqi4_loop>
    23de:	80 95       	com	r24
    23e0:	08 95       	ret

000023e2 <__divmodhi4>:
    23e2:	97 fb       	bst	r25, 7
    23e4:	07 2e       	mov	r0, r23
    23e6:	16 f4       	brtc	.+4      	; 0x23ec <__divmodhi4+0xa>
    23e8:	00 94       	com	r0
    23ea:	07 d0       	rcall	.+14     	; 0x23fa <__divmodhi4_neg1>
    23ec:	77 fd       	sbrc	r23, 7
    23ee:	09 d0       	rcall	.+18     	; 0x2402 <__divmodhi4_neg2>
    23f0:	0e 94 45 12 	call	0x248a	; 0x248a <__udivmodhi4>
    23f4:	07 fc       	sbrc	r0, 7
    23f6:	05 d0       	rcall	.+10     	; 0x2402 <__divmodhi4_neg2>
    23f8:	3e f4       	brtc	.+14     	; 0x2408 <__divmodhi4_exit>

000023fa <__divmodhi4_neg1>:
    23fa:	90 95       	com	r25
    23fc:	81 95       	neg	r24
    23fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2400:	08 95       	ret

00002402 <__divmodhi4_neg2>:
    2402:	70 95       	com	r23
    2404:	61 95       	neg	r22
    2406:	7f 4f       	sbci	r23, 0xFF	; 255

00002408 <__divmodhi4_exit>:
    2408:	08 95       	ret

0000240a <__udivmodsi4>:
    240a:	a1 e2       	ldi	r26, 0x21	; 33
    240c:	1a 2e       	mov	r1, r26
    240e:	aa 1b       	sub	r26, r26
    2410:	bb 1b       	sub	r27, r27
    2412:	fd 01       	movw	r30, r26
    2414:	0d c0       	rjmp	.+26     	; 0x2430 <__udivmodsi4_ep>

00002416 <__udivmodsi4_loop>:
    2416:	aa 1f       	adc	r26, r26
    2418:	bb 1f       	adc	r27, r27
    241a:	ee 1f       	adc	r30, r30
    241c:	ff 1f       	adc	r31, r31
    241e:	a2 17       	cp	r26, r18
    2420:	b3 07       	cpc	r27, r19
    2422:	e4 07       	cpc	r30, r20
    2424:	f5 07       	cpc	r31, r21
    2426:	20 f0       	brcs	.+8      	; 0x2430 <__udivmodsi4_ep>
    2428:	a2 1b       	sub	r26, r18
    242a:	b3 0b       	sbc	r27, r19
    242c:	e4 0b       	sbc	r30, r20
    242e:	f5 0b       	sbc	r31, r21

00002430 <__udivmodsi4_ep>:
    2430:	66 1f       	adc	r22, r22
    2432:	77 1f       	adc	r23, r23
    2434:	88 1f       	adc	r24, r24
    2436:	99 1f       	adc	r25, r25
    2438:	1a 94       	dec	r1
    243a:	69 f7       	brne	.-38     	; 0x2416 <__udivmodsi4_loop>
    243c:	60 95       	com	r22
    243e:	70 95       	com	r23
    2440:	80 95       	com	r24
    2442:	90 95       	com	r25
    2444:	9b 01       	movw	r18, r22
    2446:	ac 01       	movw	r20, r24
    2448:	bd 01       	movw	r22, r26
    244a:	cf 01       	movw	r24, r30
    244c:	08 95       	ret

0000244e <__mulhisi3>:
    244e:	0e 94 2f 12 	call	0x245e	; 0x245e <__umulhisi3>
    2452:	33 23       	and	r19, r19
    2454:	12 f4       	brpl	.+4      	; 0x245a <__mulhisi3+0xc>
    2456:	8a 1b       	sub	r24, r26
    2458:	9b 0b       	sbc	r25, r27
    245a:	0c 94 40 12 	jmp	0x2480	; 0x2480 <__usmulhisi3_tail>

0000245e <__umulhisi3>:
    245e:	a2 9f       	mul	r26, r18
    2460:	b0 01       	movw	r22, r0
    2462:	b3 9f       	mul	r27, r19
    2464:	c0 01       	movw	r24, r0
    2466:	a3 9f       	mul	r26, r19
    2468:	70 0d       	add	r23, r0
    246a:	81 1d       	adc	r24, r1
    246c:	11 24       	eor	r1, r1
    246e:	91 1d       	adc	r25, r1
    2470:	b2 9f       	mul	r27, r18
    2472:	70 0d       	add	r23, r0
    2474:	81 1d       	adc	r24, r1
    2476:	11 24       	eor	r1, r1
    2478:	91 1d       	adc	r25, r1
    247a:	08 95       	ret

0000247c <__usmulhisi3>:
    247c:	0e 94 2f 12 	call	0x245e	; 0x245e <__umulhisi3>

00002480 <__usmulhisi3_tail>:
    2480:	b7 ff       	sbrs	r27, 7
    2482:	08 95       	ret
    2484:	82 1b       	sub	r24, r18
    2486:	93 0b       	sbc	r25, r19
    2488:	08 95       	ret

0000248a <__udivmodhi4>:
    248a:	aa 1b       	sub	r26, r26
    248c:	bb 1b       	sub	r27, r27
    248e:	51 e1       	ldi	r21, 0x11	; 17
    2490:	07 c0       	rjmp	.+14     	; 0x24a0 <__udivmodhi4_ep>

00002492 <__udivmodhi4_loop>:
    2492:	aa 1f       	adc	r26, r26
    2494:	bb 1f       	adc	r27, r27
    2496:	a6 17       	cp	r26, r22
    2498:	b7 07       	cpc	r27, r23
    249a:	10 f0       	brcs	.+4      	; 0x24a0 <__udivmodhi4_ep>
    249c:	a6 1b       	sub	r26, r22
    249e:	b7 0b       	sbc	r27, r23

000024a0 <__udivmodhi4_ep>:
    24a0:	88 1f       	adc	r24, r24
    24a2:	99 1f       	adc	r25, r25
    24a4:	5a 95       	dec	r21
    24a6:	a9 f7       	brne	.-22     	; 0x2492 <__udivmodhi4_loop>
    24a8:	80 95       	com	r24
    24aa:	90 95       	com	r25
    24ac:	bc 01       	movw	r22, r24
    24ae:	cd 01       	movw	r24, r26
    24b0:	08 95       	ret

000024b2 <__tablejump2__>:
    24b2:	ee 0f       	add	r30, r30
    24b4:	ff 1f       	adc	r31, r31
    24b6:	05 90       	lpm	r0, Z+
    24b8:	f4 91       	lpm	r31, Z
    24ba:	e0 2d       	mov	r30, r0
    24bc:	09 94       	ijmp

000024be <_exit>:
    24be:	f8 94       	cli

000024c0 <__stop_program>:
    24c0:	ff cf       	rjmp	.-2      	; 0x24c0 <__stop_program>
